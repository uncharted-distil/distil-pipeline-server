// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core.proto

package pipeline

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EvaluationMethod int32

const (
	// Default value. Not to be used.
	EvaluationMethod_EVALUATION_METHOD_UNDEFINED EvaluationMethod = 0
	// The following are the only evaluation methods required
	// to be supported for the "ScoreSolution" call.
	EvaluationMethod_HOLDOUT EvaluationMethod = 1
	EvaluationMethod_K_FOLD  EvaluationMethod = 2
	// The rest are defined to allow expressing internal evaluation
	// methods used by TA2 during solution search. If any method being used
	// is missing, feel free to request it to be added.
	EvaluationMethod_LEAVE_ONE_OUT EvaluationMethod = 100
	// Instead of really scoring, a TA2 might predict the score only.
	EvaluationMethod_PREDICTION EvaluationMethod = 101
	// Training data is reused to test as well.
	EvaluationMethod_TRAINING_DATA EvaluationMethod = 102
)

var EvaluationMethod_name = map[int32]string{
	0:   "EVALUATION_METHOD_UNDEFINED",
	1:   "HOLDOUT",
	2:   "K_FOLD",
	100: "LEAVE_ONE_OUT",
	101: "PREDICTION",
	102: "TRAINING_DATA",
}
var EvaluationMethod_value = map[string]int32{
	"EVALUATION_METHOD_UNDEFINED": 0,
	"HOLDOUT":                     1,
	"K_FOLD":                      2,
	"LEAVE_ONE_OUT":               100,
	"PREDICTION":                  101,
	"TRAINING_DATA":               102,
}

func (x EvaluationMethod) String() string {
	return proto.EnumName(EvaluationMethod_name, int32(x))
}
func (EvaluationMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{0}
}

type ProgressState int32

const (
	// Default value. Not to be used.
	ProgressState_PROGRESS_UNKNOWN ProgressState = 0
	// The process has been scheduled but is pending execution.
	ProgressState_PENDING ProgressState = 1
	// The process is currently running. There can be multiple messages with this state
	// (while the process is running).
	ProgressState_RUNNING ProgressState = 2
	// The process completed and final results are available.
	ProgressState_COMPLETED ProgressState = 3
	// The process failed.
	ProgressState_ERRORED ProgressState = 4
)

var ProgressState_name = map[int32]string{
	0: "PROGRESS_UNKNOWN",
	1: "PENDING",
	2: "RUNNING",
	3: "COMPLETED",
	4: "ERRORED",
}
var ProgressState_value = map[string]int32{
	"PROGRESS_UNKNOWN": 0,
	"PENDING":          1,
	"RUNNING":          2,
	"COMPLETED":        3,
	"ERRORED":          4,
}

func (x ProgressState) String() string {
	return proto.EnumName(ProgressState_name, int32(x))
}
func (ProgressState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{1}
}

type ScoringConfiguration struct {
	// The evaluation method to use.
	Method EvaluationMethod `protobuf:"varint,1,opt,name=method,proto3,enum=EvaluationMethod" json:"method,omitempty"`
	// Number of folds made, if applicable.
	Folds int32 `protobuf:"varint,2,opt,name=folds,proto3" json:"folds,omitempty"`
	// Ratio of train set vs. test set, if applicable.
	TrainTestRatio float64 `protobuf:"fixed64,3,opt,name=train_test_ratio,json=trainTestRatio,proto3" json:"train_test_ratio,omitempty"`
	// Shuffle data? Set to true if employed.
	Shuffle bool `protobuf:"varint,4,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
	// Value for random seed to use for shuffling. Optional.
	RandomSeed int32 `protobuf:"varint,5,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
	// Do stratified k-fold? Set to true if employed.
	Stratified           bool     `protobuf:"varint,6,opt,name=stratified,proto3" json:"stratified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScoringConfiguration) Reset()         { *m = ScoringConfiguration{} }
func (m *ScoringConfiguration) String() string { return proto.CompactTextString(m) }
func (*ScoringConfiguration) ProtoMessage()    {}
func (*ScoringConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{0}
}
func (m *ScoringConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScoringConfiguration.Unmarshal(m, b)
}
func (m *ScoringConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScoringConfiguration.Marshal(b, m, deterministic)
}
func (dst *ScoringConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoringConfiguration.Merge(dst, src)
}
func (m *ScoringConfiguration) XXX_Size() int {
	return xxx_messageInfo_ScoringConfiguration.Size(m)
}
func (m *ScoringConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoringConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ScoringConfiguration proto.InternalMessageInfo

func (m *ScoringConfiguration) GetMethod() EvaluationMethod {
	if m != nil {
		return m.Method
	}
	return EvaluationMethod_EVALUATION_METHOD_UNDEFINED
}

func (m *ScoringConfiguration) GetFolds() int32 {
	if m != nil {
		return m.Folds
	}
	return 0
}

func (m *ScoringConfiguration) GetTrainTestRatio() float64 {
	if m != nil {
		return m.TrainTestRatio
	}
	return 0
}

func (m *ScoringConfiguration) GetShuffle() bool {
	if m != nil {
		return m.Shuffle
	}
	return false
}

func (m *ScoringConfiguration) GetRandomSeed() int32 {
	if m != nil {
		return m.RandomSeed
	}
	return 0
}

func (m *ScoringConfiguration) GetStratified() bool {
	if m != nil {
		return m.Stratified
	}
	return false
}

type Score struct {
	Metric *ProblemPerformanceMetric `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	// When doing multiple folds, which fold is this score associated with, 0-based.
	// We do not aggregate scores across folds on the TA2 side, but expose everything to the TA3.
	// If scoring was not done as part of the cross-validation, then it can be returned
	// as the first and only fold, in which case the value of this field should be 0.
	Fold int32 `protobuf:"varint,2,opt,name=fold,proto3" json:"fold,omitempty"`
	// To which target or targets does this score apply?
	Targets              []*ProblemTarget `protobuf:"bytes,3,rep,name=targets,proto3" json:"targets,omitempty"`
	Value                *Value           `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Score) Reset()         { *m = Score{} }
func (m *Score) String() string { return proto.CompactTextString(m) }
func (*Score) ProtoMessage()    {}
func (*Score) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{1}
}
func (m *Score) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Score.Unmarshal(m, b)
}
func (m *Score) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Score.Marshal(b, m, deterministic)
}
func (dst *Score) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Score.Merge(dst, src)
}
func (m *Score) XXX_Size() int {
	return xxx_messageInfo_Score.Size(m)
}
func (m *Score) XXX_DiscardUnknown() {
	xxx_messageInfo_Score.DiscardUnknown(m)
}

var xxx_messageInfo_Score proto.InternalMessageInfo

func (m *Score) GetMetric() *ProblemPerformanceMetric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *Score) GetFold() int32 {
	if m != nil {
		return m.Fold
	}
	return 0
}

func (m *Score) GetTargets() []*ProblemTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *Score) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

// After "state" becomes "COMPLETED" or "ERRORED" stream closes.
// The granularity of progress updates is not specified by the API at this time. Some systems
// might be updating frequently and provide many updates of the progress of a whole process
// as well as individual pipeline steps. Some systems might just report these high-level
// progress states once, not doing any progress updates in the meantime.  The "status" field
// should contain information to supplement the progress state, such as specific failure details
// in the case of an "ERRORED" state being returned.
type Progress struct {
	State  ProgressState `protobuf:"varint,1,opt,name=state,proto3,enum=ProgressState" json:"state,omitempty"`
	Status string        `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Set only after state becomes "RUNNING". If it never really properly runs, but errors
	// when attempted to run, then it should be the timestamp of the error.
	Start *timestamp.Timestamp `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// Set only when state is "COMPLETED" or "ERRORED".
	End                  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Progress) Reset()         { *m = Progress{} }
func (m *Progress) String() string { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()    {}
func (*Progress) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{2}
}
func (m *Progress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Progress.Unmarshal(m, b)
}
func (m *Progress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Progress.Marshal(b, m, deterministic)
}
func (dst *Progress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Progress.Merge(dst, src)
}
func (m *Progress) XXX_Size() int {
	return xxx_messageInfo_Progress.Size(m)
}
func (m *Progress) XXX_DiscardUnknown() {
	xxx_messageInfo_Progress.DiscardUnknown(m)
}

var xxx_messageInfo_Progress proto.InternalMessageInfo

func (m *Progress) GetState() ProgressState {
	if m != nil {
		return m.State
	}
	return ProgressState_PROGRESS_UNKNOWN
}

func (m *Progress) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Progress) GetStart() *timestamp.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Progress) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

// Updates problem with new description. This also updates the problem description for all
// ongoing solution searches associated with this problem. Internal behavior of TA2
// is unspecified: it can simply start a new search using new problem description, or
// it can start modifying solutions it has already found to new problem description, or
// it can use it to further help narrow down ongoing solution searches. In any case, after
// this call returns, all reported solutions for searches associated with this problem
// should be for the updated problem description.
type UpdateProblemRequest struct {
	SearchId string `protobuf:"bytes,1,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	// New problem description. It has to be provided in full and it replaces existing
	// problem description.
	Problem              *ProblemDescription `protobuf:"bytes,2,opt,name=problem,proto3" json:"problem,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpdateProblemRequest) Reset()         { *m = UpdateProblemRequest{} }
func (m *UpdateProblemRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateProblemRequest) ProtoMessage()    {}
func (*UpdateProblemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{3}
}
func (m *UpdateProblemRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateProblemRequest.Unmarshal(m, b)
}
func (m *UpdateProblemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateProblemRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateProblemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProblemRequest.Merge(dst, src)
}
func (m *UpdateProblemRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateProblemRequest.Size(m)
}
func (m *UpdateProblemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProblemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProblemRequest proto.InternalMessageInfo

func (m *UpdateProblemRequest) GetSearchId() string {
	if m != nil {
		return m.SearchId
	}
	return ""
}

func (m *UpdateProblemRequest) GetProblem() *ProblemDescription {
	if m != nil {
		return m.Problem
	}
	return nil
}

type UpdateProblemResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateProblemResponse) Reset()         { *m = UpdateProblemResponse{} }
func (m *UpdateProblemResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateProblemResponse) ProtoMessage()    {}
func (*UpdateProblemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{4}
}
func (m *UpdateProblemResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateProblemResponse.Unmarshal(m, b)
}
func (m *UpdateProblemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateProblemResponse.Marshal(b, m, deterministic)
}
func (dst *UpdateProblemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProblemResponse.Merge(dst, src)
}
func (m *UpdateProblemResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateProblemResponse.Size(m)
}
func (m *UpdateProblemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProblemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProblemResponse proto.InternalMessageInfo

// Starts a new solution search. Found solutions have not necessary been fitted on the provided
// inputs. Problem description and inputs are used only to help guide the search process.
// Consider any found solutions to be just a static description of solutions at this stage.
// Multiple parallel solution searches can happen at the same time.
type SearchSolutionsRequest struct {
	// Some string identifying the name and version of the TA3 system.
	UserAgent string `protobuf:"bytes,1,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// Shall be set to "protocol_version" above.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Desired upper limit of time for solution search, expressed in minutes.
	// Is suggestion, and TA2's should attempt to obey, but TA3's should realize may be
	// violated. Default value of 0 (and any negative number) signifies no time bound.
	TimeBound float64 `protobuf:"fixed64,3,opt,name=time_bound,json=timeBound,proto3" json:"time_bound,omitempty"`
	// Value stating the priority of the search. If multiple searches are queued then highest
	// priority (largest number) should be started next by TA2. Primarily used to sort any
	// queue, but no further guarantee that TA2 can give more resources to high priority
	// searches. If unspecified, by default search will have priority 0. Negative numbers have
	// still lower priority.
	Priority float64 `protobuf:"fixed64,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// Which value types can a TA2 system use to communicate values to a TA3 system?
	// The order is important as a TA2 system will try value types in order until one works out,
	// or an error will be returned instead of the value.
	AllowedValueTypes []ValueType `protobuf:"varint,5,rep,packed,name=allowed_value_types,json=allowedValueTypes,proto3,enum=ValueType" json:"allowed_value_types,omitempty"`
	// Problem description to use for the solution search.
	Problem *ProblemDescription `protobuf:"bytes,6,opt,name=problem,proto3" json:"problem,omitempty"`
	// A pipeline template to use for search or to execute. If template is omitted, then a
	// regular solution search is done. If template consists only of one placeholder step,
	// then a regular solution search is done to replace that step. If there is no placeholder
	// step, but template describes a full pipeline with free hyper-parameters, then this
	// call becomes a hyper-paramater tuning call over free hyper-paramaters and found solutions
	// share the same pipeline, but different hyper-parameter configurations. If there is no
	// placeholder step and all hyper-parameters are fixed as part of the pipeline, then this
	// call only checks the given template and returns the solution with same pipeline back, to
	// be executed. This allows fixed computations to be done on data, for example, pipeline can
	// consist of only one primitive with fixed hyper-parameters to execute that one primitive.
	// Moreover, such fully specified pipelines with fixed hyper-parametres can have any
	// inputs and any outputs. Otherwise pipelines have to be from a Dataset container value
	// to predictions Pandas dataframe. While there are all these options possible, only a
	// subset has to be supported by all systems. See README for more details.
	Template *PipelineDescription `protobuf:"bytes,7,opt,name=template,proto3" json:"template,omitempty"`
	// Pipeline inputs used during solution search. They have to point to Dataset container
	// values. Order matters as each input is mapped to a template's input in order. Optional
	// for templates without a placeholder and with all hyper-parameters fixed.
	Inputs               []*Value `protobuf:"bytes,8,rep,name=inputs,proto3" json:"inputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchSolutionsRequest) Reset()         { *m = SearchSolutionsRequest{} }
func (m *SearchSolutionsRequest) String() string { return proto.CompactTextString(m) }
func (*SearchSolutionsRequest) ProtoMessage()    {}
func (*SearchSolutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{5}
}
func (m *SearchSolutionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchSolutionsRequest.Unmarshal(m, b)
}
func (m *SearchSolutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchSolutionsRequest.Marshal(b, m, deterministic)
}
func (dst *SearchSolutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchSolutionsRequest.Merge(dst, src)
}
func (m *SearchSolutionsRequest) XXX_Size() int {
	return xxx_messageInfo_SearchSolutionsRequest.Size(m)
}
func (m *SearchSolutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchSolutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchSolutionsRequest proto.InternalMessageInfo

func (m *SearchSolutionsRequest) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *SearchSolutionsRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SearchSolutionsRequest) GetTimeBound() float64 {
	if m != nil {
		return m.TimeBound
	}
	return 0
}

func (m *SearchSolutionsRequest) GetPriority() float64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *SearchSolutionsRequest) GetAllowedValueTypes() []ValueType {
	if m != nil {
		return m.AllowedValueTypes
	}
	return nil
}

func (m *SearchSolutionsRequest) GetProblem() *ProblemDescription {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *SearchSolutionsRequest) GetTemplate() *PipelineDescription {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *SearchSolutionsRequest) GetInputs() []*Value {
	if m != nil {
		return m.Inputs
	}
	return nil
}

// Call returns immediately with the ID. Use "GetFoundSolutions" call to get results.
type SearchSolutionsResponse struct {
	// An ID identifying this solution search. This string should be at least 22 characters
	// long to ensure enough entropy to not be guessable.
	SearchId             string   `protobuf:"bytes,1,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchSolutionsResponse) Reset()         { *m = SearchSolutionsResponse{} }
func (m *SearchSolutionsResponse) String() string { return proto.CompactTextString(m) }
func (*SearchSolutionsResponse) ProtoMessage()    {}
func (*SearchSolutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{6}
}
func (m *SearchSolutionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchSolutionsResponse.Unmarshal(m, b)
}
func (m *SearchSolutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchSolutionsResponse.Marshal(b, m, deterministic)
}
func (dst *SearchSolutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchSolutionsResponse.Merge(dst, src)
}
func (m *SearchSolutionsResponse) XXX_Size() int {
	return xxx_messageInfo_SearchSolutionsResponse.Size(m)
}
func (m *SearchSolutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchSolutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchSolutionsResponse proto.InternalMessageInfo

func (m *SearchSolutionsResponse) GetSearchId() string {
	if m != nil {
		return m.SearchId
	}
	return ""
}

// Ends the search and releases all resources associated with the solution search.
// If the call is made in parallel with a running search and results are being streamed,
// the search is stopped and the "GetSearchSolutionsResults" stream is closed by TA2
// (as happens when the search is concluded on its own, or when a search is stopped
// by "StopSearchSolutions"). Found solution IDs during the search are no longer valid
// after this call.
type EndSearchSolutionsRequest struct {
	SearchId             string   `protobuf:"bytes,1,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndSearchSolutionsRequest) Reset()         { *m = EndSearchSolutionsRequest{} }
func (m *EndSearchSolutionsRequest) String() string { return proto.CompactTextString(m) }
func (*EndSearchSolutionsRequest) ProtoMessage()    {}
func (*EndSearchSolutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{7}
}
func (m *EndSearchSolutionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSearchSolutionsRequest.Unmarshal(m, b)
}
func (m *EndSearchSolutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSearchSolutionsRequest.Marshal(b, m, deterministic)
}
func (dst *EndSearchSolutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSearchSolutionsRequest.Merge(dst, src)
}
func (m *EndSearchSolutionsRequest) XXX_Size() int {
	return xxx_messageInfo_EndSearchSolutionsRequest.Size(m)
}
func (m *EndSearchSolutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSearchSolutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndSearchSolutionsRequest proto.InternalMessageInfo

func (m *EndSearchSolutionsRequest) GetSearchId() string {
	if m != nil {
		return m.SearchId
	}
	return ""
}

type EndSearchSolutionsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndSearchSolutionsResponse) Reset()         { *m = EndSearchSolutionsResponse{} }
func (m *EndSearchSolutionsResponse) String() string { return proto.CompactTextString(m) }
func (*EndSearchSolutionsResponse) ProtoMessage()    {}
func (*EndSearchSolutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{8}
}
func (m *EndSearchSolutionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSearchSolutionsResponse.Unmarshal(m, b)
}
func (m *EndSearchSolutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSearchSolutionsResponse.Marshal(b, m, deterministic)
}
func (dst *EndSearchSolutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSearchSolutionsResponse.Merge(dst, src)
}
func (m *EndSearchSolutionsResponse) XXX_Size() int {
	return xxx_messageInfo_EndSearchSolutionsResponse.Size(m)
}
func (m *EndSearchSolutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSearchSolutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EndSearchSolutionsResponse proto.InternalMessageInfo

// Stops the search but leaves all currently found solutions available.
// If the call is made in parallel with a running search and results are being streamed,
// the "GetSearchSolutionsResults" stream is closed by the TA2 (as happens when the search
// is concluded on its own). Search cannot be re-started after it has been stopped.
type StopSearchSolutionsRequest struct {
	SearchId             string   `protobuf:"bytes,1,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopSearchSolutionsRequest) Reset()         { *m = StopSearchSolutionsRequest{} }
func (m *StopSearchSolutionsRequest) String() string { return proto.CompactTextString(m) }
func (*StopSearchSolutionsRequest) ProtoMessage()    {}
func (*StopSearchSolutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{9}
}
func (m *StopSearchSolutionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopSearchSolutionsRequest.Unmarshal(m, b)
}
func (m *StopSearchSolutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopSearchSolutionsRequest.Marshal(b, m, deterministic)
}
func (dst *StopSearchSolutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopSearchSolutionsRequest.Merge(dst, src)
}
func (m *StopSearchSolutionsRequest) XXX_Size() int {
	return xxx_messageInfo_StopSearchSolutionsRequest.Size(m)
}
func (m *StopSearchSolutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopSearchSolutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopSearchSolutionsRequest proto.InternalMessageInfo

func (m *StopSearchSolutionsRequest) GetSearchId() string {
	if m != nil {
		return m.SearchId
	}
	return ""
}

type StopSearchSolutionsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopSearchSolutionsResponse) Reset()         { *m = StopSearchSolutionsResponse{} }
func (m *StopSearchSolutionsResponse) String() string { return proto.CompactTextString(m) }
func (*StopSearchSolutionsResponse) ProtoMessage()    {}
func (*StopSearchSolutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{10}
}
func (m *StopSearchSolutionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopSearchSolutionsResponse.Unmarshal(m, b)
}
func (m *StopSearchSolutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopSearchSolutionsResponse.Marshal(b, m, deterministic)
}
func (dst *StopSearchSolutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopSearchSolutionsResponse.Merge(dst, src)
}
func (m *StopSearchSolutionsResponse) XXX_Size() int {
	return xxx_messageInfo_StopSearchSolutionsResponse.Size(m)
}
func (m *StopSearchSolutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopSearchSolutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopSearchSolutionsResponse proto.InternalMessageInfo

// Description of a TA2 score done during solution search. Because there is a wide range of
// potential approaches a TA2 can use to score candidate solutions this might not capture what
//  your TA2 is doing. Feel free to request additions to be able to describe your approach.
type SolutionSearchScore struct {
	ScoringConfiguration *ScoringConfiguration `protobuf:"bytes,1,opt,name=scoring_configuration,json=scoringConfiguration,proto3" json:"scoring_configuration,omitempty"`
	Scores               []*Score              `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SolutionSearchScore) Reset()         { *m = SolutionSearchScore{} }
func (m *SolutionSearchScore) String() string { return proto.CompactTextString(m) }
func (*SolutionSearchScore) ProtoMessage()    {}
func (*SolutionSearchScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{11}
}
func (m *SolutionSearchScore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolutionSearchScore.Unmarshal(m, b)
}
func (m *SolutionSearchScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolutionSearchScore.Marshal(b, m, deterministic)
}
func (dst *SolutionSearchScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolutionSearchScore.Merge(dst, src)
}
func (m *SolutionSearchScore) XXX_Size() int {
	return xxx_messageInfo_SolutionSearchScore.Size(m)
}
func (m *SolutionSearchScore) XXX_DiscardUnknown() {
	xxx_messageInfo_SolutionSearchScore.DiscardUnknown(m)
}

var xxx_messageInfo_SolutionSearchScore proto.InternalMessageInfo

func (m *SolutionSearchScore) GetScoringConfiguration() *ScoringConfiguration {
	if m != nil {
		return m.ScoringConfiguration
	}
	return nil
}

func (m *SolutionSearchScore) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

// Get all solutions presently identified by the search and start receiving any
// further solutions also found as well.
type GetSearchSolutionsResultsRequest struct {
	SearchId             string   `protobuf:"bytes,1,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSearchSolutionsResultsRequest) Reset()         { *m = GetSearchSolutionsResultsRequest{} }
func (m *GetSearchSolutionsResultsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSearchSolutionsResultsRequest) ProtoMessage()    {}
func (*GetSearchSolutionsResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{12}
}
func (m *GetSearchSolutionsResultsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSearchSolutionsResultsRequest.Unmarshal(m, b)
}
func (m *GetSearchSolutionsResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSearchSolutionsResultsRequest.Marshal(b, m, deterministic)
}
func (dst *GetSearchSolutionsResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSearchSolutionsResultsRequest.Merge(dst, src)
}
func (m *GetSearchSolutionsResultsRequest) XXX_Size() int {
	return xxx_messageInfo_GetSearchSolutionsResultsRequest.Size(m)
}
func (m *GetSearchSolutionsResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSearchSolutionsResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSearchSolutionsResultsRequest proto.InternalMessageInfo

func (m *GetSearchSolutionsResultsRequest) GetSearchId() string {
	if m != nil {
		return m.SearchId
	}
	return ""
}

type GetSearchSolutionsResultsResponse struct {
	// Overall process progress, not progress per solution. While solutions are being found and
	// returned, or scores computed and updated, progress state should be kept at "RUNNING".
	Progress *Progress `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	// A measure of progress during search. It can be any number of internal steps or
	// actions a TA2 is doing during search. It can be even number of how many candidate
	// solutions were already examined. It does not even have to be an integer.
	// How regularly a change to this number is reported to TA3 is left to TA2's discretion,
	// but a rule of thumb is at least once a minute if the number changes.
	DoneTicks float64 `protobuf:"fixed64,2,opt,name=done_ticks,json=doneTicks,proto3" json:"done_ticks,omitempty"`
	// If TA2 knows how many internal steps or actions are there, it can set this field.
	// This can also be updated through time if more (or even less) internal steps or
	// actions are determined to be necessary. If this value is non-zero, then it should
	// always hold that "done_ticks" <= "all_ticks".
	AllTicks   float64 `protobuf:"fixed64,3,opt,name=all_ticks,json=allTicks,proto3" json:"all_ticks,omitempty"`
	SolutionId string  `protobuf:"bytes,4,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	// Internal score for this solution between 0.0 and 1.0 where 1.0 is the highest score.
	// There is no other meaning to this score and it does not necessary depend on scores
	// listed in the problem description. Optional.
	// Because this field is optional, if omitted the default value will be 0. But 0 is a
	// valid value for this field. Because of that you should never omit the field.
	// If you do not have internal score to provide, use NaN for the value of this field
	// to signal that.
	InternalScore float64 `protobuf:"fixed64,5,opt,name=internal_score,json=internalScore,proto3" json:"internal_score,omitempty"`
	// TA2 might be able to provide more meaningful scores as well, depending on its
	// approach to solution search. Moreover, even the same TA2 might not use the same scoring
	// approach for all of its solutions. Optional.
	Scores               []*SolutionSearchScore `protobuf:"bytes,6,rep,name=scores,proto3" json:"scores,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetSearchSolutionsResultsResponse) Reset()         { *m = GetSearchSolutionsResultsResponse{} }
func (m *GetSearchSolutionsResultsResponse) String() string { return proto.CompactTextString(m) }
func (*GetSearchSolutionsResultsResponse) ProtoMessage()    {}
func (*GetSearchSolutionsResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{13}
}
func (m *GetSearchSolutionsResultsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSearchSolutionsResultsResponse.Unmarshal(m, b)
}
func (m *GetSearchSolutionsResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSearchSolutionsResultsResponse.Marshal(b, m, deterministic)
}
func (dst *GetSearchSolutionsResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSearchSolutionsResultsResponse.Merge(dst, src)
}
func (m *GetSearchSolutionsResultsResponse) XXX_Size() int {
	return xxx_messageInfo_GetSearchSolutionsResultsResponse.Size(m)
}
func (m *GetSearchSolutionsResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSearchSolutionsResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSearchSolutionsResultsResponse proto.InternalMessageInfo

func (m *GetSearchSolutionsResultsResponse) GetProgress() *Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *GetSearchSolutionsResultsResponse) GetDoneTicks() float64 {
	if m != nil {
		return m.DoneTicks
	}
	return 0
}

func (m *GetSearchSolutionsResultsResponse) GetAllTicks() float64 {
	if m != nil {
		return m.AllTicks
	}
	return 0
}

func (m *GetSearchSolutionsResultsResponse) GetSolutionId() string {
	if m != nil {
		return m.SolutionId
	}
	return ""
}

func (m *GetSearchSolutionsResultsResponse) GetInternalScore() float64 {
	if m != nil {
		return m.InternalScore
	}
	return 0
}

func (m *GetSearchSolutionsResultsResponse) GetScores() []*SolutionSearchScore {
	if m != nil {
		return m.Scores
	}
	return nil
}

// Request a detailed description of the found solution.
type DescribeSolutionRequest struct {
	SolutionId           string   `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeSolutionRequest) Reset()         { *m = DescribeSolutionRequest{} }
func (m *DescribeSolutionRequest) String() string { return proto.CompactTextString(m) }
func (*DescribeSolutionRequest) ProtoMessage()    {}
func (*DescribeSolutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{14}
}
func (m *DescribeSolutionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeSolutionRequest.Unmarshal(m, b)
}
func (m *DescribeSolutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeSolutionRequest.Marshal(b, m, deterministic)
}
func (dst *DescribeSolutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeSolutionRequest.Merge(dst, src)
}
func (m *DescribeSolutionRequest) XXX_Size() int {
	return xxx_messageInfo_DescribeSolutionRequest.Size(m)
}
func (m *DescribeSolutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeSolutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeSolutionRequest proto.InternalMessageInfo

func (m *DescribeSolutionRequest) GetSolutionId() string {
	if m != nil {
		return m.SolutionId
	}
	return ""
}

type PrimitiveStepDescription struct {
	// Selected value for free pipeline hyper-parameters.
	Hyperparams          map[string]*Value `protobuf:"bytes,1,rep,name=hyperparams,proto3" json:"hyperparams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PrimitiveStepDescription) Reset()         { *m = PrimitiveStepDescription{} }
func (m *PrimitiveStepDescription) String() string { return proto.CompactTextString(m) }
func (*PrimitiveStepDescription) ProtoMessage()    {}
func (*PrimitiveStepDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{15}
}
func (m *PrimitiveStepDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimitiveStepDescription.Unmarshal(m, b)
}
func (m *PrimitiveStepDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimitiveStepDescription.Marshal(b, m, deterministic)
}
func (dst *PrimitiveStepDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveStepDescription.Merge(dst, src)
}
func (m *PrimitiveStepDescription) XXX_Size() int {
	return xxx_messageInfo_PrimitiveStepDescription.Size(m)
}
func (m *PrimitiveStepDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveStepDescription.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveStepDescription proto.InternalMessageInfo

func (m *PrimitiveStepDescription) GetHyperparams() map[string]*Value {
	if m != nil {
		return m.Hyperparams
	}
	return nil
}

type SubpipelineStepDescription struct {
	// Each step in a sub-pipeline has a description. These are reported in the order of steps
	// in the sub-pipeline.
	Steps                []*StepDescription `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SubpipelineStepDescription) Reset()         { *m = SubpipelineStepDescription{} }
func (m *SubpipelineStepDescription) String() string { return proto.CompactTextString(m) }
func (*SubpipelineStepDescription) ProtoMessage()    {}
func (*SubpipelineStepDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{16}
}
func (m *SubpipelineStepDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubpipelineStepDescription.Unmarshal(m, b)
}
func (m *SubpipelineStepDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubpipelineStepDescription.Marshal(b, m, deterministic)
}
func (dst *SubpipelineStepDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubpipelineStepDescription.Merge(dst, src)
}
func (m *SubpipelineStepDescription) XXX_Size() int {
	return xxx_messageInfo_SubpipelineStepDescription.Size(m)
}
func (m *SubpipelineStepDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_SubpipelineStepDescription.DiscardUnknown(m)
}

var xxx_messageInfo_SubpipelineStepDescription proto.InternalMessageInfo

func (m *SubpipelineStepDescription) GetSteps() []*StepDescription {
	if m != nil {
		return m.Steps
	}
	return nil
}

type StepDescription struct {
	// Types that are valid to be assigned to Step:
	//	*StepDescription_Primitive
	//	*StepDescription_Pipeline
	Step                 isStepDescription_Step `protobuf_oneof:"step"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StepDescription) Reset()         { *m = StepDescription{} }
func (m *StepDescription) String() string { return proto.CompactTextString(m) }
func (*StepDescription) ProtoMessage()    {}
func (*StepDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{17}
}
func (m *StepDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StepDescription.Unmarshal(m, b)
}
func (m *StepDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StepDescription.Marshal(b, m, deterministic)
}
func (dst *StepDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepDescription.Merge(dst, src)
}
func (m *StepDescription) XXX_Size() int {
	return xxx_messageInfo_StepDescription.Size(m)
}
func (m *StepDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_StepDescription.DiscardUnknown(m)
}

var xxx_messageInfo_StepDescription proto.InternalMessageInfo

type isStepDescription_Step interface {
	isStepDescription_Step()
}

type StepDescription_Primitive struct {
	Primitive *PrimitiveStepDescription `protobuf:"bytes,1,opt,name=primitive,proto3,oneof"`
}
type StepDescription_Pipeline struct {
	Pipeline *SubpipelineStepDescription `protobuf:"bytes,2,opt,name=pipeline,proto3,oneof"`
}

func (*StepDescription_Primitive) isStepDescription_Step() {}
func (*StepDescription_Pipeline) isStepDescription_Step()  {}

func (m *StepDescription) GetStep() isStepDescription_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *StepDescription) GetPrimitive() *PrimitiveStepDescription {
	if x, ok := m.GetStep().(*StepDescription_Primitive); ok {
		return x.Primitive
	}
	return nil
}

func (m *StepDescription) GetPipeline() *SubpipelineStepDescription {
	if x, ok := m.GetStep().(*StepDescription_Pipeline); ok {
		return x.Pipeline
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StepDescription) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StepDescription_OneofMarshaler, _StepDescription_OneofUnmarshaler, _StepDescription_OneofSizer, []interface{}{
		(*StepDescription_Primitive)(nil),
		(*StepDescription_Pipeline)(nil),
	}
}

func _StepDescription_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StepDescription)
	// step
	switch x := m.Step.(type) {
	case *StepDescription_Primitive:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Primitive); err != nil {
			return err
		}
	case *StepDescription_Pipeline:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pipeline); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StepDescription.Step has unexpected type %T", x)
	}
	return nil
}

func _StepDescription_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StepDescription)
	switch tag {
	case 1: // step.primitive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrimitiveStepDescription)
		err := b.DecodeMessage(msg)
		m.Step = &StepDescription_Primitive{msg}
		return true, err
	case 2: // step.pipeline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubpipelineStepDescription)
		err := b.DecodeMessage(msg)
		m.Step = &StepDescription_Pipeline{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StepDescription_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StepDescription)
	// step
	switch x := m.Step.(type) {
	case *StepDescription_Primitive:
		s := proto.Size(x.Primitive)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StepDescription_Pipeline:
		s := proto.Size(x.Pipeline)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DescribeSolutionResponse struct {
	// A pipeline description. Nested pipelines should be fully described as well.
	Pipeline *PipelineDescription `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// Each step in a pipeline has description. These are reported in the order of steps in
	// the pipeline.
	Steps                []*StepDescription `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DescribeSolutionResponse) Reset()         { *m = DescribeSolutionResponse{} }
func (m *DescribeSolutionResponse) String() string { return proto.CompactTextString(m) }
func (*DescribeSolutionResponse) ProtoMessage()    {}
func (*DescribeSolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{18}
}
func (m *DescribeSolutionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeSolutionResponse.Unmarshal(m, b)
}
func (m *DescribeSolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeSolutionResponse.Marshal(b, m, deterministic)
}
func (dst *DescribeSolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeSolutionResponse.Merge(dst, src)
}
func (m *DescribeSolutionResponse) XXX_Size() int {
	return xxx_messageInfo_DescribeSolutionResponse.Size(m)
}
func (m *DescribeSolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeSolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeSolutionResponse proto.InternalMessageInfo

func (m *DescribeSolutionResponse) GetPipeline() *PipelineDescription {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *DescribeSolutionResponse) GetSteps() []*StepDescription {
	if m != nil {
		return m.Steps
	}
	return nil
}

type StepProgress struct {
	Progress *Progress `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	// If step is a sub-pipeline, then this list contains progress for each step in the
	// sub-pipeline, in order.
	// List can be incomplete while the process is in progress. Systems can provide
	// steps only at the end (when "progress" equals COMPLETED) and not during running.
	Steps                []*StepProgress `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StepProgress) Reset()         { *m = StepProgress{} }
func (m *StepProgress) String() string { return proto.CompactTextString(m) }
func (*StepProgress) ProtoMessage()    {}
func (*StepProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{19}
}
func (m *StepProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StepProgress.Unmarshal(m, b)
}
func (m *StepProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StepProgress.Marshal(b, m, deterministic)
}
func (dst *StepProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepProgress.Merge(dst, src)
}
func (m *StepProgress) XXX_Size() int {
	return xxx_messageInfo_StepProgress.Size(m)
}
func (m *StepProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_StepProgress.DiscardUnknown(m)
}

var xxx_messageInfo_StepProgress proto.InternalMessageInfo

func (m *StepProgress) GetProgress() *Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *StepProgress) GetSteps() []*StepProgress {
	if m != nil {
		return m.Steps
	}
	return nil
}

// User associated with the run of the solution.
type SolutionRunUser struct {
	// A UUID of the user. It does not have to map to any real ID, just that it is possible
	// to connect multiple solution actions by the same user together, if necessary.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Was this run because solution was choosen by this user.
	Choosen bool `protobuf:"varint,2,opt,name=choosen,proto3" json:"choosen,omitempty"`
	// Textual reason provided by the user why the run was choosen by this user.
	Reason               string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolutionRunUser) Reset()         { *m = SolutionRunUser{} }
func (m *SolutionRunUser) String() string { return proto.CompactTextString(m) }
func (*SolutionRunUser) ProtoMessage()    {}
func (*SolutionRunUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{20}
}
func (m *SolutionRunUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolutionRunUser.Unmarshal(m, b)
}
func (m *SolutionRunUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolutionRunUser.Marshal(b, m, deterministic)
}
func (dst *SolutionRunUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolutionRunUser.Merge(dst, src)
}
func (m *SolutionRunUser) XXX_Size() int {
	return xxx_messageInfo_SolutionRunUser.Size(m)
}
func (m *SolutionRunUser) XXX_DiscardUnknown() {
	xxx_messageInfo_SolutionRunUser.DiscardUnknown(m)
}

var xxx_messageInfo_SolutionRunUser proto.InternalMessageInfo

func (m *SolutionRunUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SolutionRunUser) GetChoosen() bool {
	if m != nil {
		return m.Choosen
	}
	return false
}

func (m *SolutionRunUser) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Request solution to be scored given inputs. Inputs have to be Dataset container values
// and pipeline outputs have to be predictions. It can internally run multiple fit + produce
// runs of the pipeline on permutations of inputs data (e.g., for cross-validation). This is
// also why we cannot expose outputs here.
type ScoreSolutionRequest struct {
	SolutionId         string                      `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Inputs             []*Value                    `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	PerformanceMetrics []*ProblemPerformanceMetric `protobuf:"bytes,3,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
	// Any users associated with this call itself. Optional.
	Users                []*SolutionRunUser    `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	Configuration        *ScoringConfiguration `protobuf:"bytes,5,opt,name=configuration,proto3" json:"configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ScoreSolutionRequest) Reset()         { *m = ScoreSolutionRequest{} }
func (m *ScoreSolutionRequest) String() string { return proto.CompactTextString(m) }
func (*ScoreSolutionRequest) ProtoMessage()    {}
func (*ScoreSolutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{21}
}
func (m *ScoreSolutionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScoreSolutionRequest.Unmarshal(m, b)
}
func (m *ScoreSolutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScoreSolutionRequest.Marshal(b, m, deterministic)
}
func (dst *ScoreSolutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreSolutionRequest.Merge(dst, src)
}
func (m *ScoreSolutionRequest) XXX_Size() int {
	return xxx_messageInfo_ScoreSolutionRequest.Size(m)
}
func (m *ScoreSolutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreSolutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreSolutionRequest proto.InternalMessageInfo

func (m *ScoreSolutionRequest) GetSolutionId() string {
	if m != nil {
		return m.SolutionId
	}
	return ""
}

func (m *ScoreSolutionRequest) GetInputs() []*Value {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ScoreSolutionRequest) GetPerformanceMetrics() []*ProblemPerformanceMetric {
	if m != nil {
		return m.PerformanceMetrics
	}
	return nil
}

func (m *ScoreSolutionRequest) GetUsers() []*SolutionRunUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ScoreSolutionRequest) GetConfiguration() *ScoringConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

type ScoreSolutionResponse struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScoreSolutionResponse) Reset()         { *m = ScoreSolutionResponse{} }
func (m *ScoreSolutionResponse) String() string { return proto.CompactTextString(m) }
func (*ScoreSolutionResponse) ProtoMessage()    {}
func (*ScoreSolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{22}
}
func (m *ScoreSolutionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScoreSolutionResponse.Unmarshal(m, b)
}
func (m *ScoreSolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScoreSolutionResponse.Marshal(b, m, deterministic)
}
func (dst *ScoreSolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreSolutionResponse.Merge(dst, src)
}
func (m *ScoreSolutionResponse) XXX_Size() int {
	return xxx_messageInfo_ScoreSolutionResponse.Size(m)
}
func (m *ScoreSolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreSolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreSolutionResponse proto.InternalMessageInfo

func (m *ScoreSolutionResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Get all score results computed until now and start receiving any
// new score results computed as well.
type GetScoreSolutionResultsRequest struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetScoreSolutionResultsRequest) Reset()         { *m = GetScoreSolutionResultsRequest{} }
func (m *GetScoreSolutionResultsRequest) String() string { return proto.CompactTextString(m) }
func (*GetScoreSolutionResultsRequest) ProtoMessage()    {}
func (*GetScoreSolutionResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{23}
}
func (m *GetScoreSolutionResultsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetScoreSolutionResultsRequest.Unmarshal(m, b)
}
func (m *GetScoreSolutionResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetScoreSolutionResultsRequest.Marshal(b, m, deterministic)
}
func (dst *GetScoreSolutionResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScoreSolutionResultsRequest.Merge(dst, src)
}
func (m *GetScoreSolutionResultsRequest) XXX_Size() int {
	return xxx_messageInfo_GetScoreSolutionResultsRequest.Size(m)
}
func (m *GetScoreSolutionResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScoreSolutionResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetScoreSolutionResultsRequest proto.InternalMessageInfo

func (m *GetScoreSolutionResultsRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type GetScoreSolutionResultsResponse struct {
	// Overall process progress.
	Progress *Progress `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	// List of score results. List can be incomplete while the process is in progress.
	Scores               []*Score `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetScoreSolutionResultsResponse) Reset()         { *m = GetScoreSolutionResultsResponse{} }
func (m *GetScoreSolutionResultsResponse) String() string { return proto.CompactTextString(m) }
func (*GetScoreSolutionResultsResponse) ProtoMessage()    {}
func (*GetScoreSolutionResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{24}
}
func (m *GetScoreSolutionResultsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetScoreSolutionResultsResponse.Unmarshal(m, b)
}
func (m *GetScoreSolutionResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetScoreSolutionResultsResponse.Marshal(b, m, deterministic)
}
func (dst *GetScoreSolutionResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScoreSolutionResultsResponse.Merge(dst, src)
}
func (m *GetScoreSolutionResultsResponse) XXX_Size() int {
	return xxx_messageInfo_GetScoreSolutionResultsResponse.Size(m)
}
func (m *GetScoreSolutionResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScoreSolutionResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetScoreSolutionResultsResponse proto.InternalMessageInfo

func (m *GetScoreSolutionResultsResponse) GetProgress() *Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *GetScoreSolutionResultsResponse) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

// Fit the solution on given inputs. If a solution is already fitted on inputs this is a NOOP
// (if no additional outputs should be exposed). This can happen when a TA2 simultaneously
// fits the solution as part of the solution search phase.
type FitSolutionRequest struct {
	SolutionId string   `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Inputs     []*Value `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// List of data references of step outputs which should be exposed to the TA3 system.
	// If you want to expose outputs of the whole pipeline (e.g., predictions themselves),
	// list them here as well. These can be recursive data references like
	// "steps.1.steps.4.produce" to point to an output inside a sub-pipeline.
	// Systems only have to support exposing final outputs and can return "ValueError" for
	// intermediate values.
	ExposeOutputs []string `protobuf:"bytes,3,rep,name=expose_outputs,json=exposeOutputs,proto3" json:"expose_outputs,omitempty"`
	// Which value types should be used for exposing outputs. If not provided, the allowed
	// value types list from hello call is used instead.
	// The order is important as TA2 system will try value types in order until one works out,
	// or an error will be returned instead of the value. An error exposing a value does not
	// stop the overall process.
	ExposeValueTypes []ValueType `protobuf:"varint,4,rep,packed,name=expose_value_types,json=exposeValueTypes,proto3,enum=ValueType" json:"expose_value_types,omitempty"`
	// Any users associated with this call itself. Optional.
	Users                []*SolutionRunUser `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FitSolutionRequest) Reset()         { *m = FitSolutionRequest{} }
func (m *FitSolutionRequest) String() string { return proto.CompactTextString(m) }
func (*FitSolutionRequest) ProtoMessage()    {}
func (*FitSolutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{25}
}
func (m *FitSolutionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FitSolutionRequest.Unmarshal(m, b)
}
func (m *FitSolutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FitSolutionRequest.Marshal(b, m, deterministic)
}
func (dst *FitSolutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FitSolutionRequest.Merge(dst, src)
}
func (m *FitSolutionRequest) XXX_Size() int {
	return xxx_messageInfo_FitSolutionRequest.Size(m)
}
func (m *FitSolutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FitSolutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FitSolutionRequest proto.InternalMessageInfo

func (m *FitSolutionRequest) GetSolutionId() string {
	if m != nil {
		return m.SolutionId
	}
	return ""
}

func (m *FitSolutionRequest) GetInputs() []*Value {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *FitSolutionRequest) GetExposeOutputs() []string {
	if m != nil {
		return m.ExposeOutputs
	}
	return nil
}

func (m *FitSolutionRequest) GetExposeValueTypes() []ValueType {
	if m != nil {
		return m.ExposeValueTypes
	}
	return nil
}

func (m *FitSolutionRequest) GetUsers() []*SolutionRunUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type FitSolutionResponse struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FitSolutionResponse) Reset()         { *m = FitSolutionResponse{} }
func (m *FitSolutionResponse) String() string { return proto.CompactTextString(m) }
func (*FitSolutionResponse) ProtoMessage()    {}
func (*FitSolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{26}
}
func (m *FitSolutionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FitSolutionResponse.Unmarshal(m, b)
}
func (m *FitSolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FitSolutionResponse.Marshal(b, m, deterministic)
}
func (dst *FitSolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FitSolutionResponse.Merge(dst, src)
}
func (m *FitSolutionResponse) XXX_Size() int {
	return xxx_messageInfo_FitSolutionResponse.Size(m)
}
func (m *FitSolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FitSolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FitSolutionResponse proto.InternalMessageInfo

func (m *FitSolutionResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Get all fitted results currently available and start receiving any further
// new fitted results as well.
type GetFitSolutionResultsRequest struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFitSolutionResultsRequest) Reset()         { *m = GetFitSolutionResultsRequest{} }
func (m *GetFitSolutionResultsRequest) String() string { return proto.CompactTextString(m) }
func (*GetFitSolutionResultsRequest) ProtoMessage()    {}
func (*GetFitSolutionResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{27}
}
func (m *GetFitSolutionResultsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFitSolutionResultsRequest.Unmarshal(m, b)
}
func (m *GetFitSolutionResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFitSolutionResultsRequest.Marshal(b, m, deterministic)
}
func (dst *GetFitSolutionResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFitSolutionResultsRequest.Merge(dst, src)
}
func (m *GetFitSolutionResultsRequest) XXX_Size() int {
	return xxx_messageInfo_GetFitSolutionResultsRequest.Size(m)
}
func (m *GetFitSolutionResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFitSolutionResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFitSolutionResultsRequest proto.InternalMessageInfo

func (m *GetFitSolutionResultsRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type GetFitSolutionResultsResponse struct {
	// Overall process progress.
	Progress *Progress `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	// The list contains progress for each step in the pipeline, in order.
	// List can be incomplete while the process is in progress. Systems can provide
	// steps only at the end (when "progress" equals COMPLETED) and not during running.
	Steps []*StepProgress `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
	// A mapping between data references of step outputs and values.
	ExposedOutputs map[string]*Value `protobuf:"bytes,3,rep,name=exposed_outputs,json=exposedOutputs,proto3" json:"exposed_outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The fitted solution ID, once progress = COMPLETED.
	FittedSolutionId     string   `protobuf:"bytes,4,opt,name=fitted_solution_id,json=fittedSolutionId,proto3" json:"fitted_solution_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFitSolutionResultsResponse) Reset()         { *m = GetFitSolutionResultsResponse{} }
func (m *GetFitSolutionResultsResponse) String() string { return proto.CompactTextString(m) }
func (*GetFitSolutionResultsResponse) ProtoMessage()    {}
func (*GetFitSolutionResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{28}
}
func (m *GetFitSolutionResultsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFitSolutionResultsResponse.Unmarshal(m, b)
}
func (m *GetFitSolutionResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFitSolutionResultsResponse.Marshal(b, m, deterministic)
}
func (dst *GetFitSolutionResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFitSolutionResultsResponse.Merge(dst, src)
}
func (m *GetFitSolutionResultsResponse) XXX_Size() int {
	return xxx_messageInfo_GetFitSolutionResultsResponse.Size(m)
}
func (m *GetFitSolutionResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFitSolutionResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFitSolutionResultsResponse proto.InternalMessageInfo

func (m *GetFitSolutionResultsResponse) GetProgress() *Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *GetFitSolutionResultsResponse) GetSteps() []*StepProgress {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *GetFitSolutionResultsResponse) GetExposedOutputs() map[string]*Value {
	if m != nil {
		return m.ExposedOutputs
	}
	return nil
}

func (m *GetFitSolutionResultsResponse) GetFittedSolutionId() string {
	if m != nil {
		return m.FittedSolutionId
	}
	return ""
}

// Produce (execute) the solution on given inputs. A solution has to have been fitted for this
// to be possible (even if in cases where this is just created by transformations).
type ProduceSolutionRequest struct {
	FittedSolutionId string   `protobuf:"bytes,1,opt,name=fitted_solution_id,json=fittedSolutionId,proto3" json:"fitted_solution_id,omitempty"`
	Inputs           []*Value `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// List of data references of step outputs which should be exposed to the TA3 system.
	// If you want to expose outputs of the whole pipeline (e.g., predictions themselves),
	// list them here as well. These can be recursive data references like
	// "steps.1.steps.4.produce" to point to an output inside a sub-pipeline.
	// Systems only have to support exposing final outputs and can return "ValueError" for
	// intermediate values.
	ExposeOutputs []string `protobuf:"bytes,3,rep,name=expose_outputs,json=exposeOutputs,proto3" json:"expose_outputs,omitempty"`
	// Which value types should be used for exposing outputs. If not provided, the allowed
	// value types list from a hello call is used instead.
	// The order is important as the TA2 system will try value types in order until one works
	// out, or an error will be returned instead of the value. An error exposing a value does
	// not stop the overall process.
	ExposeValueTypes []ValueType `protobuf:"varint,4,rep,packed,name=expose_value_types,json=exposeValueTypes,proto3,enum=ValueType" json:"expose_value_types,omitempty"`
	// Any users associated with this call itself. Optional.
	Users                []*SolutionRunUser `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ProduceSolutionRequest) Reset()         { *m = ProduceSolutionRequest{} }
func (m *ProduceSolutionRequest) String() string { return proto.CompactTextString(m) }
func (*ProduceSolutionRequest) ProtoMessage()    {}
func (*ProduceSolutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{29}
}
func (m *ProduceSolutionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceSolutionRequest.Unmarshal(m, b)
}
func (m *ProduceSolutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceSolutionRequest.Marshal(b, m, deterministic)
}
func (dst *ProduceSolutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceSolutionRequest.Merge(dst, src)
}
func (m *ProduceSolutionRequest) XXX_Size() int {
	return xxx_messageInfo_ProduceSolutionRequest.Size(m)
}
func (m *ProduceSolutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceSolutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceSolutionRequest proto.InternalMessageInfo

func (m *ProduceSolutionRequest) GetFittedSolutionId() string {
	if m != nil {
		return m.FittedSolutionId
	}
	return ""
}

func (m *ProduceSolutionRequest) GetInputs() []*Value {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ProduceSolutionRequest) GetExposeOutputs() []string {
	if m != nil {
		return m.ExposeOutputs
	}
	return nil
}

func (m *ProduceSolutionRequest) GetExposeValueTypes() []ValueType {
	if m != nil {
		return m.ExposeValueTypes
	}
	return nil
}

func (m *ProduceSolutionRequest) GetUsers() []*SolutionRunUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type ProduceSolutionResponse struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProduceSolutionResponse) Reset()         { *m = ProduceSolutionResponse{} }
func (m *ProduceSolutionResponse) String() string { return proto.CompactTextString(m) }
func (*ProduceSolutionResponse) ProtoMessage()    {}
func (*ProduceSolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{30}
}
func (m *ProduceSolutionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceSolutionResponse.Unmarshal(m, b)
}
func (m *ProduceSolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceSolutionResponse.Marshal(b, m, deterministic)
}
func (dst *ProduceSolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceSolutionResponse.Merge(dst, src)
}
func (m *ProduceSolutionResponse) XXX_Size() int {
	return xxx_messageInfo_ProduceSolutionResponse.Size(m)
}
func (m *ProduceSolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceSolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceSolutionResponse proto.InternalMessageInfo

func (m *ProduceSolutionResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Get all producing results computed until now and start receiving any
// new producing results computed as well.
type GetProduceSolutionResultsRequest struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProduceSolutionResultsRequest) Reset()         { *m = GetProduceSolutionResultsRequest{} }
func (m *GetProduceSolutionResultsRequest) String() string { return proto.CompactTextString(m) }
func (*GetProduceSolutionResultsRequest) ProtoMessage()    {}
func (*GetProduceSolutionResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{31}
}
func (m *GetProduceSolutionResultsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProduceSolutionResultsRequest.Unmarshal(m, b)
}
func (m *GetProduceSolutionResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProduceSolutionResultsRequest.Marshal(b, m, deterministic)
}
func (dst *GetProduceSolutionResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProduceSolutionResultsRequest.Merge(dst, src)
}
func (m *GetProduceSolutionResultsRequest) XXX_Size() int {
	return xxx_messageInfo_GetProduceSolutionResultsRequest.Size(m)
}
func (m *GetProduceSolutionResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProduceSolutionResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProduceSolutionResultsRequest proto.InternalMessageInfo

func (m *GetProduceSolutionResultsRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type GetProduceSolutionResultsResponse struct {
	// Overall process progress.
	Progress *Progress `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	// The list contains progress for each step in the pipeline, in order.
	// List can be incomplete while the process is in progress. Systems can provide
	// steps only at the end (when "progress" equals COMPLETED) and not during running.
	Steps []*StepProgress `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
	// A mapping between data references of step outputs and values.
	ExposedOutputs       map[string]*Value `protobuf:"bytes,3,rep,name=exposed_outputs,json=exposedOutputs,proto3" json:"exposed_outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetProduceSolutionResultsResponse) Reset()         { *m = GetProduceSolutionResultsResponse{} }
func (m *GetProduceSolutionResultsResponse) String() string { return proto.CompactTextString(m) }
func (*GetProduceSolutionResultsResponse) ProtoMessage()    {}
func (*GetProduceSolutionResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{32}
}
func (m *GetProduceSolutionResultsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProduceSolutionResultsResponse.Unmarshal(m, b)
}
func (m *GetProduceSolutionResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProduceSolutionResultsResponse.Marshal(b, m, deterministic)
}
func (dst *GetProduceSolutionResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProduceSolutionResultsResponse.Merge(dst, src)
}
func (m *GetProduceSolutionResultsResponse) XXX_Size() int {
	return xxx_messageInfo_GetProduceSolutionResultsResponse.Size(m)
}
func (m *GetProduceSolutionResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProduceSolutionResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProduceSolutionResultsResponse proto.InternalMessageInfo

func (m *GetProduceSolutionResultsResponse) GetProgress() *Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *GetProduceSolutionResultsResponse) GetSteps() []*StepProgress {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *GetProduceSolutionResultsResponse) GetExposedOutputs() map[string]*Value {
	if m != nil {
		return m.ExposedOutputs
	}
	return nil
}

// Exports a solution for evaluation purposes based on NIST specifications.
type SolutionExportRequest struct {
	// Found solution to export.
	FittedSolutionId string `protobuf:"bytes,1,opt,name=fitted_solution_id,json=fittedSolutionId,proto3" json:"fitted_solution_id,omitempty"`
	// Solution rank to be used for the exported solution. Lower numbers represent
	// better solutions. Presently NIST requirements are that ranks should be non-negative
	// and that each exported pipeline have a different rank. TA3 should make sure not to repeat ranks.
	// Filenames of exported files are left to be chosen by the TA2 system.
	Rank                 float64  `protobuf:"fixed64,2,opt,name=rank,proto3" json:"rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolutionExportRequest) Reset()         { *m = SolutionExportRequest{} }
func (m *SolutionExportRequest) String() string { return proto.CompactTextString(m) }
func (*SolutionExportRequest) ProtoMessage()    {}
func (*SolutionExportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{33}
}
func (m *SolutionExportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolutionExportRequest.Unmarshal(m, b)
}
func (m *SolutionExportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolutionExportRequest.Marshal(b, m, deterministic)
}
func (dst *SolutionExportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolutionExportRequest.Merge(dst, src)
}
func (m *SolutionExportRequest) XXX_Size() int {
	return xxx_messageInfo_SolutionExportRequest.Size(m)
}
func (m *SolutionExportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SolutionExportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SolutionExportRequest proto.InternalMessageInfo

func (m *SolutionExportRequest) GetFittedSolutionId() string {
	if m != nil {
		return m.FittedSolutionId
	}
	return ""
}

func (m *SolutionExportRequest) GetRank() float64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type SolutionExportResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolutionExportResponse) Reset()         { *m = SolutionExportResponse{} }
func (m *SolutionExportResponse) String() string { return proto.CompactTextString(m) }
func (*SolutionExportResponse) ProtoMessage()    {}
func (*SolutionExportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{34}
}
func (m *SolutionExportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolutionExportResponse.Unmarshal(m, b)
}
func (m *SolutionExportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolutionExportResponse.Marshal(b, m, deterministic)
}
func (dst *SolutionExportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolutionExportResponse.Merge(dst, src)
}
func (m *SolutionExportResponse) XXX_Size() int {
	return xxx_messageInfo_SolutionExportResponse.Size(m)
}
func (m *SolutionExportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SolutionExportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SolutionExportResponse proto.InternalMessageInfo

// List all primitives known to TA2, their IDs, versions, names, and digests. Using this
// information a TA3 should know which primitives may be put into a pipeline template.
// To narrow down potential primitives to use a TA3 can also ask a TA2 to do a solution
// search and then observe which primitives the TA2 is using. If more metadata about primitives
// is needed, then a TA3 can use the results of this call to map primitives to metadata
// (from Python code or primitive annotations) on its own.
type ListPrimitivesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPrimitivesRequest) Reset()         { *m = ListPrimitivesRequest{} }
func (m *ListPrimitivesRequest) String() string { return proto.CompactTextString(m) }
func (*ListPrimitivesRequest) ProtoMessage()    {}
func (*ListPrimitivesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{35}
}
func (m *ListPrimitivesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPrimitivesRequest.Unmarshal(m, b)
}
func (m *ListPrimitivesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPrimitivesRequest.Marshal(b, m, deterministic)
}
func (dst *ListPrimitivesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPrimitivesRequest.Merge(dst, src)
}
func (m *ListPrimitivesRequest) XXX_Size() int {
	return xxx_messageInfo_ListPrimitivesRequest.Size(m)
}
func (m *ListPrimitivesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPrimitivesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPrimitivesRequest proto.InternalMessageInfo

type ListPrimitivesResponse struct {
	Primitives           []*Primitive `protobuf:"bytes,1,rep,name=primitives,proto3" json:"primitives,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListPrimitivesResponse) Reset()         { *m = ListPrimitivesResponse{} }
func (m *ListPrimitivesResponse) String() string { return proto.CompactTextString(m) }
func (*ListPrimitivesResponse) ProtoMessage()    {}
func (*ListPrimitivesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{36}
}
func (m *ListPrimitivesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPrimitivesResponse.Unmarshal(m, b)
}
func (m *ListPrimitivesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPrimitivesResponse.Marshal(b, m, deterministic)
}
func (dst *ListPrimitivesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPrimitivesResponse.Merge(dst, src)
}
func (m *ListPrimitivesResponse) XXX_Size() int {
	return xxx_messageInfo_ListPrimitivesResponse.Size(m)
}
func (m *ListPrimitivesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPrimitivesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPrimitivesResponse proto.InternalMessageInfo

func (m *ListPrimitivesResponse) GetPrimitives() []*Primitive {
	if m != nil {
		return m.Primitives
	}
	return nil
}

// Identify a TA2 and get supported features.
// This call is also suitable for a ping/pong call to check that the gRPC connection to the
// TA2 is ready.
type HelloRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{37}
}
func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (dst *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(dst, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

type HelloResponse struct {
	// Some string identifying the name and version of the TA2 system.
	UserAgent string `protobuf:"bytes,1,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// Shall be set to "protocol_version" above.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// List of value types that a TA3 system can use to communicate values to a TA2 system.
	// The order is important as a TA3 system should try value types in order until one works
	// out, or an error will be returned instead of the value.
	AllowedValueTypes []ValueType `protobuf:"varint,3,rep,packed,name=allowed_value_types,json=allowedValueTypes,proto3,enum=ValueType" json:"allowed_value_types,omitempty"`
	// List of API extensions that a TA2 supports.
	SupportedExtensions  []string `protobuf:"bytes,4,rep,name=supported_extensions,json=supportedExtensions,proto3" json:"supported_extensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_core_c0cb5d706bddf259, []int{38}
}
func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloResponse.Unmarshal(m, b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
}
func (dst *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(dst, src)
}
func (m *HelloResponse) XXX_Size() int {
	return xxx_messageInfo_HelloResponse.Size(m)
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

func (m *HelloResponse) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *HelloResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *HelloResponse) GetAllowedValueTypes() []ValueType {
	if m != nil {
		return m.AllowedValueTypes
	}
	return nil
}

func (m *HelloResponse) GetSupportedExtensions() []string {
	if m != nil {
		return m.SupportedExtensions
	}
	return nil
}

var E_ProtocolVersion = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FileOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         54100,
	Name:          "protocol_version",
	Tag:           "bytes,54100,opt,name=protocol_version,json=protocolVersion",
	Filename:      "core.proto",
}

func init() {
	proto.RegisterType((*ScoringConfiguration)(nil), "ScoringConfiguration")
	proto.RegisterType((*Score)(nil), "Score")
	proto.RegisterType((*Progress)(nil), "Progress")
	proto.RegisterType((*UpdateProblemRequest)(nil), "UpdateProblemRequest")
	proto.RegisterType((*UpdateProblemResponse)(nil), "UpdateProblemResponse")
	proto.RegisterType((*SearchSolutionsRequest)(nil), "SearchSolutionsRequest")
	proto.RegisterType((*SearchSolutionsResponse)(nil), "SearchSolutionsResponse")
	proto.RegisterType((*EndSearchSolutionsRequest)(nil), "EndSearchSolutionsRequest")
	proto.RegisterType((*EndSearchSolutionsResponse)(nil), "EndSearchSolutionsResponse")
	proto.RegisterType((*StopSearchSolutionsRequest)(nil), "StopSearchSolutionsRequest")
	proto.RegisterType((*StopSearchSolutionsResponse)(nil), "StopSearchSolutionsResponse")
	proto.RegisterType((*SolutionSearchScore)(nil), "SolutionSearchScore")
	proto.RegisterType((*GetSearchSolutionsResultsRequest)(nil), "GetSearchSolutionsResultsRequest")
	proto.RegisterType((*GetSearchSolutionsResultsResponse)(nil), "GetSearchSolutionsResultsResponse")
	proto.RegisterType((*DescribeSolutionRequest)(nil), "DescribeSolutionRequest")
	proto.RegisterType((*PrimitiveStepDescription)(nil), "PrimitiveStepDescription")
	proto.RegisterMapType((map[string]*Value)(nil), "PrimitiveStepDescription.HyperparamsEntry")
	proto.RegisterType((*SubpipelineStepDescription)(nil), "SubpipelineStepDescription")
	proto.RegisterType((*StepDescription)(nil), "StepDescription")
	proto.RegisterType((*DescribeSolutionResponse)(nil), "DescribeSolutionResponse")
	proto.RegisterType((*StepProgress)(nil), "StepProgress")
	proto.RegisterType((*SolutionRunUser)(nil), "SolutionRunUser")
	proto.RegisterType((*ScoreSolutionRequest)(nil), "ScoreSolutionRequest")
	proto.RegisterType((*ScoreSolutionResponse)(nil), "ScoreSolutionResponse")
	proto.RegisterType((*GetScoreSolutionResultsRequest)(nil), "GetScoreSolutionResultsRequest")
	proto.RegisterType((*GetScoreSolutionResultsResponse)(nil), "GetScoreSolutionResultsResponse")
	proto.RegisterType((*FitSolutionRequest)(nil), "FitSolutionRequest")
	proto.RegisterType((*FitSolutionResponse)(nil), "FitSolutionResponse")
	proto.RegisterType((*GetFitSolutionResultsRequest)(nil), "GetFitSolutionResultsRequest")
	proto.RegisterType((*GetFitSolutionResultsResponse)(nil), "GetFitSolutionResultsResponse")
	proto.RegisterMapType((map[string]*Value)(nil), "GetFitSolutionResultsResponse.ExposedOutputsEntry")
	proto.RegisterType((*ProduceSolutionRequest)(nil), "ProduceSolutionRequest")
	proto.RegisterType((*ProduceSolutionResponse)(nil), "ProduceSolutionResponse")
	proto.RegisterType((*GetProduceSolutionResultsRequest)(nil), "GetProduceSolutionResultsRequest")
	proto.RegisterType((*GetProduceSolutionResultsResponse)(nil), "GetProduceSolutionResultsResponse")
	proto.RegisterMapType((map[string]*Value)(nil), "GetProduceSolutionResultsResponse.ExposedOutputsEntry")
	proto.RegisterType((*SolutionExportRequest)(nil), "SolutionExportRequest")
	proto.RegisterType((*SolutionExportResponse)(nil), "SolutionExportResponse")
	proto.RegisterType((*ListPrimitivesRequest)(nil), "ListPrimitivesRequest")
	proto.RegisterType((*ListPrimitivesResponse)(nil), "ListPrimitivesResponse")
	proto.RegisterType((*HelloRequest)(nil), "HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "HelloResponse")
	proto.RegisterEnum("EvaluationMethod", EvaluationMethod_name, EvaluationMethod_value)
	proto.RegisterEnum("ProgressState", ProgressState_name, ProgressState_value)
	proto.RegisterExtension(E_ProtocolVersion)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreClient interface {
	SearchSolutions(ctx context.Context, in *SearchSolutionsRequest, opts ...grpc.CallOption) (*SearchSolutionsResponse, error)
	GetSearchSolutionsResults(ctx context.Context, in *GetSearchSolutionsResultsRequest, opts ...grpc.CallOption) (Core_GetSearchSolutionsResultsClient, error)
	EndSearchSolutions(ctx context.Context, in *EndSearchSolutionsRequest, opts ...grpc.CallOption) (*EndSearchSolutionsResponse, error)
	StopSearchSolutions(ctx context.Context, in *StopSearchSolutionsRequest, opts ...grpc.CallOption) (*StopSearchSolutionsResponse, error)
	DescribeSolution(ctx context.Context, in *DescribeSolutionRequest, opts ...grpc.CallOption) (*DescribeSolutionResponse, error)
	ScoreSolution(ctx context.Context, in *ScoreSolutionRequest, opts ...grpc.CallOption) (*ScoreSolutionResponse, error)
	GetScoreSolutionResults(ctx context.Context, in *GetScoreSolutionResultsRequest, opts ...grpc.CallOption) (Core_GetScoreSolutionResultsClient, error)
	FitSolution(ctx context.Context, in *FitSolutionRequest, opts ...grpc.CallOption) (*FitSolutionResponse, error)
	GetFitSolutionResults(ctx context.Context, in *GetFitSolutionResultsRequest, opts ...grpc.CallOption) (Core_GetFitSolutionResultsClient, error)
	ProduceSolution(ctx context.Context, in *ProduceSolutionRequest, opts ...grpc.CallOption) (*ProduceSolutionResponse, error)
	GetProduceSolutionResults(ctx context.Context, in *GetProduceSolutionResultsRequest, opts ...grpc.CallOption) (Core_GetProduceSolutionResultsClient, error)
	SolutionExport(ctx context.Context, in *SolutionExportRequest, opts ...grpc.CallOption) (*SolutionExportResponse, error)
	UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemResponse, error)
	ListPrimitives(ctx context.Context, in *ListPrimitivesRequest, opts ...grpc.CallOption) (*ListPrimitivesResponse, error)
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type coreClient struct {
	cc *grpc.ClientConn
}

func NewCoreClient(cc *grpc.ClientConn) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) SearchSolutions(ctx context.Context, in *SearchSolutionsRequest, opts ...grpc.CallOption) (*SearchSolutionsResponse, error) {
	out := new(SearchSolutionsResponse)
	err := c.cc.Invoke(ctx, "/Core/SearchSolutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetSearchSolutionsResults(ctx context.Context, in *GetSearchSolutionsResultsRequest, opts ...grpc.CallOption) (Core_GetSearchSolutionsResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Core_serviceDesc.Streams[0], "/Core/GetSearchSolutionsResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreGetSearchSolutionsResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_GetSearchSolutionsResultsClient interface {
	Recv() (*GetSearchSolutionsResultsResponse, error)
	grpc.ClientStream
}

type coreGetSearchSolutionsResultsClient struct {
	grpc.ClientStream
}

func (x *coreGetSearchSolutionsResultsClient) Recv() (*GetSearchSolutionsResultsResponse, error) {
	m := new(GetSearchSolutionsResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) EndSearchSolutions(ctx context.Context, in *EndSearchSolutionsRequest, opts ...grpc.CallOption) (*EndSearchSolutionsResponse, error) {
	out := new(EndSearchSolutionsResponse)
	err := c.cc.Invoke(ctx, "/Core/EndSearchSolutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) StopSearchSolutions(ctx context.Context, in *StopSearchSolutionsRequest, opts ...grpc.CallOption) (*StopSearchSolutionsResponse, error) {
	out := new(StopSearchSolutionsResponse)
	err := c.cc.Invoke(ctx, "/Core/StopSearchSolutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DescribeSolution(ctx context.Context, in *DescribeSolutionRequest, opts ...grpc.CallOption) (*DescribeSolutionResponse, error) {
	out := new(DescribeSolutionResponse)
	err := c.cc.Invoke(ctx, "/Core/DescribeSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ScoreSolution(ctx context.Context, in *ScoreSolutionRequest, opts ...grpc.CallOption) (*ScoreSolutionResponse, error) {
	out := new(ScoreSolutionResponse)
	err := c.cc.Invoke(ctx, "/Core/ScoreSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetScoreSolutionResults(ctx context.Context, in *GetScoreSolutionResultsRequest, opts ...grpc.CallOption) (Core_GetScoreSolutionResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Core_serviceDesc.Streams[1], "/Core/GetScoreSolutionResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreGetScoreSolutionResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_GetScoreSolutionResultsClient interface {
	Recv() (*GetScoreSolutionResultsResponse, error)
	grpc.ClientStream
}

type coreGetScoreSolutionResultsClient struct {
	grpc.ClientStream
}

func (x *coreGetScoreSolutionResultsClient) Recv() (*GetScoreSolutionResultsResponse, error) {
	m := new(GetScoreSolutionResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) FitSolution(ctx context.Context, in *FitSolutionRequest, opts ...grpc.CallOption) (*FitSolutionResponse, error) {
	out := new(FitSolutionResponse)
	err := c.cc.Invoke(ctx, "/Core/FitSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetFitSolutionResults(ctx context.Context, in *GetFitSolutionResultsRequest, opts ...grpc.CallOption) (Core_GetFitSolutionResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Core_serviceDesc.Streams[2], "/Core/GetFitSolutionResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreGetFitSolutionResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_GetFitSolutionResultsClient interface {
	Recv() (*GetFitSolutionResultsResponse, error)
	grpc.ClientStream
}

type coreGetFitSolutionResultsClient struct {
	grpc.ClientStream
}

func (x *coreGetFitSolutionResultsClient) Recv() (*GetFitSolutionResultsResponse, error) {
	m := new(GetFitSolutionResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ProduceSolution(ctx context.Context, in *ProduceSolutionRequest, opts ...grpc.CallOption) (*ProduceSolutionResponse, error) {
	out := new(ProduceSolutionResponse)
	err := c.cc.Invoke(ctx, "/Core/ProduceSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetProduceSolutionResults(ctx context.Context, in *GetProduceSolutionResultsRequest, opts ...grpc.CallOption) (Core_GetProduceSolutionResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Core_serviceDesc.Streams[3], "/Core/GetProduceSolutionResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreGetProduceSolutionResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_GetProduceSolutionResultsClient interface {
	Recv() (*GetProduceSolutionResultsResponse, error)
	grpc.ClientStream
}

type coreGetProduceSolutionResultsClient struct {
	grpc.ClientStream
}

func (x *coreGetProduceSolutionResultsClient) Recv() (*GetProduceSolutionResultsResponse, error) {
	m := new(GetProduceSolutionResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) SolutionExport(ctx context.Context, in *SolutionExportRequest, opts ...grpc.CallOption) (*SolutionExportResponse, error) {
	out := new(SolutionExportResponse)
	err := c.cc.Invoke(ctx, "/Core/SolutionExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemResponse, error) {
	out := new(UpdateProblemResponse)
	err := c.cc.Invoke(ctx, "/Core/UpdateProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ListPrimitives(ctx context.Context, in *ListPrimitivesRequest, opts ...grpc.CallOption) (*ListPrimitivesResponse, error) {
	out := new(ListPrimitivesResponse)
	err := c.cc.Invoke(ctx, "/Core/ListPrimitives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/Core/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
type CoreServer interface {
	SearchSolutions(context.Context, *SearchSolutionsRequest) (*SearchSolutionsResponse, error)
	GetSearchSolutionsResults(*GetSearchSolutionsResultsRequest, Core_GetSearchSolutionsResultsServer) error
	EndSearchSolutions(context.Context, *EndSearchSolutionsRequest) (*EndSearchSolutionsResponse, error)
	StopSearchSolutions(context.Context, *StopSearchSolutionsRequest) (*StopSearchSolutionsResponse, error)
	DescribeSolution(context.Context, *DescribeSolutionRequest) (*DescribeSolutionResponse, error)
	ScoreSolution(context.Context, *ScoreSolutionRequest) (*ScoreSolutionResponse, error)
	GetScoreSolutionResults(*GetScoreSolutionResultsRequest, Core_GetScoreSolutionResultsServer) error
	FitSolution(context.Context, *FitSolutionRequest) (*FitSolutionResponse, error)
	GetFitSolutionResults(*GetFitSolutionResultsRequest, Core_GetFitSolutionResultsServer) error
	ProduceSolution(context.Context, *ProduceSolutionRequest) (*ProduceSolutionResponse, error)
	GetProduceSolutionResults(*GetProduceSolutionResultsRequest, Core_GetProduceSolutionResultsServer) error
	SolutionExport(context.Context, *SolutionExportRequest) (*SolutionExportResponse, error)
	UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemResponse, error)
	ListPrimitives(context.Context, *ListPrimitivesRequest) (*ListPrimitivesResponse, error)
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
}

func RegisterCoreServer(s *grpc.Server, srv CoreServer) {
	s.RegisterService(&_Core_serviceDesc, srv)
}

func _Core_SearchSolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSolutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SearchSolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/SearchSolutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SearchSolutions(ctx, req.(*SearchSolutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetSearchSolutionsResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSearchSolutionsResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).GetSearchSolutionsResults(m, &coreGetSearchSolutionsResultsServer{stream})
}

type Core_GetSearchSolutionsResultsServer interface {
	Send(*GetSearchSolutionsResultsResponse) error
	grpc.ServerStream
}

type coreGetSearchSolutionsResultsServer struct {
	grpc.ServerStream
}

func (x *coreGetSearchSolutionsResultsServer) Send(m *GetSearchSolutionsResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_EndSearchSolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndSearchSolutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EndSearchSolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/EndSearchSolutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EndSearchSolutions(ctx, req.(*EndSearchSolutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_StopSearchSolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSearchSolutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).StopSearchSolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/StopSearchSolutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).StopSearchSolutions(ctx, req.(*StopSearchSolutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DescribeSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DescribeSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/DescribeSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DescribeSolution(ctx, req.(*DescribeSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ScoreSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ScoreSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/ScoreSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ScoreSolution(ctx, req.(*ScoreSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetScoreSolutionResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetScoreSolutionResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).GetScoreSolutionResults(m, &coreGetScoreSolutionResultsServer{stream})
}

type Core_GetScoreSolutionResultsServer interface {
	Send(*GetScoreSolutionResultsResponse) error
	grpc.ServerStream
}

type coreGetScoreSolutionResultsServer struct {
	grpc.ServerStream
}

func (x *coreGetScoreSolutionResultsServer) Send(m *GetScoreSolutionResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_FitSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FitSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FitSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/FitSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FitSolution(ctx, req.(*FitSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetFitSolutionResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFitSolutionResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).GetFitSolutionResults(m, &coreGetFitSolutionResultsServer{stream})
}

type Core_GetFitSolutionResultsServer interface {
	Send(*GetFitSolutionResultsResponse) error
	grpc.ServerStream
}

type coreGetFitSolutionResultsServer struct {
	grpc.ServerStream
}

func (x *coreGetFitSolutionResultsServer) Send(m *GetFitSolutionResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_ProduceSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ProduceSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/ProduceSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ProduceSolution(ctx, req.(*ProduceSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetProduceSolutionResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProduceSolutionResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).GetProduceSolutionResults(m, &coreGetProduceSolutionResultsServer{stream})
}

type Core_GetProduceSolutionResultsServer interface {
	Send(*GetProduceSolutionResultsResponse) error
	grpc.ServerStream
}

type coreGetProduceSolutionResultsServer struct {
	grpc.ServerStream
}

func (x *coreGetProduceSolutionResultsServer) Send(m *GetProduceSolutionResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_SolutionExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolutionExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SolutionExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/SolutionExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SolutionExport(ctx, req.(*SolutionExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/UpdateProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateProblem(ctx, req.(*UpdateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ListPrimitives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrimitivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ListPrimitives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/ListPrimitives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ListPrimitives(ctx, req.(*ListPrimitivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Core_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchSolutions",
			Handler:    _Core_SearchSolutions_Handler,
		},
		{
			MethodName: "EndSearchSolutions",
			Handler:    _Core_EndSearchSolutions_Handler,
		},
		{
			MethodName: "StopSearchSolutions",
			Handler:    _Core_StopSearchSolutions_Handler,
		},
		{
			MethodName: "DescribeSolution",
			Handler:    _Core_DescribeSolution_Handler,
		},
		{
			MethodName: "ScoreSolution",
			Handler:    _Core_ScoreSolution_Handler,
		},
		{
			MethodName: "FitSolution",
			Handler:    _Core_FitSolution_Handler,
		},
		{
			MethodName: "ProduceSolution",
			Handler:    _Core_ProduceSolution_Handler,
		},
		{
			MethodName: "SolutionExport",
			Handler:    _Core_SolutionExport_Handler,
		},
		{
			MethodName: "UpdateProblem",
			Handler:    _Core_UpdateProblem_Handler,
		},
		{
			MethodName: "ListPrimitives",
			Handler:    _Core_ListPrimitives_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _Core_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSearchSolutionsResults",
			Handler:       _Core_GetSearchSolutionsResults_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetScoreSolutionResults",
			Handler:       _Core_GetScoreSolutionResults_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFitSolutionResults",
			Handler:       _Core_GetFitSolutionResults_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProduceSolutionResults",
			Handler:       _Core_GetProduceSolutionResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core.proto",
}

func init() { proto.RegisterFile("core.proto", fileDescriptor_core_c0cb5d706bddf259) }

var fileDescriptor_core_c0cb5d706bddf259 = []byte{
	// 1994 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x73, 0x1b, 0x49,
	0x15, 0xd7, 0xc8, 0x96, 0x22, 0x3d, 0xad, 0x64, 0x6d, 0xdb, 0x96, 0x94, 0x71, 0x12, 0x7b, 0x07,
	0x42, 0x99, 0x54, 0xe8, 0x4d, 0x04, 0x95, 0x4d, 0x42, 0x51, 0x8b, 0x63, 0xc9, 0xb6, 0x76, 0x1d,
	0x49, 0xd5, 0x92, 0x43, 0x91, 0x3d, 0x0c, 0xb2, 0xa6, 0x65, 0x4f, 0x65, 0x3c, 0x33, 0xcc, 0xb4,
	0xc2, 0xfa, 0x08, 0xa7, 0xbd, 0x71, 0xe3, 0xc2, 0x8d, 0x03, 0xc5, 0x91, 0x0b, 0xc5, 0x99, 0x23,
	0x77, 0x8e, 0x14, 0xff, 0x02, 0xff, 0x00, 0x07, 0xaa, 0x3f, 0x66, 0xac, 0x8f, 0x91, 0x6c, 0xa7,
	0x96, 0x03, 0xb7, 0xe9, 0xf7, 0x35, 0xaf, 0xdf, 0xfb, 0xcd, 0xfb, 0x18, 0x80, 0xa1, 0x17, 0x50,
	0xec, 0x07, 0x1e, 0xf3, 0xf4, 0x9d, 0x33, 0xcf, 0x3b, 0x73, 0xe8, 0xa7, 0xe2, 0x74, 0x3a, 0x1e,
	0x7d, 0x6a, 0xd1, 0x70, 0x18, 0xd8, 0x3e, 0xf3, 0x02, 0x25, 0xb1, 0x3d, 0x2b, 0xc1, 0xec, 0x0b,
	0x1a, 0xb2, 0xc1, 0x85, 0xaf, 0x04, 0x4a, 0xbe, 0xed, 0x53, 0xc7, 0x76, 0x23, 0x93, 0x6b, 0x7e,
	0x60, 0x5f, 0xd8, 0xcc, 0x7e, 0x1f, 0x11, 0x8a, 0x7e, 0xe0, 0x9d, 0x3a, 0xf4, 0x42, 0x1d, 0x0b,
	0xef, 0x07, 0xce, 0x58, 0xf1, 0x8c, 0x7f, 0x6a, 0xb0, 0xd1, 0x1b, 0x7a, 0x81, 0xed, 0x9e, 0xed,
	0x7b, 0xee, 0xc8, 0x3e, 0x1b, 0x07, 0x03, 0x66, 0x7b, 0x2e, 0xfa, 0x3e, 0x64, 0x2f, 0x28, 0x3b,
	0xf7, 0xac, 0x9a, 0xb6, 0xa3, 0xed, 0x96, 0xea, 0x1f, 0xe3, 0x26, 0xd7, 0x13, 0xcc, 0xd7, 0x82,
	0x41, 0x94, 0x00, 0xda, 0x80, 0xcc, 0xc8, 0x73, 0xac, 0xb0, 0x96, 0xde, 0xd1, 0x76, 0x33, 0x44,
	0x1e, 0xd0, 0x2e, 0x94, 0x59, 0x30, 0xb0, 0x5d, 0x93, 0xd1, 0x90, 0x99, 0xc2, 0x6a, 0x6d, 0x65,
	0x47, 0xdb, 0xd5, 0x48, 0x49, 0xd0, 0xfb, 0x34, 0x64, 0x84, 0x53, 0x51, 0x0d, 0xee, 0x84, 0xe7,
	0xe3, 0xd1, 0xc8, 0xa1, 0xb5, 0xd5, 0x1d, 0x6d, 0x37, 0x47, 0xa2, 0x23, 0xda, 0x86, 0x42, 0x30,
	0x70, 0x2d, 0xef, 0xc2, 0x0c, 0x29, 0xb5, 0x6a, 0x19, 0x61, 0x1f, 0x24, 0xa9, 0x47, 0xa9, 0x85,
	0x1e, 0x00, 0x84, 0x8c, 0xdb, 0x1e, 0xd9, 0xd4, 0xaa, 0x65, 0x85, 0xf6, 0x04, 0xc5, 0xf8, 0x9d,
	0x06, 0x19, 0x7e, 0x3d, 0x8a, 0x9e, 0x8a, 0xfb, 0x04, 0xf6, 0x50, 0xdc, 0xa7, 0x50, 0xbf, 0x8b,
	0xbb, 0x32, 0x2a, 0x5d, 0x1a, 0x8c, 0xbc, 0xe0, 0x62, 0xe0, 0x0e, 0xe9, 0x6b, 0x21, 0x40, 0x94,
	0x20, 0x42, 0xb0, 0xca, 0xaf, 0xa2, 0xae, 0x25, 0x9e, 0xd1, 0x2e, 0xdc, 0x61, 0x83, 0xe0, 0x8c,
	0xb2, 0xb0, 0xb6, 0xb2, 0xb3, 0xb2, 0x5b, 0xa8, 0x97, 0x22, 0x3b, 0x7d, 0x41, 0x26, 0x11, 0x1b,
	0xdd, 0x83, 0x8c, 0x08, 0xb4, 0xb8, 0x53, 0xa1, 0x9e, 0xc5, 0x6f, 0xf8, 0x89, 0x48, 0xa2, 0xf1,
	0x27, 0x0d, 0x72, 0xdd, 0xc0, 0x3b, 0x0b, 0x68, 0x18, 0xa2, 0xef, 0x42, 0x26, 0x64, 0x03, 0x46,
	0x55, 0xa8, 0x85, 0x49, 0xc1, 0xe9, 0x71, 0x2a, 0x91, 0x4c, 0x54, 0x81, 0x2c, 0x7f, 0x18, 0xcb,
	0x38, 0xe7, 0x89, 0x3a, 0xa1, 0x27, 0x42, 0x3b, 0x60, 0x22, 0xba, 0x85, 0xba, 0x8e, 0x25, 0x60,
	0x70, 0x04, 0x18, 0xdc, 0x8f, 0x00, 0x43, 0xa4, 0x20, 0x7a, 0x0c, 0x2b, 0xd4, 0xb5, 0x94, 0x63,
	0xcb, 0xe4, 0xb9, 0x98, 0x71, 0x0a, 0x1b, 0x27, 0xbe, 0x35, 0x60, 0x54, 0x5d, 0x94, 0xd0, 0x5f,
	0x8e, 0x69, 0xc8, 0xd0, 0x16, 0xe4, 0x43, 0x3a, 0x08, 0x86, 0xe7, 0xa6, 0x2d, 0x41, 0x92, 0x27,
	0x39, 0x49, 0x68, 0x59, 0xe8, 0x07, 0x70, 0x47, 0xa1, 0x4e, 0x78, 0x5b, 0xa8, 0xaf, 0x47, 0x71,
	0x6a, 0x28, 0x80, 0xdb, 0x9e, 0x4b, 0x22, 0x19, 0xa3, 0x0a, 0x9b, 0x33, 0xef, 0x08, 0x7d, 0xcf,
	0x0d, 0xa9, 0xf1, 0xf7, 0x34, 0x54, 0x7a, 0xc2, 0x68, 0xcf, 0x73, 0xc6, 0x5c, 0x29, 0x8c, 0xde,
	0x7f, 0x1f, 0x60, 0x1c, 0xd2, 0xc0, 0x1c, 0x9c, 0x51, 0x97, 0x29, 0x07, 0xf2, 0x9c, 0xb2, 0xc7,
	0x09, 0x1c, 0x55, 0xef, 0x69, 0x10, 0xda, 0x9e, 0xab, 0xe2, 0x15, 0x1d, 0xb9, 0x22, 0xff, 0x86,
	0xcc, 0x53, 0x6f, 0xec, 0x5a, 0x0a, 0x93, 0x79, 0x4e, 0x79, 0xc5, 0x09, 0x48, 0x87, 0x9c, 0x1f,
	0xd8, 0x5e, 0x60, 0xb3, 0x4b, 0x11, 0x22, 0x8d, 0xc4, 0x67, 0xf4, 0x12, 0xd6, 0x07, 0x8e, 0xe3,
	0xfd, 0x8a, 0x5a, 0xa6, 0xc8, 0xa3, 0xc9, 0x2e, 0x7d, 0x1a, 0xd6, 0x32, 0x3b, 0x2b, 0xbb, 0xa5,
	0x3a, 0xc8, 0x14, 0xf7, 0x2f, 0x7d, 0x4a, 0x3e, 0x56, 0x62, 0x31, 0x25, 0x9c, 0x0c, 0x49, 0xf6,
	0xfa, 0x90, 0xa0, 0x27, 0x90, 0x63, 0xf4, 0xc2, 0x77, 0x38, 0x2e, 0xee, 0x08, 0xf9, 0x0d, 0xdc,
	0x55, 0x5f, 0xfa, 0xa4, 0x42, 0x2c, 0x85, 0x1e, 0x40, 0xd6, 0x76, 0xfd, 0x31, 0x0b, 0x6b, 0x39,
	0x01, 0xcd, 0x08, 0x72, 0x8a, 0x6a, 0x3c, 0x83, 0xea, 0x5c, 0x28, 0x65, 0x98, 0x97, 0xe6, 0xd2,
	0x78, 0x0e, 0x77, 0x9b, 0xae, 0xb5, 0x20, 0x0b, 0x4b, 0x35, 0xef, 0x81, 0x9e, 0xa4, 0xa9, 0x72,
	0xfb, 0x02, 0xf4, 0x1e, 0xf3, 0xfc, 0x0f, 0x31, 0x7c, 0x1f, 0xb6, 0x12, 0x55, 0x95, 0xe5, 0x5f,
	0x6b, 0xb0, 0x1e, 0x51, 0x95, 0x8c, 0x28, 0x02, 0x5f, 0xc0, 0x66, 0x28, 0x8b, 0x9d, 0x39, 0x9c,
	0xac, 0x76, 0xaa, 0x26, 0x6c, 0xe2, 0xa4, 0x52, 0x48, 0x36, 0xc2, 0xa4, 0x02, 0xf9, 0x00, 0xb2,
	0x9c, 0x4e, 0xf9, 0xe7, 0x28, 0xa3, 0x2d, 0xde, 0x41, 0x14, 0xd5, 0xf8, 0x1c, 0x76, 0x0e, 0x29,
	0x9b, 0xf7, 0x70, 0xec, 0xb0, 0x9b, 0xdd, 0xf1, 0x3f, 0x1a, 0x7c, 0xb2, 0xc4, 0x82, 0xca, 0xdc,
	0x43, 0x8e, 0x56, 0x59, 0x2d, 0xd4, 0x2d, 0xf2, 0x71, 0xf9, 0x20, 0x31, 0x8b, 0x63, 0xde, 0xf2,
	0x5c, 0x6a, 0x32, 0x7b, 0xf8, 0x4e, 0x16, 0x10, 0x8d, 0xe4, 0x39, 0xa5, 0xcf, 0x09, 0xdc, 0x91,
	0x81, 0xe3, 0x28, 0xae, 0xfc, 0x22, 0x72, 0x03, 0xc7, 0x91, 0xcc, 0x6d, 0x28, 0x84, 0xea, 0xf5,
	0xdc, 0xcf, 0x55, 0xe1, 0x27, 0x44, 0xa4, 0x96, 0x85, 0x1e, 0x42, 0xc9, 0x76, 0x19, 0x0d, 0xdc,
	0x81, 0x63, 0x8a, 0xdb, 0x8b, 0x4a, 0xad, 0x91, 0x62, 0x44, 0x95, 0xd1, 0x7f, 0x1c, 0x47, 0x2c,
	0x2b, 0x22, 0xb6, 0x81, 0x13, 0x72, 0x14, 0xc7, 0xef, 0x25, 0x54, 0x25, 0xcc, 0x4f, 0x69, 0x24,
	0x16, 0x85, 0x6d, 0xc6, 0x21, 0x6d, 0xd6, 0x21, 0xe3, 0xcf, 0x1a, 0xd4, 0xba, 0x51, 0x17, 0xec,
	0x31, 0xea, 0x4f, 0x7c, 0x30, 0xe8, 0x18, 0x0a, 0xe7, 0x97, 0x3e, 0x0d, 0xfc, 0x41, 0x30, 0xb8,
	0xe0, 0x41, 0xe3, 0xbe, 0x3c, 0xc2, 0x8b, 0xe4, 0xf1, 0xd1, 0x95, 0x70, 0xd3, 0x65, 0xc1, 0x25,
	0x99, 0x54, 0xd7, 0x0f, 0xa0, 0x3c, 0x2b, 0x80, 0xca, 0xb0, 0xf2, 0x8e, 0x5e, 0x2a, 0xbf, 0xf8,
	0xe3, 0x55, 0x33, 0x48, 0x27, 0x34, 0x83, 0x97, 0xe9, 0xe7, 0x9a, 0xd1, 0x00, 0xbd, 0x37, 0x3e,
	0x8d, 0x5a, 0xf9, 0xac, 0xcf, 0xdf, 0xe3, 0x35, 0x9e, 0xfa, 0x91, 0xb7, 0x65, 0x3c, 0x23, 0x40,
	0x24, 0xdb, 0xf8, 0xad, 0x06, 0x6b, 0xb3, 0xba, 0x2f, 0x20, 0x1f, 0x4f, 0x04, 0x13, 0xcd, 0x2f,
	0xf9, 0xb6, 0x47, 0x29, 0x72, 0x25, 0x8d, 0x5e, 0x40, 0x2e, 0xf2, 0x48, 0x79, 0xbe, 0x85, 0x17,
	0x7b, 0x79, 0x94, 0x22, 0xb1, 0xf8, 0xab, 0x2c, 0xac, 0x72, 0x97, 0x0c, 0x06, 0xb5, 0xf9, 0x34,
	0x2a, 0xec, 0x3e, 0x99, 0x30, 0xaf, 0x2d, 0x2b, 0x71, 0x91, 0xd4, 0x55, 0x1c, 0xd2, 0xcb, 0xe3,
	0xf0, 0x16, 0x3e, 0xe2, 0x9c, 0xb8, 0xc3, 0xde, 0xf0, 0x2b, 0xf9, 0xce, 0xb4, 0xf9, 0x22, 0x9e,
	0x34, 0x12, 0xd9, 0xee, 0xc1, 0x5a, 0x7c, 0x93, 0xb1, 0x7b, 0x12, 0xd2, 0x00, 0x95, 0x20, 0x1d,
	0xe3, 0x30, 0x6d, 0x5b, 0xbc, 0xf7, 0x0c, 0xcf, 0x3d, 0x2f, 0xa4, 0xb2, 0xf7, 0xe4, 0x48, 0x74,
	0xe4, 0x4d, 0x3c, 0xa0, 0x83, 0xd0, 0x73, 0xc5, 0x57, 0x96, 0x27, 0xea, 0x64, 0x7c, 0x93, 0x96,
	0x73, 0xd8, 0xad, 0xb1, 0x3e, 0x51, 0xf5, 0xd3, 0x49, 0x55, 0x1f, 0x7d, 0x01, 0xeb, 0xfe, 0xd5,
	0x88, 0x63, 0xca, 0xd9, 0x26, 0x9a, 0x5e, 0x96, 0x4c, 0x41, 0xc8, 0x9f, 0x25, 0x85, 0x3c, 0xfc,
	0xbc, 0xc1, 0x86, 0xb5, 0xd5, 0x28, 0xfc, 0xd3, 0x81, 0x20, 0x92, 0x8d, 0x7e, 0x0c, 0xc5, 0xe9,
	0xfa, 0x9a, 0x59, 0x56, 0x5f, 0xa7, 0x65, 0x8d, 0x67, 0xb0, 0x39, 0x13, 0x09, 0x05, 0x97, 0xfb,
	0x00, 0x81, 0x8c, 0xca, 0x55, 0x24, 0xf2, 0x8a, 0xd2, 0xb2, 0x8c, 0xcf, 0xe1, 0x01, 0x2f, 0x97,
	0x33, 0xaa, 0x93, 0xe5, 0xf6, 0x1a, 0x03, 0xe7, 0xb0, 0xbd, 0xd0, 0xc0, 0xed, 0xaa, 0xed, 0x75,
	0xbd, 0xe1, 0x5f, 0x1a, 0xa0, 0x03, 0x9b, 0x7d, 0xeb, 0xb9, 0x7e, 0x08, 0x25, 0xfa, 0xb5, 0xef,
	0x85, 0xd4, 0xf4, 0xc6, 0x4c, 0xc8, 0xf1, 0x34, 0xe7, 0x49, 0x51, 0x52, 0x3b, 0x92, 0x88, 0x9e,
	0x03, 0x52, 0x62, 0x93, 0x43, 0xcc, 0xea, 0xdc, 0x10, 0x53, 0x96, 0x52, 0x13, 0x33, 0x4c, 0x0c,
	0x80, 0xcc, 0x52, 0x00, 0x18, 0x3f, 0x82, 0xf5, 0xa9, 0xfb, 0xdd, 0x2c, 0x83, 0x3f, 0x81, 0x7b,
	0x87, 0x94, 0x4d, 0x2b, 0xde, 0x22, 0x7f, 0x7f, 0x4b, 0xc3, 0xfd, 0x05, 0xfa, 0xb7, 0x4b, 0xdf,
	0x4d, 0xca, 0x00, 0xfa, 0x0a, 0xd6, 0x64, 0x78, 0xac, 0xa9, 0x60, 0x17, 0xea, 0x75, 0xbc, 0xd4,
	0x09, 0xdc, 0x94, 0x5a, 0x2a, 0x19, 0xb2, 0xa5, 0xa8, 0xb4, 0x45, 0x44, 0xf4, 0x18, 0xd0, 0xc8,
	0x66, 0x8c, 0x5a, 0xe6, 0x7c, 0xe7, 0x2d, 0x4b, 0x4e, 0x2f, 0x86, 0x85, 0xde, 0x82, 0xf5, 0x04,
	0xa3, 0x1f, 0xd4, 0x86, 0xfe, 0xad, 0x41, 0xa5, 0x1b, 0x78, 0xd6, 0x78, 0x38, 0x57, 0x89, 0x92,
	0x7d, 0xd2, 0x92, 0x7d, 0xfa, 0xff, 0x81, 0xea, 0x73, 0xa8, 0xce, 0x5d, 0xf8, 0x66, 0x70, 0xdd,
	0x13, 0x13, 0xde, 0xbc, 0xf2, 0x2d, 0x20, 0xfb, 0xfb, 0xb4, 0x98, 0xf1, 0x16, 0xd9, 0xf8, 0x1f,
	0xc0, 0xd6, 0x5c, 0x04, 0xdb, 0x67, 0xf8, 0x5a, 0x47, 0x6e, 0x02, 0xdd, 0x6f, 0x13, 0x8c, 0x3f,
	0x87, 0xcd, 0xc8, 0x13, 0x6e, 0x32, 0x60, 0x1f, 0x06, 0x45, 0x04, 0xab, 0xc1, 0xc0, 0x7d, 0xa7,
	0xa6, 0x5e, 0xf1, 0x6c, 0xd4, 0xa0, 0x32, 0x6b, 0x5a, 0xed, 0x0e, 0x55, 0xd8, 0x3c, 0xb6, 0x43,
	0x16, 0x0f, 0x48, 0x51, 0x2a, 0x8d, 0x06, 0x54, 0x66, 0x19, 0x2a, 0x3f, 0x8f, 0x00, 0xe2, 0x99,
	0x29, 0x1a, 0xd1, 0xe0, 0x6a, 0xc4, 0x22, 0x13, 0x5c, 0xa3, 0x04, 0x1f, 0x1d, 0x51, 0xc7, 0xf1,
	0x22, 0xab, 0x7f, 0xd5, 0xa0, 0xa8, 0x08, 0x57, 0xa8, 0xfb, 0xb0, 0xbd, 0x76, 0xc1, 0x72, 0xba,
	0x72, 0x93, 0xe5, 0xf4, 0x29, 0x6c, 0x84, 0x63, 0x9f, 0x07, 0x82, 0x5a, 0x26, 0xfd, 0x9a, 0x51,
	0x97, 0x9b, 0x94, 0x5f, 0x5a, 0x9e, 0xac, 0xc7, 0xbc, 0x66, 0xcc, 0x7a, 0xf4, 0x1b, 0x0d, 0xca,
	0xb3, 0xff, 0x84, 0xd0, 0x36, 0x6c, 0x35, 0xdf, 0xec, 0x1d, 0x9f, 0xec, 0xf5, 0x5b, 0x9d, 0xb6,
	0xf9, 0xba, 0xd9, 0x3f, 0xea, 0x34, 0xcc, 0x93, 0x76, 0xa3, 0x79, 0xd0, 0x6a, 0x37, 0x1b, 0xe5,
	0x14, 0x2a, 0xc0, 0x9d, 0xa3, 0xce, 0x71, 0xa3, 0x73, 0xd2, 0x2f, 0x6b, 0x08, 0x20, 0xfb, 0xa5,
	0x79, 0xd0, 0x39, 0x6e, 0x94, 0xd3, 0xe8, 0x63, 0x28, 0x1e, 0x37, 0xf7, 0xde, 0x34, 0xcd, 0x4e,
	0xbb, 0x69, 0x72, 0xb6, 0x85, 0x4a, 0x00, 0x5d, 0xd2, 0x6c, 0xb4, 0xf6, 0xb9, 0xb1, 0x32, 0xe5,
	0x22, 0x7d, 0xb2, 0xd7, 0x6a, 0xb7, 0xda, 0x87, 0x66, 0x63, 0xaf, 0xbf, 0x57, 0x1e, 0x3d, 0xfa,
	0x0a, 0x8a, 0x53, 0x3f, 0x4b, 0xd0, 0x06, 0x94, 0xbb, 0xa4, 0x73, 0x48, 0x9a, 0xbd, 0x9e, 0x79,
	0xd2, 0xfe, 0xb2, 0xdd, 0xf9, 0x59, 0x5b, 0xbe, 0xb5, 0xdb, 0x6c, 0x37, 0x5a, 0xed, 0xc3, 0xb2,
	0xc6, 0x0f, 0xe4, 0xa4, 0xcd, 0xad, 0x94, 0xd3, 0xa8, 0x08, 0xf9, 0xfd, 0xce, 0xeb, 0xee, 0x71,
	0xb3, 0xdf, 0x6c, 0x94, 0x57, 0x38, 0xaf, 0x49, 0x48, 0x87, 0x34, 0x1b, 0xe5, 0xd5, 0xfa, 0x37,
	0x79, 0x58, 0xdd, 0xe7, 0x9b, 0xcb, 0x01, 0xac, 0xcd, 0xac, 0x61, 0xa8, 0x8a, 0x93, 0xf7, 0x56,
	0xbd, 0x86, 0x17, 0x6d, 0xa5, 0x29, 0x34, 0x82, 0xbb, 0x0b, 0x37, 0x3a, 0xf4, 0x09, 0xbe, 0x6e,
	0x5f, 0xd4, 0x0d, 0x7c, 0xed, 0x42, 0x68, 0xa4, 0x9e, 0x68, 0xa8, 0x03, 0x68, 0x7e, 0xef, 0x46,
	0x3a, 0x5e, 0xb8, 0xc6, 0xeb, 0x5b, 0x78, 0xc9, 0xa2, 0x9e, 0x42, 0x04, 0xd6, 0x13, 0xf6, 0x6d,
	0xb4, 0x85, 0x17, 0x2f, 0xf0, 0xfa, 0x3d, 0xbc, 0x6c, 0x45, 0x4f, 0xa1, 0x16, 0x94, 0x67, 0x37,
	0x03, 0x54, 0xc3, 0x0b, 0x76, 0x3e, 0xfd, 0x2e, 0x5e, 0xb4, 0x46, 0x18, 0x29, 0xf4, 0x53, 0x28,
	0x4e, 0x8d, 0x6d, 0x48, 0x4e, 0x9a, 0x73, 0x46, 0x2a, 0x38, 0x71, 0xb2, 0x34, 0x52, 0xe8, 0x17,
	0x50, 0x5d, 0x30, 0xfb, 0xa1, 0x6d, 0xbc, 0x7c, 0xac, 0xd4, 0x77, 0xf0, 0x35, 0x63, 0xa3, 0xc8,
	0xc9, 0x4b, 0x28, 0x4c, 0x0c, 0x05, 0x68, 0x1d, 0xcf, 0x0f, 0x80, 0xfa, 0x06, 0x4e, 0x98, 0x9a,
	0x8c, 0x14, 0x7a, 0x0b, 0x9b, 0x89, 0x33, 0x05, 0xba, 0x8f, 0x97, 0x0d, 0x4c, 0xfa, 0x83, 0xe5,
	0xa3, 0x88, 0xf0, 0xeb, 0x00, 0xd6, 0x66, 0xaa, 0x3e, 0xaa, 0xe2, 0xe4, 0x11, 0x40, 0xaf, 0xe1,
	0x05, 0xad, 0x32, 0xc6, 0x76, 0x72, 0x03, 0x91, 0xd8, 0x5e, 0xda, 0x29, 0x25, 0xb6, 0x97, 0xf7,
	0x1f, 0xe1, 0xef, 0x3e, 0x94, 0xa6, 0x2b, 0x37, 0xaa, 0xe0, 0xc4, 0x2e, 0xa1, 0x57, 0xf1, 0x82,
	0x12, 0x2f, 0x00, 0x33, 0xf5, 0xbf, 0x11, 0x6d, 0xe2, 0xa4, 0x7f, 0x9c, 0x7a, 0x05, 0x27, 0xff,
	0x96, 0x4c, 0x71, 0x37, 0xa6, 0xbb, 0x01, 0xaa, 0xe0, 0xc4, 0xbe, 0xa1, 0x57, 0x71, 0x72, 0xdb,
	0x30, 0x52, 0x68, 0x17, 0x32, 0xa2, 0xf6, 0xa3, 0x22, 0x9e, 0x6c, 0x0a, 0x7a, 0x09, 0x4f, 0xb5,
	0x04, 0x23, 0xf5, 0xb2, 0x05, 0x65, 0xf1, 0x7f, 0x76, 0xe8, 0x39, 0x66, 0x54, 0xef, 0xef, 0xcd,
	0xfd, 0xb9, 0x3d, 0xb0, 0x1d, 0xda, 0x11, 0x8b, 0x70, 0x58, 0xfb, 0xc7, 0x1f, 0xe5, 0x86, 0xb9,
	0x16, 0xe9, 0xbd, 0x91, 0x6a, 0xaf, 0x2a, 0x7f, 0xf8, 0x8b, 0x9e, 0xab, 0x3f, 0x79, 0xfa, 0x1c,
	0x7f, 0x86, 0x3f, 0x7b, 0x1b, 0xef, 0xd6, 0xa7, 0x59, 0x21, 0xf8, 0xc3, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0xb8, 0xef, 0x0c, 0x1c, 0x9f, 0x18, 0x00, 0x00,
}
