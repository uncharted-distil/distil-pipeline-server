// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core.proto

/*
Package pipeline is a generated protocol buffer package.

It is generated from these files:
	core.proto
	data_ext.proto
	dataflow_ext.proto

It has these top-level messages:
	SessionContext
	Status
	Response
	SessionRequest
	SessionResponse
	Feature
	PipelineCreateRequest
	Score
	Pipeline
	PipelineCreateResult
	PipelineExecuteRequest
	PipelineExecuteResult
	PipelineListRequest
	PipelineDeleteRequest
	PipelineListResult
	PipelineCreateResultsRequest
	PipelineExecuteResultsRequest
	PipelineExportRequest
	UpdateProblemSchemaRequest
	FeatureData
	AddFeaturesRequest
	RemoveFeaturesRequest
	Sample
	SampleData
	AddSamplesRequest
	RemoveSamplesRequest
	ReplacementData
	ReplaceDataRequest
	MaterializeRequest
	TrainValidationSplitRequest
	RevertRequest
	PipelineReference
	DataflowDescription
	ModuleOutput
	ModuleResult
*/
package pipeline

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_UNKNOWN             StatusCode = 0
	StatusCode_OK                  StatusCode = 1
	StatusCode_CANCELLED           StatusCode = 2
	StatusCode_SESSION_UNKNOWN     StatusCode = 3
	StatusCode_SESSION_ENDED       StatusCode = 4
	StatusCode_SESSION_EXPIRED     StatusCode = 5
	StatusCode_INVALID_ARGUMENT    StatusCode = 6
	StatusCode_RESOURCE_EXHAUSTED  StatusCode = 7
	StatusCode_UNAVAILABLE         StatusCode = 8
	StatusCode_FAILED_PRECONDITION StatusCode = 9
	StatusCode_OUT_OF_RANGE        StatusCode = 10
	StatusCode_UNIMPLEMENTED       StatusCode = 11
	StatusCode_INTERNAL            StatusCode = 12
	StatusCode_ABORTED             StatusCode = 13
)

var StatusCode_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "OK",
	2:  "CANCELLED",
	3:  "SESSION_UNKNOWN",
	4:  "SESSION_ENDED",
	5:  "SESSION_EXPIRED",
	6:  "INVALID_ARGUMENT",
	7:  "RESOURCE_EXHAUSTED",
	8:  "UNAVAILABLE",
	9:  "FAILED_PRECONDITION",
	10: "OUT_OF_RANGE",
	11: "UNIMPLEMENTED",
	12: "INTERNAL",
	13: "ABORTED",
}
var StatusCode_value = map[string]int32{
	"UNKNOWN":             0,
	"OK":                  1,
	"CANCELLED":           2,
	"SESSION_UNKNOWN":     3,
	"SESSION_ENDED":       4,
	"SESSION_EXPIRED":     5,
	"INVALID_ARGUMENT":    6,
	"RESOURCE_EXHAUSTED":  7,
	"UNAVAILABLE":         8,
	"FAILED_PRECONDITION": 9,
	"OUT_OF_RANGE":        10,
	"UNIMPLEMENTED":       11,
	"INTERNAL":            12,
	"ABORTED":             13,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Progress int32

const (
	Progress_SUBMITTED Progress = 0
	Progress_RUNNING   Progress = 1
	Progress_UPDATED   Progress = 2
	Progress_COMPLETED Progress = 3
)

var Progress_name = map[int32]string{
	0: "SUBMITTED",
	1: "RUNNING",
	2: "UPDATED",
	3: "COMPLETED",
}
var Progress_value = map[string]int32{
	"SUBMITTED": 0,
	"RUNNING":   1,
	"UPDATED":   2,
	"COMPLETED": 3,
}

func (x Progress) String() string {
	return proto.EnumName(Progress_name, int32(x))
}
func (Progress) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type TaskType int32

const (
	TaskType_TASK_TYPE_UNDEFINED     TaskType = 0
	TaskType_CLASSIFICATION          TaskType = 1
	TaskType_REGRESSION              TaskType = 2
	TaskType_SIMILARITY_MATCHING     TaskType = 3
	TaskType_LINK_PREDICTION         TaskType = 4
	TaskType_VERTEX_NOMINATION       TaskType = 5
	TaskType_COMMUNITY_DETECTION     TaskType = 6
	TaskType_GRAPH_MATCHING          TaskType = 7
	TaskType_TIMESERIES_FORECASTING  TaskType = 8
	TaskType_COLLABORATIVE_FILTERING TaskType = 9
)

var TaskType_name = map[int32]string{
	0: "TASK_TYPE_UNDEFINED",
	1: "CLASSIFICATION",
	2: "REGRESSION",
	3: "SIMILARITY_MATCHING",
	4: "LINK_PREDICTION",
	5: "VERTEX_NOMINATION",
	6: "COMMUNITY_DETECTION",
	7: "GRAPH_MATCHING",
	8: "TIMESERIES_FORECASTING",
	9: "COLLABORATIVE_FILTERING",
}
var TaskType_value = map[string]int32{
	"TASK_TYPE_UNDEFINED":     0,
	"CLASSIFICATION":          1,
	"REGRESSION":              2,
	"SIMILARITY_MATCHING":     3,
	"LINK_PREDICTION":         4,
	"VERTEX_NOMINATION":       5,
	"COMMUNITY_DETECTION":     6,
	"GRAPH_MATCHING":          7,
	"TIMESERIES_FORECASTING":  8,
	"COLLABORATIVE_FILTERING": 9,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}
func (TaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TaskSubtype int32

const (
	TaskSubtype_TASK_SUBTYPE_UNDEFINED TaskSubtype = 0
	TaskSubtype_NONE                   TaskSubtype = 1
	TaskSubtype_BINARY                 TaskSubtype = 2
	TaskSubtype_MULTICLASS             TaskSubtype = 3
	TaskSubtype_MULTILABEL             TaskSubtype = 4
	TaskSubtype_UNIVARIATE             TaskSubtype = 5
	TaskSubtype_MULTIVARIATE           TaskSubtype = 6
	TaskSubtype_OVERLAPPING            TaskSubtype = 7
	TaskSubtype_NONOVERLAPPING         TaskSubtype = 8
)

var TaskSubtype_name = map[int32]string{
	0: "TASK_SUBTYPE_UNDEFINED",
	1: "NONE",
	2: "BINARY",
	3: "MULTICLASS",
	4: "MULTILABEL",
	5: "UNIVARIATE",
	6: "MULTIVARIATE",
	7: "OVERLAPPING",
	8: "NONOVERLAPPING",
}
var TaskSubtype_value = map[string]int32{
	"TASK_SUBTYPE_UNDEFINED": 0,
	"NONE":           1,
	"BINARY":         2,
	"MULTICLASS":     3,
	"MULTILABEL":     4,
	"UNIVARIATE":     5,
	"MULTIVARIATE":   6,
	"OVERLAPPING":    7,
	"NONOVERLAPPING": 8,
}

func (x TaskSubtype) String() string {
	return proto.EnumName(TaskSubtype_name, int32(x))
}
func (TaskSubtype) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type OutputType int32

const (
	OutputType_OUTPUT_TYPE_UNDEFINED OutputType = 0
	OutputType_CLASS_LABEL           OutputType = 1
	OutputType_PROBABILITY           OutputType = 2
	OutputType_REAL                  OutputType = 3
	OutputType_NODE_ID               OutputType = 4
	OutputType_VECTOR_CLASS_LABEL    OutputType = 5
	OutputType_VECTOR_STOCHASTIC     OutputType = 6
	OutputType_VECTOR_REAL           OutputType = 7
	OutputType_FILE                  OutputType = 8
)

var OutputType_name = map[int32]string{
	0: "OUTPUT_TYPE_UNDEFINED",
	1: "CLASS_LABEL",
	2: "PROBABILITY",
	3: "REAL",
	4: "NODE_ID",
	5: "VECTOR_CLASS_LABEL",
	6: "VECTOR_STOCHASTIC",
	7: "VECTOR_REAL",
	8: "FILE",
}
var OutputType_value = map[string]int32{
	"OUTPUT_TYPE_UNDEFINED": 0,
	"CLASS_LABEL":           1,
	"PROBABILITY":           2,
	"REAL":                  3,
	"NODE_ID":               4,
	"VECTOR_CLASS_LABEL":    5,
	"VECTOR_STOCHASTIC":     6,
	"VECTOR_REAL":           7,
	"FILE":                  8,
}

func (x OutputType) String() string {
	return proto.EnumName(OutputType_name, int32(x))
}
func (OutputType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Metric int32

const (
	Metric_METRIC_UNDEFINED              Metric = 0
	Metric_ACCURACY                      Metric = 1
	Metric_F1                            Metric = 2
	Metric_F1_MICRO                      Metric = 3
	Metric_F1_MACRO                      Metric = 4
	Metric_ROC_AUC                       Metric = 5
	Metric_ROC_AUC_MICRO                 Metric = 6
	Metric_ROC_AUC_MACRO                 Metric = 7
	Metric_ROOT_MEAN_SQUARED_ERROR       Metric = 8
	Metric_ROOT_MEAN_SQUARED_ERROR_AVG   Metric = 9
	Metric_MEAN_ABSOLUTE_ERROR           Metric = 10
	Metric_R_SQUARED                     Metric = 11
	Metric_NORMALIZED_MUTUAL_INFORMATION Metric = 12
	Metric_JACCARD_SIMILARITY_SCORE      Metric = 13
	Metric_EXECUTION_TIME                Metric = 14
)

var Metric_name = map[int32]string{
	0:  "METRIC_UNDEFINED",
	1:  "ACCURACY",
	2:  "F1",
	3:  "F1_MICRO",
	4:  "F1_MACRO",
	5:  "ROC_AUC",
	6:  "ROC_AUC_MICRO",
	7:  "ROC_AUC_MACRO",
	8:  "ROOT_MEAN_SQUARED_ERROR",
	9:  "ROOT_MEAN_SQUARED_ERROR_AVG",
	10: "MEAN_ABSOLUTE_ERROR",
	11: "R_SQUARED",
	12: "NORMALIZED_MUTUAL_INFORMATION",
	13: "JACCARD_SIMILARITY_SCORE",
	14: "EXECUTION_TIME",
}
var Metric_value = map[string]int32{
	"METRIC_UNDEFINED":              0,
	"ACCURACY":                      1,
	"F1":                            2,
	"F1_MICRO":                      3,
	"F1_MACRO":                      4,
	"ROC_AUC":                       5,
	"ROC_AUC_MICRO":                 6,
	"ROC_AUC_MACRO":                 7,
	"ROOT_MEAN_SQUARED_ERROR":       8,
	"ROOT_MEAN_SQUARED_ERROR_AVG":   9,
	"MEAN_ABSOLUTE_ERROR":           10,
	"R_SQUARED":                     11,
	"NORMALIZED_MUTUAL_INFORMATION": 12,
	"JACCARD_SIMILARITY_SCORE":      13,
	"EXECUTION_TIME":                14,
}

func (x Metric) String() string {
	return proto.EnumName(Metric_name, int32(x))
}
func (Metric) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SessionContext struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *SessionContext) Reset()                    { *m = SessionContext{} }
func (m *SessionContext) String() string            { return proto.CompactTextString(m) }
func (*SessionContext) ProtoMessage()               {}
func (*SessionContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SessionContext) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type Status struct {
	Code    StatusCode `protobuf:"varint,1,opt,name=code,enum=StatusCode" json:"code,omitempty"`
	Details string     `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Status) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_UNKNOWN
}

func (m *Status) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

type Response struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// in the future we could also pass arguments allowing one to fork an existing session,
// or provide resource limits on a session (asking TA2 system to terminate work if it exceeds a given limit)
type SessionRequest struct {
	UserAgent string `protobuf:"bytes,1,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *SessionRequest) Reset()                    { *m = SessionRequest{} }
func (m *SessionRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionRequest) ProtoMessage()               {}
func (*SessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SessionRequest) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *SessionRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type SessionResponse struct {
	ResponseInfo *Response       `protobuf:"bytes,1,opt,name=response_info,json=responseInfo" json:"response_info,omitempty"`
	UserAgent    string          `protobuf:"bytes,2,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	Version      string          `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Context      *SessionContext `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
}

func (m *SessionResponse) Reset()                    { *m = SessionResponse{} }
func (m *SessionResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionResponse) ProtoMessage()               {}
func (*SessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SessionResponse) GetResponseInfo() *Response {
	if m != nil {
		return m.ResponseInfo
	}
	return nil
}

func (m *SessionResponse) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *SessionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SessionResponse) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

type Feature struct {
	FeatureId string `protobuf:"bytes,1,opt,name=feature_id,json=featureId" json:"feature_id,omitempty"`
	DataUri   string `protobuf:"bytes,2,opt,name=data_uri,json=dataUri" json:"data_uri,omitempty"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (m *Feature) String() string            { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Feature) GetFeatureId() string {
	if m != nil {
		return m.FeatureId
	}
	return ""
}

func (m *Feature) GetDataUri() string {
	if m != nil {
		return m.DataUri
	}
	return ""
}

type PipelineCreateRequest struct {
	Context         *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	TrainFeatures   []*Feature      `protobuf:"bytes,2,rep,name=train_features,json=trainFeatures" json:"train_features,omitempty"`
	Task            TaskType        `protobuf:"varint,3,opt,name=task,enum=TaskType" json:"task,omitempty"`
	TaskSubtype     TaskSubtype     `protobuf:"varint,4,opt,name=task_subtype,json=taskSubtype,enum=TaskSubtype" json:"task_subtype,omitempty"`
	TaskDescription string          `protobuf:"bytes,5,opt,name=task_description,json=taskDescription" json:"task_description,omitempty"`
	Output          OutputType      `protobuf:"varint,6,opt,name=output,enum=OutputType" json:"output,omitempty"`
	Metrics         []Metric        `protobuf:"varint,7,rep,packed,name=metrics,enum=Metric" json:"metrics,omitempty"`
	TargetFeatures  []*Feature      `protobuf:"bytes,8,rep,name=target_features,json=targetFeatures" json:"target_features,omitempty"`
	MaxPipelines    int32           `protobuf:"varint,9,opt,name=max_pipelines,json=maxPipelines" json:"max_pipelines,omitempty"`
}

func (m *PipelineCreateRequest) Reset()                    { *m = PipelineCreateRequest{} }
func (m *PipelineCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*PipelineCreateRequest) ProtoMessage()               {}
func (*PipelineCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PipelineCreateRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *PipelineCreateRequest) GetTrainFeatures() []*Feature {
	if m != nil {
		return m.TrainFeatures
	}
	return nil
}

func (m *PipelineCreateRequest) GetTask() TaskType {
	if m != nil {
		return m.Task
	}
	return TaskType_TASK_TYPE_UNDEFINED
}

func (m *PipelineCreateRequest) GetTaskSubtype() TaskSubtype {
	if m != nil {
		return m.TaskSubtype
	}
	return TaskSubtype_TASK_SUBTYPE_UNDEFINED
}

func (m *PipelineCreateRequest) GetTaskDescription() string {
	if m != nil {
		return m.TaskDescription
	}
	return ""
}

func (m *PipelineCreateRequest) GetOutput() OutputType {
	if m != nil {
		return m.Output
	}
	return OutputType_OUTPUT_TYPE_UNDEFINED
}

func (m *PipelineCreateRequest) GetMetrics() []Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *PipelineCreateRequest) GetTargetFeatures() []*Feature {
	if m != nil {
		return m.TargetFeatures
	}
	return nil
}

func (m *PipelineCreateRequest) GetMaxPipelines() int32 {
	if m != nil {
		return m.MaxPipelines
	}
	return 0
}

type Score struct {
	Metric Metric  `protobuf:"varint,1,opt,name=metric,enum=Metric" json:"metric,omitempty"`
	Value  float32 `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
}

func (m *Score) Reset()                    { *m = Score{} }
func (m *Score) String() string            { return proto.CompactTextString(m) }
func (*Score) ProtoMessage()               {}
func (*Score) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Score) GetMetric() Metric {
	if m != nil {
		return m.Metric
	}
	return Metric_METRIC_UNDEFINED
}

func (m *Score) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Pipeline struct {
	PredictResultUris []string   `protobuf:"bytes,1,rep,name=predict_result_uris,json=predictResultUris" json:"predict_result_uris,omitempty"`
	Output            OutputType `protobuf:"varint,2,opt,name=output,enum=OutputType" json:"output,omitempty"`
	Scores            []*Score   `protobuf:"bytes,3,rep,name=scores" json:"scores,omitempty"`
}

func (m *Pipeline) Reset()                    { *m = Pipeline{} }
func (m *Pipeline) String() string            { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()               {}
func (*Pipeline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Pipeline) GetPredictResultUris() []string {
	if m != nil {
		return m.PredictResultUris
	}
	return nil
}

func (m *Pipeline) GetOutput() OutputType {
	if m != nil {
		return m.Output
	}
	return OutputType_OUTPUT_TYPE_UNDEFINED
}

func (m *Pipeline) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

type PipelineCreateResult struct {
	ResponseInfo *Response `protobuf:"bytes,1,opt,name=response_info,json=responseInfo" json:"response_info,omitempty"`
	ProgressInfo Progress  `protobuf:"varint,2,opt,name=progress_info,json=progressInfo,enum=Progress" json:"progress_info,omitempty"`
	PipelineId   string    `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId" json:"pipeline_id,omitempty"`
	// Will be set if progress info value is UPDATED or COMPLETED
	PipelineInfo *Pipeline `protobuf:"bytes,4,opt,name=pipeline_info,json=pipelineInfo" json:"pipeline_info,omitempty"`
}

func (m *PipelineCreateResult) Reset()                    { *m = PipelineCreateResult{} }
func (m *PipelineCreateResult) String() string            { return proto.CompactTextString(m) }
func (*PipelineCreateResult) ProtoMessage()               {}
func (*PipelineCreateResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PipelineCreateResult) GetResponseInfo() *Response {
	if m != nil {
		return m.ResponseInfo
	}
	return nil
}

func (m *PipelineCreateResult) GetProgressInfo() Progress {
	if m != nil {
		return m.ProgressInfo
	}
	return Progress_SUBMITTED
}

func (m *PipelineCreateResult) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *PipelineCreateResult) GetPipelineInfo() *Pipeline {
	if m != nil {
		return m.PipelineInfo
	}
	return nil
}

type PipelineExecuteRequest struct {
	Context         *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	PipelineId      string          `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId" json:"pipeline_id,omitempty"`
	PredictFeatures []*Feature      `protobuf:"bytes,3,rep,name=predict_features,json=predictFeatures" json:"predict_features,omitempty"`
}

func (m *PipelineExecuteRequest) Reset()                    { *m = PipelineExecuteRequest{} }
func (m *PipelineExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*PipelineExecuteRequest) ProtoMessage()               {}
func (*PipelineExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PipelineExecuteRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *PipelineExecuteRequest) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *PipelineExecuteRequest) GetPredictFeatures() []*Feature {
	if m != nil {
		return m.PredictFeatures
	}
	return nil
}

type PipelineExecuteResult struct {
	ResponseInfo *Response `protobuf:"bytes,1,opt,name=response_info,json=responseInfo" json:"response_info,omitempty"`
	ProgressInfo Progress  `protobuf:"varint,2,opt,name=progress_info,json=progressInfo,enum=Progress" json:"progress_info,omitempty"`
	PipelineId   string    `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId" json:"pipeline_id,omitempty"`
	// Will be set if progress info value is UPDATED or COMPLETED
	ResultUris []string `protobuf:"bytes,4,rep,name=result_uris,json=resultUris" json:"result_uris,omitempty"`
}

func (m *PipelineExecuteResult) Reset()                    { *m = PipelineExecuteResult{} }
func (m *PipelineExecuteResult) String() string            { return proto.CompactTextString(m) }
func (*PipelineExecuteResult) ProtoMessage()               {}
func (*PipelineExecuteResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PipelineExecuteResult) GetResponseInfo() *Response {
	if m != nil {
		return m.ResponseInfo
	}
	return nil
}

func (m *PipelineExecuteResult) GetProgressInfo() Progress {
	if m != nil {
		return m.ProgressInfo
	}
	return Progress_SUBMITTED
}

func (m *PipelineExecuteResult) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *PipelineExecuteResult) GetResultUris() []string {
	if m != nil {
		return m.ResultUris
	}
	return nil
}

type PipelineListRequest struct {
	Context *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
}

func (m *PipelineListRequest) Reset()                    { *m = PipelineListRequest{} }
func (m *PipelineListRequest) String() string            { return proto.CompactTextString(m) }
func (*PipelineListRequest) ProtoMessage()               {}
func (*PipelineListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PipelineListRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

type PipelineDeleteRequest struct {
	Context           *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	DeletePipelineIds []string        `protobuf:"bytes,2,rep,name=delete_pipeline_ids,json=deletePipelineIds" json:"delete_pipeline_ids,omitempty"`
}

func (m *PipelineDeleteRequest) Reset()                    { *m = PipelineDeleteRequest{} }
func (m *PipelineDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*PipelineDeleteRequest) ProtoMessage()               {}
func (*PipelineDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PipelineDeleteRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *PipelineDeleteRequest) GetDeletePipelineIds() []string {
	if m != nil {
		return m.DeletePipelineIds
	}
	return nil
}

type PipelineListResult struct {
	ResponseInfo *Response `protobuf:"bytes,1,opt,name=response_info,json=responseInfo" json:"response_info,omitempty"`
	PipelineIds  []string  `protobuf:"bytes,2,rep,name=pipeline_ids,json=pipelineIds" json:"pipeline_ids,omitempty"`
}

func (m *PipelineListResult) Reset()                    { *m = PipelineListResult{} }
func (m *PipelineListResult) String() string            { return proto.CompactTextString(m) }
func (*PipelineListResult) ProtoMessage()               {}
func (*PipelineListResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PipelineListResult) GetResponseInfo() *Response {
	if m != nil {
		return m.ResponseInfo
	}
	return nil
}

func (m *PipelineListResult) GetPipelineIds() []string {
	if m != nil {
		return m.PipelineIds
	}
	return nil
}

type PipelineCreateResultsRequest struct {
	Context     *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	PipelineIds []string        `protobuf:"bytes,2,rep,name=pipeline_ids,json=pipelineIds" json:"pipeline_ids,omitempty"`
}

func (m *PipelineCreateResultsRequest) Reset()                    { *m = PipelineCreateResultsRequest{} }
func (m *PipelineCreateResultsRequest) String() string            { return proto.CompactTextString(m) }
func (*PipelineCreateResultsRequest) ProtoMessage()               {}
func (*PipelineCreateResultsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PipelineCreateResultsRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *PipelineCreateResultsRequest) GetPipelineIds() []string {
	if m != nil {
		return m.PipelineIds
	}
	return nil
}

type PipelineExecuteResultsRequest struct {
	Context     *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	PipelineIds []string        `protobuf:"bytes,2,rep,name=pipeline_ids,json=pipelineIds" json:"pipeline_ids,omitempty"`
}

func (m *PipelineExecuteResultsRequest) Reset()                    { *m = PipelineExecuteResultsRequest{} }
func (m *PipelineExecuteResultsRequest) String() string            { return proto.CompactTextString(m) }
func (*PipelineExecuteResultsRequest) ProtoMessage()               {}
func (*PipelineExecuteResultsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PipelineExecuteResultsRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *PipelineExecuteResultsRequest) GetPipelineIds() []string {
	if m != nil {
		return m.PipelineIds
	}
	return nil
}

type PipelineExportRequest struct {
	Context         *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	PipelineId      string          `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId" json:"pipeline_id,omitempty"`
	PipelineExecUri string          `protobuf:"bytes,3,opt,name=pipeline_exec_uri,json=pipelineExecUri" json:"pipeline_exec_uri,omitempty"`
}

func (m *PipelineExportRequest) Reset()                    { *m = PipelineExportRequest{} }
func (m *PipelineExportRequest) String() string            { return proto.CompactTextString(m) }
func (*PipelineExportRequest) ProtoMessage()               {}
func (*PipelineExportRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PipelineExportRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *PipelineExportRequest) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *PipelineExportRequest) GetPipelineExecUri() string {
	if m != nil {
		return m.PipelineExecUri
	}
	return ""
}

type UpdateProblemSchemaRequest struct {
	Updates []*UpdateProblemSchemaRequest_ReplaceProblemSchemaField `protobuf:"bytes,1,rep,name=updates" json:"updates,omitempty"`
}

func (m *UpdateProblemSchemaRequest) Reset()                    { *m = UpdateProblemSchemaRequest{} }
func (m *UpdateProblemSchemaRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateProblemSchemaRequest) ProtoMessage()               {}
func (*UpdateProblemSchemaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpdateProblemSchemaRequest) GetUpdates() []*UpdateProblemSchemaRequest_ReplaceProblemSchemaField {
	if m != nil {
		return m.Updates
	}
	return nil
}

type UpdateProblemSchemaRequest_ReplaceProblemSchemaField struct {
	// Types that are valid to be assigned to Update:
	//	*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskType
	//	*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskSubtype
	//	*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskDescription
	//	*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OutputType
	//	*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_Metric
	Update isUpdateProblemSchemaRequest_ReplaceProblemSchemaField_Update `protobuf_oneof:"update"`
}

func (m *UpdateProblemSchemaRequest_ReplaceProblemSchemaField) Reset() {
	*m = UpdateProblemSchemaRequest_ReplaceProblemSchemaField{}
}
func (m *UpdateProblemSchemaRequest_ReplaceProblemSchemaField) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateProblemSchemaRequest_ReplaceProblemSchemaField) ProtoMessage() {}
func (*UpdateProblemSchemaRequest_ReplaceProblemSchemaField) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18, 0}
}

type isUpdateProblemSchemaRequest_ReplaceProblemSchemaField_Update interface {
	isUpdateProblemSchemaRequest_ReplaceProblemSchemaField_Update()
}

type UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskType struct {
	TaskType TaskType `protobuf:"varint,1,opt,name=task_type,json=taskType,enum=TaskType,oneof"`
}
type UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskSubtype struct {
	TaskSubtype TaskSubtype `protobuf:"varint,2,opt,name=task_subtype,json=taskSubtype,enum=TaskSubtype,oneof"`
}
type UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskDescription struct {
	TaskDescription string `protobuf:"bytes,3,opt,name=task_description,json=taskDescription,oneof"`
}
type UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OutputType struct {
	OutputType OutputType `protobuf:"varint,4,opt,name=output_type,json=outputType,enum=OutputType,oneof"`
}
type UpdateProblemSchemaRequest_ReplaceProblemSchemaField_Metric struct {
	Metric Metric `protobuf:"varint,5,opt,name=metric,enum=Metric,oneof"`
}

func (*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskType) isUpdateProblemSchemaRequest_ReplaceProblemSchemaField_Update() {
}
func (*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskSubtype) isUpdateProblemSchemaRequest_ReplaceProblemSchemaField_Update() {
}
func (*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskDescription) isUpdateProblemSchemaRequest_ReplaceProblemSchemaField_Update() {
}
func (*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OutputType) isUpdateProblemSchemaRequest_ReplaceProblemSchemaField_Update() {
}
func (*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_Metric) isUpdateProblemSchemaRequest_ReplaceProblemSchemaField_Update() {
}

func (m *UpdateProblemSchemaRequest_ReplaceProblemSchemaField) GetUpdate() isUpdateProblemSchemaRequest_ReplaceProblemSchemaField_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateProblemSchemaRequest_ReplaceProblemSchemaField) GetTaskType() TaskType {
	if x, ok := m.GetUpdate().(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskType); ok {
		return x.TaskType
	}
	return TaskType_TASK_TYPE_UNDEFINED
}

func (m *UpdateProblemSchemaRequest_ReplaceProblemSchemaField) GetTaskSubtype() TaskSubtype {
	if x, ok := m.GetUpdate().(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskSubtype); ok {
		return x.TaskSubtype
	}
	return TaskSubtype_TASK_SUBTYPE_UNDEFINED
}

func (m *UpdateProblemSchemaRequest_ReplaceProblemSchemaField) GetTaskDescription() string {
	if x, ok := m.GetUpdate().(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskDescription); ok {
		return x.TaskDescription
	}
	return ""
}

func (m *UpdateProblemSchemaRequest_ReplaceProblemSchemaField) GetOutputType() OutputType {
	if x, ok := m.GetUpdate().(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OutputType); ok {
		return x.OutputType
	}
	return OutputType_OUTPUT_TYPE_UNDEFINED
}

func (m *UpdateProblemSchemaRequest_ReplaceProblemSchemaField) GetMetric() Metric {
	if x, ok := m.GetUpdate().(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_Metric); ok {
		return x.Metric
	}
	return Metric_METRIC_UNDEFINED
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpdateProblemSchemaRequest_ReplaceProblemSchemaField) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OneofMarshaler, _UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OneofUnmarshaler, _UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OneofSizer, []interface{}{
		(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskType)(nil),
		(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskSubtype)(nil),
		(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskDescription)(nil),
		(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OutputType)(nil),
		(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField_Metric)(nil),
	}
}

func _UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField)
	// update
	switch x := m.Update.(type) {
	case *UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskType:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TaskType))
	case *UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskSubtype:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TaskSubtype))
	case *UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskDescription:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TaskDescription)
	case *UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OutputType:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.OutputType))
	case *UpdateProblemSchemaRequest_ReplaceProblemSchemaField_Metric:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Metric))
	case nil:
	default:
		return fmt.Errorf("UpdateProblemSchemaRequest_ReplaceProblemSchemaField.Update has unexpected type %T", x)
	}
	return nil
}

func _UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField)
	switch tag {
	case 1: // update.task_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Update = &UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskType{TaskType(x)}
		return true, err
	case 2: // update.task_subtype
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Update = &UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskSubtype{TaskSubtype(x)}
		return true, err
	case 3: // update.task_description
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Update = &UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskDescription{x}
		return true, err
	case 4: // update.output_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Update = &UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OutputType{OutputType(x)}
		return true, err
	case 5: // update.metric
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Update = &UpdateProblemSchemaRequest_ReplaceProblemSchemaField_Metric{Metric(x)}
		return true, err
	default:
		return false, nil
	}
}

func _UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpdateProblemSchemaRequest_ReplaceProblemSchemaField)
	// update
	switch x := m.Update.(type) {
	case *UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskType:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TaskType))
	case *UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskSubtype:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TaskSubtype))
	case *UpdateProblemSchemaRequest_ReplaceProblemSchemaField_TaskDescription:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TaskDescription)))
		n += len(x.TaskDescription)
	case *UpdateProblemSchemaRequest_ReplaceProblemSchemaField_OutputType:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.OutputType))
	case *UpdateProblemSchemaRequest_ReplaceProblemSchemaField_Metric:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Metric))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

var E_ProtocolVersion = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         54100,
	Name:          "protocol_version",
	Tag:           "bytes,54100,opt,name=protocol_version,json=protocolVersion",
	Filename:      "core.proto",
}

func init() {
	proto.RegisterType((*SessionContext)(nil), "SessionContext")
	proto.RegisterType((*Status)(nil), "Status")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*SessionRequest)(nil), "SessionRequest")
	proto.RegisterType((*SessionResponse)(nil), "SessionResponse")
	proto.RegisterType((*Feature)(nil), "Feature")
	proto.RegisterType((*PipelineCreateRequest)(nil), "PipelineCreateRequest")
	proto.RegisterType((*Score)(nil), "Score")
	proto.RegisterType((*Pipeline)(nil), "Pipeline")
	proto.RegisterType((*PipelineCreateResult)(nil), "PipelineCreateResult")
	proto.RegisterType((*PipelineExecuteRequest)(nil), "PipelineExecuteRequest")
	proto.RegisterType((*PipelineExecuteResult)(nil), "PipelineExecuteResult")
	proto.RegisterType((*PipelineListRequest)(nil), "PipelineListRequest")
	proto.RegisterType((*PipelineDeleteRequest)(nil), "PipelineDeleteRequest")
	proto.RegisterType((*PipelineListResult)(nil), "PipelineListResult")
	proto.RegisterType((*PipelineCreateResultsRequest)(nil), "PipelineCreateResultsRequest")
	proto.RegisterType((*PipelineExecuteResultsRequest)(nil), "PipelineExecuteResultsRequest")
	proto.RegisterType((*PipelineExportRequest)(nil), "PipelineExportRequest")
	proto.RegisterType((*UpdateProblemSchemaRequest)(nil), "UpdateProblemSchemaRequest")
	proto.RegisterType((*UpdateProblemSchemaRequest_ReplaceProblemSchemaField)(nil), "UpdateProblemSchemaRequest.ReplaceProblemSchemaField")
	proto.RegisterEnum("StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("Progress", Progress_name, Progress_value)
	proto.RegisterEnum("TaskType", TaskType_name, TaskType_value)
	proto.RegisterEnum("TaskSubtype", TaskSubtype_name, TaskSubtype_value)
	proto.RegisterEnum("OutputType", OutputType_name, OutputType_value)
	proto.RegisterEnum("Metric", Metric_name, Metric_value)
	proto.RegisterExtension(E_ProtocolVersion)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Core service

type CoreClient interface {
	// Train step - multiple result messages returned via GRPC streaming.
	CreatePipelines(ctx context.Context, in *PipelineCreateRequest, opts ...grpc.CallOption) (Core_CreatePipelinesClient, error)
	// Predict step - multiple results messages returned via GRPC streaming.
	ExecutePipeline(ctx context.Context, in *PipelineExecuteRequest, opts ...grpc.CallOption) (Core_ExecutePipelineClient, error)
	// Manage pipelines already present in the session.
	ListPipelines(ctx context.Context, in *PipelineListRequest, opts ...grpc.CallOption) (*PipelineListResult, error)
	DeletePipelines(ctx context.Context, in *PipelineDeleteRequest, opts ...grpc.CallOption) (*PipelineListResult, error)
	// Obtain results
	GetCreatePipelineResults(ctx context.Context, in *PipelineCreateResultsRequest, opts ...grpc.CallOption) (Core_GetCreatePipelineResultsClient, error)
	GetExecutePipelineResults(ctx context.Context, in *PipelineExecuteResultsRequest, opts ...grpc.CallOption) (Core_GetExecutePipelineResultsClient, error)
	// Export executable of a pipeline, including any optional preprocessing used in session
	ExportPipeline(ctx context.Context, in *PipelineExportRequest, opts ...grpc.CallOption) (*Response, error)
	// Update problem schema
	UpdateProblemSchema(ctx context.Context, in *UpdateProblemSchemaRequest, opts ...grpc.CallOption) (*Response, error)
	// Session management
	StartSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	EndSession(ctx context.Context, in *SessionContext, opts ...grpc.CallOption) (*Response, error)
}

type coreClient struct {
	cc *grpc.ClientConn
}

func NewCoreClient(cc *grpc.ClientConn) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) CreatePipelines(ctx context.Context, in *PipelineCreateRequest, opts ...grpc.CallOption) (Core_CreatePipelinesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Core_serviceDesc.Streams[0], c.cc, "/Core/CreatePipelines", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreCreatePipelinesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_CreatePipelinesClient interface {
	Recv() (*PipelineCreateResult, error)
	grpc.ClientStream
}

type coreCreatePipelinesClient struct {
	grpc.ClientStream
}

func (x *coreCreatePipelinesClient) Recv() (*PipelineCreateResult, error) {
	m := new(PipelineCreateResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ExecutePipeline(ctx context.Context, in *PipelineExecuteRequest, opts ...grpc.CallOption) (Core_ExecutePipelineClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Core_serviceDesc.Streams[1], c.cc, "/Core/ExecutePipeline", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreExecutePipelineClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_ExecutePipelineClient interface {
	Recv() (*PipelineExecuteResult, error)
	grpc.ClientStream
}

type coreExecutePipelineClient struct {
	grpc.ClientStream
}

func (x *coreExecutePipelineClient) Recv() (*PipelineExecuteResult, error) {
	m := new(PipelineExecuteResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ListPipelines(ctx context.Context, in *PipelineListRequest, opts ...grpc.CallOption) (*PipelineListResult, error) {
	out := new(PipelineListResult)
	err := grpc.Invoke(ctx, "/Core/ListPipelines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeletePipelines(ctx context.Context, in *PipelineDeleteRequest, opts ...grpc.CallOption) (*PipelineListResult, error) {
	out := new(PipelineListResult)
	err := grpc.Invoke(ctx, "/Core/DeletePipelines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetCreatePipelineResults(ctx context.Context, in *PipelineCreateResultsRequest, opts ...grpc.CallOption) (Core_GetCreatePipelineResultsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Core_serviceDesc.Streams[2], c.cc, "/Core/GetCreatePipelineResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreGetCreatePipelineResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_GetCreatePipelineResultsClient interface {
	Recv() (*PipelineCreateResult, error)
	grpc.ClientStream
}

type coreGetCreatePipelineResultsClient struct {
	grpc.ClientStream
}

func (x *coreGetCreatePipelineResultsClient) Recv() (*PipelineCreateResult, error) {
	m := new(PipelineCreateResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) GetExecutePipelineResults(ctx context.Context, in *PipelineExecuteResultsRequest, opts ...grpc.CallOption) (Core_GetExecutePipelineResultsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Core_serviceDesc.Streams[3], c.cc, "/Core/GetExecutePipelineResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreGetExecutePipelineResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_GetExecutePipelineResultsClient interface {
	Recv() (*PipelineExecuteResult, error)
	grpc.ClientStream
}

type coreGetExecutePipelineResultsClient struct {
	grpc.ClientStream
}

func (x *coreGetExecutePipelineResultsClient) Recv() (*PipelineExecuteResult, error) {
	m := new(PipelineExecuteResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ExportPipeline(ctx context.Context, in *PipelineExportRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/Core/ExportPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateProblemSchema(ctx context.Context, in *UpdateProblemSchemaRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/Core/UpdateProblemSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) StartSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := grpc.Invoke(ctx, "/Core/StartSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EndSession(ctx context.Context, in *SessionContext, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/Core/EndSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Core service

type CoreServer interface {
	// Train step - multiple result messages returned via GRPC streaming.
	CreatePipelines(*PipelineCreateRequest, Core_CreatePipelinesServer) error
	// Predict step - multiple results messages returned via GRPC streaming.
	ExecutePipeline(*PipelineExecuteRequest, Core_ExecutePipelineServer) error
	// Manage pipelines already present in the session.
	ListPipelines(context.Context, *PipelineListRequest) (*PipelineListResult, error)
	DeletePipelines(context.Context, *PipelineDeleteRequest) (*PipelineListResult, error)
	// Obtain results
	GetCreatePipelineResults(*PipelineCreateResultsRequest, Core_GetCreatePipelineResultsServer) error
	GetExecutePipelineResults(*PipelineExecuteResultsRequest, Core_GetExecutePipelineResultsServer) error
	// Export executable of a pipeline, including any optional preprocessing used in session
	ExportPipeline(context.Context, *PipelineExportRequest) (*Response, error)
	// Update problem schema
	UpdateProblemSchema(context.Context, *UpdateProblemSchemaRequest) (*Response, error)
	// Session management
	StartSession(context.Context, *SessionRequest) (*SessionResponse, error)
	EndSession(context.Context, *SessionContext) (*Response, error)
}

func RegisterCoreServer(s *grpc.Server, srv CoreServer) {
	s.RegisterService(&_Core_serviceDesc, srv)
}

func _Core_CreatePipelines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipelineCreateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).CreatePipelines(m, &coreCreatePipelinesServer{stream})
}

type Core_CreatePipelinesServer interface {
	Send(*PipelineCreateResult) error
	grpc.ServerStream
}

type coreCreatePipelinesServer struct {
	grpc.ServerStream
}

func (x *coreCreatePipelinesServer) Send(m *PipelineCreateResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_ExecutePipeline_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipelineExecuteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).ExecutePipeline(m, &coreExecutePipelineServer{stream})
}

type Core_ExecutePipelineServer interface {
	Send(*PipelineExecuteResult) error
	grpc.ServerStream
}

type coreExecutePipelineServer struct {
	grpc.ServerStream
}

func (x *coreExecutePipelineServer) Send(m *PipelineExecuteResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/ListPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ListPipelines(ctx, req.(*PipelineListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeletePipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeletePipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/DeletePipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeletePipelines(ctx, req.(*PipelineDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetCreatePipelineResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipelineCreateResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).GetCreatePipelineResults(m, &coreGetCreatePipelineResultsServer{stream})
}

type Core_GetCreatePipelineResultsServer interface {
	Send(*PipelineCreateResult) error
	grpc.ServerStream
}

type coreGetCreatePipelineResultsServer struct {
	grpc.ServerStream
}

func (x *coreGetCreatePipelineResultsServer) Send(m *PipelineCreateResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_GetExecutePipelineResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipelineExecuteResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).GetExecutePipelineResults(m, &coreGetExecutePipelineResultsServer{stream})
}

type Core_GetExecutePipelineResultsServer interface {
	Send(*PipelineExecuteResult) error
	grpc.ServerStream
}

type coreGetExecutePipelineResultsServer struct {
	grpc.ServerStream
}

func (x *coreGetExecutePipelineResultsServer) Send(m *PipelineExecuteResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_ExportPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ExportPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/ExportPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ExportPipeline(ctx, req.(*PipelineExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateProblemSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateProblemSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/UpdateProblemSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateProblemSchema(ctx, req.(*UpdateProblemSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).StartSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/EndSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EndSession(ctx, req.(*SessionContext))
	}
	return interceptor(ctx, in, info, handler)
}

var _Core_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPipelines",
			Handler:    _Core_ListPipelines_Handler,
		},
		{
			MethodName: "DeletePipelines",
			Handler:    _Core_DeletePipelines_Handler,
		},
		{
			MethodName: "ExportPipeline",
			Handler:    _Core_ExportPipeline_Handler,
		},
		{
			MethodName: "UpdateProblemSchema",
			Handler:    _Core_UpdateProblemSchema_Handler,
		},
		{
			MethodName: "StartSession",
			Handler:    _Core_StartSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _Core_EndSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreatePipelines",
			Handler:       _Core_CreatePipelines_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecutePipeline",
			Handler:       _Core_ExecutePipeline_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCreatePipelineResults",
			Handler:       _Core_GetCreatePipelineResults_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetExecutePipelineResults",
			Handler:       _Core_GetExecutePipelineResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core.proto",
}

func init() { proto.RegisterFile("core.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1927 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x6f, 0xdb, 0xc8,
	0x15, 0xd7, 0xf7, 0xc7, 0x93, 0x2c, 0x31, 0xe3, 0xc4, 0x51, 0x9c, 0x64, 0x93, 0x68, 0x2f, 0x5e,
	0x2f, 0x40, 0xaf, 0x1d, 0x2c, 0x8a, 0x16, 0x45, 0xbb, 0x23, 0x72, 0x64, 0x4f, 0x43, 0x91, 0xea,
	0x90, 0xf4, 0x26, 0x7b, 0x21, 0x18, 0x69, 0xec, 0x0a, 0x2b, 0x8b, 0x2a, 0x49, 0x2d, 0xbc, 0xa7,
	0x02, 0x05, 0x7a, 0x6d, 0xcf, 0x05, 0x7a, 0x2a, 0xd0, 0x3d, 0xf4, 0xde, 0x43, 0x2f, 0xbd, 0xf6,
	0x1f, 0xe8, 0x5f, 0xb2, 0x7f, 0x41, 0x31, 0x43, 0x52, 0x1f, 0xb6, 0x6c, 0x74, 0x03, 0x2c, 0xd0,
	0x93, 0xf8, 0x3e, 0xe6, 0x7d, 0xfc, 0xe6, 0x3d, 0xbe, 0x27, 0x02, 0x8c, 0x82, 0x90, 0xab, 0xf3,
	0x30, 0x88, 0x83, 0xfd, 0x97, 0x97, 0x41, 0x70, 0x39, 0xe5, 0x47, 0x92, 0x7a, 0xbf, 0xb8, 0x38,
	0x1a, 0xf3, 0x68, 0x14, 0x4e, 0xe6, 0x71, 0x10, 0x26, 0x1a, 0xdd, 0x23, 0x68, 0xd9, 0x3c, 0x8a,
	0x26, 0xc1, 0x4c, 0x0b, 0x66, 0x31, 0xbf, 0x8e, 0xd1, 0x73, 0x80, 0x28, 0xe1, 0x78, 0x93, 0x71,
	0x27, 0xff, 0x32, 0x7f, 0x50, 0x67, 0xf5, 0x94, 0x43, 0xc7, 0x5d, 0x0d, 0x2a, 0x76, 0xec, 0xc7,
	0x8b, 0x08, 0xbd, 0x80, 0xd2, 0x28, 0x18, 0x73, 0xa9, 0xd2, 0x3a, 0x69, 0xa8, 0x09, 0x5b, 0x0b,
	0xc6, 0x9c, 0x49, 0x01, 0xea, 0x40, 0x75, 0xcc, 0x63, 0x7f, 0x32, 0x8d, 0x3a, 0x05, 0x69, 0x26,
	0x23, 0xbb, 0x9f, 0x42, 0x8d, 0xf1, 0x68, 0x1e, 0xcc, 0x22, 0x8e, 0x5e, 0x40, 0x25, 0x92, 0x27,
	0xa5, 0xa1, 0xc6, 0x49, 0x35, 0x35, 0xc4, 0x52, 0x76, 0x97, 0x2e, 0x43, 0x64, 0xfc, 0xb7, 0x0b,
	0x1e, 0xc9, 0x10, 0x17, 0x11, 0x0f, 0x3d, 0xff, 0x92, 0xcf, 0xe2, 0x2c, 0x44, 0xc1, 0xc1, 0x82,
	0x21, 0xfc, 0x7e, 0xc3, 0x43, 0x71, 0x20, 0xf3, 0x9b, 0x92, 0xdd, 0xbf, 0xe5, 0xa1, 0xbd, 0xb4,
	0x95, 0xfa, 0x57, 0x61, 0x27, 0x4c, 0x9f, 0xbd, 0xc9, 0xec, 0x22, 0x48, 0xc3, 0xa8, 0xab, 0x99,
	0x06, 0x6b, 0x66, 0x72, 0x3a, 0xbb, 0x08, 0x6e, 0x38, 0x2f, 0xdc, 0xe3, 0xbc, 0xb8, 0xe1, 0x1c,
	0x7d, 0x02, 0xd5, 0x51, 0x82, 0x71, 0xa7, 0x24, 0x5d, 0xb4, 0xd5, 0x4d, 0xe8, 0x59, 0x26, 0xef,
	0x6a, 0x50, 0xed, 0x73, 0x3f, 0x5e, 0x84, 0x5c, 0xb8, 0xbb, 0x48, 0x1e, 0xd7, 0xae, 0x23, 0xe5,
	0xd0, 0x31, 0x7a, 0x02, 0xb5, 0xb1, 0x1f, 0xfb, 0xde, 0x22, 0x9c, 0x2c, 0x41, 0xf6, 0x63, 0xdf,
	0x0d, 0x27, 0xdd, 0x3f, 0x16, 0xe1, 0xd1, 0x70, 0x32, 0xe7, 0xd3, 0xc9, 0x8c, 0x6b, 0x21, 0xf7,
	0x63, 0x9e, 0xe1, 0xb7, 0x16, 0x49, 0xfe, 0xfe, 0x48, 0xd0, 0x11, 0xb4, 0xe2, 0xd0, 0x9f, 0xcc,
	0xbc, 0xd4, 0xa5, 0xb8, 0xca, 0xe2, 0x41, 0xe3, 0xa4, 0xa6, 0xa6, 0x01, 0xb2, 0x1d, 0x29, 0x4f,
	0xa9, 0x08, 0x3d, 0x87, 0x52, 0xec, 0x47, 0x5f, 0xcb, 0xe4, 0x5b, 0x27, 0x75, 0xd5, 0xf1, 0xa3,
	0xaf, 0x9d, 0x6f, 0xe7, 0x9c, 0x49, 0x36, 0x3a, 0x82, 0xa6, 0xf8, 0xf5, 0xa2, 0xc5, 0xfb, 0xf8,
	0xdb, 0x39, 0x97, 0x48, 0xb4, 0x4e, 0x9a, 0x52, 0xcd, 0x4e, 0x78, 0xac, 0x11, 0xaf, 0x08, 0xf4,
	0x09, 0x28, 0xf2, 0x40, 0x56, 0xb9, 0x02, 0xd8, 0xb2, 0x4c, 0xb4, 0x2d, 0xf8, 0xfa, 0x8a, 0x8d,
	0x3e, 0x86, 0x4a, 0xb0, 0x88, 0xe7, 0x8b, 0xb8, 0x53, 0x49, 0x4b, 0xd2, 0x92, 0xa4, 0x74, 0x9f,
	0x8a, 0xd0, 0x2b, 0xa8, 0x5e, 0xf1, 0x38, 0x9c, 0x8c, 0xa2, 0x4e, 0xf5, 0x65, 0xf1, 0xa0, 0x75,
	0x52, 0x55, 0x07, 0x92, 0x66, 0x19, 0x1f, 0x1d, 0x43, 0x3b, 0xf6, 0xc3, 0x4b, 0x1e, 0xaf, 0x92,
	0xae, 0xdd, 0x48, 0xba, 0x95, 0x28, 0x2c, 0xb3, 0xfe, 0x18, 0x76, 0xae, 0xfc, 0x6b, 0x6f, 0x9e,
	0xc2, 0x1d, 0x75, 0xea, 0x2f, 0xf3, 0x07, 0x65, 0xd6, 0xbc, 0xf2, 0xaf, 0xb3, 0x2b, 0x88, 0xba,
	0xbf, 0x80, 0xb2, 0x2d, 0x9a, 0x53, 0x94, 0x7c, 0xe2, 0x2b, 0xed, 0x9d, 0x65, 0x08, 0x29, 0x1b,
	0x3d, 0x84, 0xf2, 0x37, 0xfe, 0x74, 0xc1, 0xe5, 0x95, 0x16, 0x58, 0x42, 0x74, 0x7f, 0x07, 0xb5,
	0xcc, 0x18, 0x52, 0x61, 0x77, 0x1e, 0xf2, 0xf1, 0x64, 0x14, 0x7b, 0x21, 0x8f, 0x16, 0xd3, 0x58,
	0x54, 0x80, 0x68, 0xa1, 0xe2, 0x41, 0x9d, 0x3d, 0x48, 0x45, 0x4c, 0x4a, 0xdc, 0x70, 0x12, 0xad,
	0x61, 0x53, 0xb8, 0x1b, 0x9b, 0x8f, 0xa0, 0x12, 0x89, 0x00, 0xa3, 0x4e, 0x51, 0xe6, 0x5b, 0x51,
	0x65, 0xbc, 0x2c, 0xe5, 0x76, 0xff, 0x9d, 0x87, 0x87, 0x37, 0x2b, 0x4a, 0x78, 0xf8, 0xc1, 0x3d,
	0xa4, 0xc2, 0xce, 0x3c, 0x0c, 0x2e, 0x43, 0x1e, 0x45, 0x89, 0x7e, 0x21, 0xad, 0x96, 0x61, 0xca,
	0x65, 0xcd, 0x4c, 0x2e, 0xf5, 0x5f, 0x40, 0x23, 0x83, 0x56, 0x74, 0x41, 0xd2, 0x58, 0x90, 0xb1,
	0xe8, 0x58, 0x1a, 0x5c, 0x2a, 0x08, 0x83, 0xa5, 0x34, 0x80, 0x2c, 0x5c, 0xd6, 0x5c, 0x6a, 0xcf,
	0x2e, 0x82, 0xee, 0x9f, 0xf3, 0xb0, 0x97, 0x89, 0xc8, 0x35, 0x1f, 0x2d, 0x3e, 0xa8, 0x39, 0x6e,
	0x84, 0x55, 0xb8, 0x15, 0xd6, 0x6b, 0x50, 0xb2, 0x5b, 0x5a, 0x96, 0x52, 0xf1, 0x46, 0x29, 0xb5,
	0x53, 0x8d, 0xac, 0x96, 0xba, 0xff, 0xcc, 0xaf, 0xfa, 0x76, 0x19, 0xdb, 0xff, 0x07, 0xcc, 0x2f,
	0xa0, 0xb1, 0x5e, 0x6d, 0x25, 0x59, 0x6d, 0x10, 0x2e, 0xcb, 0xac, 0xfb, 0x05, 0xec, 0x66, 0xa1,
	0x1b, 0x93, 0x28, 0xfe, 0xe1, 0x98, 0x76, 0xc3, 0x55, 0xf2, 0x3a, 0x9f, 0xf2, 0x0f, 0xba, 0x17,
	0x15, 0x76, 0xc7, 0xf2, 0xac, 0xb7, 0x96, 0x4e, 0xf2, 0xe6, 0xaa, 0xb3, 0x07, 0x89, 0x68, 0xb8,
	0xcc, 0x2a, 0xea, 0x5e, 0x02, 0xda, 0x8c, 0xfa, 0x83, 0xd0, 0x7e, 0x05, 0xcd, 0x2d, 0xee, 0x1a,
	0xf3, 0x35, 0x47, 0x53, 0x78, 0xb6, 0xad, 0x7f, 0xa2, 0x0f, 0xc8, 0xf1, 0x7f, 0xf0, 0x76, 0x05,
	0xcf, 0xb7, 0xd6, 0xd1, 0x8f, 0xe4, 0xee, 0x4f, 0x1b, 0x75, 0x3b, 0x0f, 0xc2, 0xf8, 0xc7, 0x68,
	0xa9, 0x43, 0x78, 0xb0, 0x54, 0xe0, 0xd7, 0x7c, 0x24, 0x27, 0x5f, 0x52, 0xa9, 0xed, 0xf9, 0x5a,
	0xb6, 0x62, 0x02, 0x7e, 0x5f, 0x80, 0x7d, 0x77, 0x3e, 0xf6, 0x63, 0x3e, 0x0c, 0x83, 0xf7, 0x53,
	0x7e, 0x65, 0x8f, 0x7e, 0xc3, 0xaf, 0xfc, 0x2c, 0x2c, 0x0b, 0xaa, 0x0b, 0x29, 0x4d, 0xde, 0x9b,
	0x8d, 0x93, 0xcf, 0xd5, 0xbb, 0xb5, 0x55, 0xc6, 0xe7, 0x53, 0x7f, 0xb4, 0x29, 0xeb, 0x4f, 0xf8,
	0x74, 0xcc, 0x32, 0x2b, 0xfb, 0xbf, 0x2f, 0xc0, 0x93, 0x3b, 0xd5, 0xd0, 0x01, 0xd4, 0xe5, 0x24,
	0x93, 0x73, 0x2f, 0x7f, 0x63, 0x3c, 0x9e, 0xe5, 0x58, 0x2d, 0x4e, 0x9f, 0xd1, 0xf1, 0x8d, 0x21,
	0x59, 0xb8, 0x3d, 0x24, 0xcf, 0x72, 0x9b, 0x63, 0xf2, 0xd3, 0x2d, 0x63, 0x52, 0xa2, 0x72, 0x96,
	0xbb, 0x3d, 0x28, 0x55, 0x68, 0x24, 0x6f, 0x7c, 0x6f, 0x6d, 0x06, 0xaf, 0x4f, 0x84, 0xb3, 0x1c,
	0x83, 0x60, 0x49, 0xa1, 0x57, 0xcb, 0x79, 0x55, 0xde, 0x98, 0x57, 0x67, 0xb9, 0x6c, 0x62, 0xf5,
	0x6a, 0x50, 0x49, 0x50, 0x38, 0xfc, 0x43, 0x01, 0x60, 0xb5, 0x0a, 0xa2, 0x06, 0x54, 0x5d, 0xf3,
	0x8d, 0x69, 0x7d, 0x69, 0x2a, 0x39, 0x54, 0x81, 0x82, 0xf5, 0x46, 0xc9, 0xa3, 0x1d, 0xa8, 0x6b,
	0xd8, 0xd4, 0x88, 0x61, 0x10, 0x5d, 0x29, 0xa0, 0x5d, 0x68, 0xdb, 0xc4, 0xb6, 0xa9, 0x65, 0x7a,
	0x99, 0x6e, 0x11, 0x3d, 0x80, 0x9d, 0x8c, 0x49, 0x4c, 0x9d, 0xe8, 0x4a, 0x69, 0x5d, 0x8f, 0xbc,
	0x1d, 0x52, 0x46, 0x74, 0xa5, 0x8c, 0x1e, 0x82, 0x42, 0xcd, 0x73, 0x6c, 0x50, 0xdd, 0xc3, 0xec,
	0xd4, 0x1d, 0x10, 0xd3, 0x51, 0x2a, 0x68, 0x0f, 0x10, 0x23, 0xb6, 0xe5, 0x32, 0x8d, 0x78, 0xe4,
	0xed, 0x19, 0x76, 0x6d, 0x87, 0xe8, 0x4a, 0x15, 0xb5, 0xa1, 0xe1, 0x9a, 0xf8, 0x1c, 0x53, 0x03,
	0xf7, 0x0c, 0xa2, 0xd4, 0xd0, 0x63, 0xd8, 0xed, 0x63, 0x6a, 0x10, 0xdd, 0x1b, 0x32, 0xa2, 0x59,
	0xa6, 0x4e, 0x1d, 0x6a, 0x99, 0x4a, 0x1d, 0x29, 0xd0, 0xb4, 0x5c, 0xc7, 0xb3, 0xfa, 0x1e, 0xc3,
	0xe6, 0x29, 0x51, 0x40, 0x44, 0xe4, 0x9a, 0x74, 0x30, 0x34, 0x88, 0x70, 0x42, 0x74, 0xa5, 0x81,
	0x9a, 0x50, 0xa3, 0xa6, 0x43, 0x98, 0x89, 0x0d, 0xa5, 0x29, 0x72, 0xc5, 0x3d, 0x8b, 0x09, 0xd1,
	0xce, 0x61, 0x0f, 0x6a, 0xd9, 0x6b, 0x56, 0xe4, 0x6b, 0xbb, 0xbd, 0x01, 0x75, 0x84, 0x28, 0x27,
	0xf4, 0x98, 0x6b, 0x9a, 0xd4, 0x3c, 0x55, 0xf2, 0x12, 0xa0, 0xa1, 0x8e, 0x1d, 0x89, 0x84, 0x00,
	0xc6, 0x12, 0x1e, 0x04, 0x59, 0x3c, 0xfc, 0x3e, 0x0f, 0xb5, 0xac, 0x42, 0x44, 0xa4, 0x0e, 0xb6,
	0xdf, 0x78, 0xce, 0xbb, 0x21, 0xf1, 0x5c, 0x53, 0x27, 0x7d, 0x6a, 0x4a, 0x73, 0x08, 0x5a, 0x9a,
	0x81, 0x6d, 0x9b, 0xf6, 0xa9, 0x86, 0x65, 0xf4, 0x79, 0xd4, 0x02, 0x60, 0xe4, 0x94, 0x25, 0x68,
	0x29, 0x05, 0x71, 0xd8, 0xa6, 0x03, 0x6a, 0x60, 0x46, 0x9d, 0x77, 0xde, 0x00, 0x3b, 0xda, 0x99,
	0x70, 0x5f, 0x14, 0x98, 0x1a, 0xd4, 0x7c, 0x23, 0xb2, 0xd7, 0xa9, 0x26, 0x4f, 0x97, 0xd0, 0x23,
	0x78, 0x70, 0x4e, 0x98, 0x43, 0xde, 0x7a, 0xa6, 0x35, 0xa0, 0x66, 0x62, 0xb4, 0x2c, 0x8c, 0x68,
	0xd6, 0x60, 0xe0, 0x9a, 0xc2, 0x86, 0x4e, 0x1c, 0x92, 0xe8, 0x57, 0x44, 0x04, 0xa7, 0x0c, 0x0f,
	0xcf, 0x56, 0x86, 0xab, 0x68, 0x1f, 0xf6, 0x1c, 0x3a, 0x20, 0x36, 0x61, 0x94, 0xd8, 0x5e, 0xdf,
	0x62, 0x44, 0xc3, 0xb6, 0x23, 0x64, 0x35, 0xf4, 0x14, 0x1e, 0x6b, 0x96, 0x61, 0x08, 0xb0, 0xb0,
	0x43, 0xcf, 0x89, 0xd7, 0xa7, 0x86, 0x43, 0x98, 0x10, 0xd6, 0x0f, 0xbf, 0xcb, 0x43, 0x63, 0xad,
	0xd2, 0xa5, 0x21, 0x91, 0xb7, 0xed, 0xf6, 0x6e, 0xa5, 0x5e, 0x83, 0x92, 0x69, 0x99, 0x44, 0xc9,
	0x23, 0x80, 0x4a, 0x8f, 0x9a, 0x98, 0xbd, 0x53, 0x0a, 0x22, 0xf9, 0x81, 0x6b, 0x38, 0x54, 0xa2,
	0xa2, 0x14, 0x97, 0xb4, 0x81, 0x7b, 0xc4, 0x50, 0x4a, 0x82, 0x76, 0x4d, 0x7a, 0x8e, 0x19, 0xc5,
	0x0e, 0x51, 0xca, 0xe2, 0xaa, 0xa5, 0x3c, 0xe3, 0x54, 0x44, 0x99, 0x58, 0xe7, 0x84, 0x19, 0x78,
	0x38, 0x4c, 0xb2, 0x41, 0xd0, 0x32, 0x2d, 0x73, 0x9d, 0x57, 0x3b, 0xfc, 0x7b, 0x1e, 0x60, 0xd5,
	0x33, 0xe8, 0x09, 0x3c, 0xb2, 0x5c, 0x67, 0xe8, 0x3a, 0xb7, 0x6f, 0xa8, 0x0d, 0x0d, 0x19, 0x8b,
	0x97, 0x44, 0x90, 0x17, 0x8c, 0x21, 0xb3, 0x7a, 0xb8, 0x47, 0x0d, 0xea, 0x88, 0x90, 0x6b, 0x50,
	0x62, 0x04, 0x1b, 0x4a, 0x51, 0xd4, 0x83, 0x69, 0xe9, 0xc4, 0xa3, 0xa2, 0xe2, 0xf7, 0x00, 0x9d,
	0x13, 0xcd, 0xb1, 0x98, 0xb7, 0x7e, 0xbe, 0x9c, 0x5c, 0x90, 0xe4, 0xdb, 0x8e, 0xa5, 0x9d, 0x09,
	0x60, 0xb5, 0x24, 0xec, 0x94, 0x2d, 0x8d, 0x55, 0x85, 0xd9, 0x3e, 0x15, 0x75, 0x7e, 0xf8, 0xaf,
	0x02, 0x54, 0x06, 0xd9, 0x76, 0xa9, 0x0c, 0x88, 0xc3, 0xa8, 0xb6, 0x11, 0x63, 0x13, 0x6a, 0x58,
	0xd3, 0x5c, 0x86, 0xb5, 0x77, 0x4a, 0x5e, 0x74, 0x6a, 0xff, 0x58, 0x29, 0x08, 0x6e, 0xff, 0xd8,
	0x1b, 0x50, 0x8d, 0x59, 0x4a, 0x31, 0xa3, 0xb0, 0xa0, 0x4a, 0xb2, 0x8c, 0x2d, 0xcd, 0xc3, 0xae,
	0xa6, 0x94, 0x45, 0x73, 0xa4, 0x44, 0xaa, 0x5d, 0xd9, 0x60, 0xc9, 0x23, 0x55, 0x71, 0xf1, 0xcc,
	0xb2, 0x1c, 0x6f, 0x40, 0xb0, 0xe9, 0xd9, 0xbf, 0x76, 0x31, 0x23, 0xba, 0x47, 0x18, 0xb3, 0x98,
	0x52, 0x43, 0x2f, 0xe0, 0xe9, 0x1d, 0x42, 0x0f, 0x9f, 0x9f, 0x2a, 0x75, 0x51, 0x7f, 0x52, 0x86,
	0x7b, 0xb6, 0x65, 0xb8, 0x0e, 0x49, 0x4f, 0x82, 0x68, 0x1b, 0x96, 0x9d, 0x50, 0x1a, 0xe8, 0x15,
	0x3c, 0x37, 0x2d, 0x36, 0xc0, 0x06, 0xfd, 0x8a, 0xe8, 0xde, 0xc0, 0x75, 0x5c, 0x6c, 0x78, 0xd4,
	0xec, 0x0b, 0x9e, 0xac, 0xd8, 0x26, 0x7a, 0x06, 0x9d, 0x5f, 0x61, 0x4d, 0xc3, 0x4c, 0xf7, 0xd6,
	0xfa, 0xc2, 0xd6, 0x2c, 0x46, 0x94, 0x1d, 0x71, 0xdb, 0xe4, 0x2d, 0xd1, 0x5c, 0xa1, 0xec, 0x89,
	0x2a, 0x56, 0x5a, 0x27, 0x7f, 0x29, 0x43, 0x49, 0x13, 0xdb, 0xbb, 0x0e, 0xed, 0x64, 0x78, 0x2f,
	0x37, 0x7b, 0xb4, 0xa7, 0x6e, 0xfd, 0xa3, 0xb5, 0xff, 0x48, 0xdd, 0x36, 0xee, 0xbb, 0xb9, 0xcf,
	0xf2, 0xa8, 0x0f, 0xed, 0x74, 0x28, 0x2f, 0x77, 0xfa, 0xc7, 0xea, 0xf6, 0x95, 0x74, 0x7f, 0x4f,
	0xdd, 0x3a, 0xc7, 0xa5, 0x9d, 0x9f, 0xc3, 0x8e, 0xd8, 0x59, 0x56, 0xb1, 0x3c, 0x54, 0xb7, 0x6c,
	0x60, 0xfb, 0xbb, 0xea, 0xed, 0x0d, 0xa7, 0x9b, 0x43, 0x5f, 0x40, 0x5b, 0xdf, 0x58, 0x87, 0xd6,
	0x73, 0xd9, 0xd8, 0xbf, 0xee, 0xb2, 0xe0, 0x40, 0xe7, 0x94, 0xc7, 0x9b, 0x80, 0xa4, 0x6b, 0x06,
	0x7a, 0xae, 0xde, 0xb7, 0xed, 0xdc, 0x87, 0xce, 0x97, 0xf0, 0xe4, 0x94, 0xc7, 0x37, 0x00, 0xca,
	0xcc, 0x7e, 0xa4, 0xde, 0xbb, 0xd6, 0xdc, 0x0b, 0xd7, 0xe7, 0xd0, 0x4a, 0x76, 0x93, 0x25, 0xea,
	0xeb, 0xda, 0x6b, 0x4b, 0xcb, 0xfe, 0x6a, 0xcf, 0xeb, 0xe6, 0xd0, 0x2f, 0x61, 0x77, 0xcb, 0x6a,
	0x80, 0x9e, 0xde, 0xb3, 0x30, 0x6c, 0x1a, 0x78, 0x0d, 0x4d, 0x3b, 0xf6, 0xc3, 0x38, 0xdd, 0x7b,
	0xd0, 0x72, 0x03, 0xca, 0xb4, 0x15, 0xf5, 0xc6, 0x87, 0x89, 0x6e, 0x0e, 0x1d, 0x02, 0x90, 0xd9,
	0xf8, 0xd6, 0x91, 0x74, 0x69, 0xda, 0x70, 0xf0, 0x33, 0x2a, 0xfe, 0x6a, 0x04, 0x71, 0x30, 0x0a,
	0xa6, 0x5e, 0xf6, 0xc5, 0xe1, 0x99, 0x9a, 0x7c, 0xff, 0x51, 0xb3, 0xef, 0x3f, 0x6a, 0x7f, 0x32,
	0xe5, 0x96, 0x5c, 0x02, 0xa2, 0xce, 0x7f, 0xbe, 0xcb, 0xd6, 0xa6, 0xf4, 0xdc, 0x79, 0x72, 0xac,
	0xf7, 0xf8, 0xaf, 0xff, 0xd8, 0xaf, 0x9f, 0x7c, 0x76, 0xfc, 0x13, 0xf5, 0xa7, 0xea, 0xf1, 0xf1,
	0x57, 0xb5, 0x6c, 0xad, 0x7a, 0x5f, 0x91, 0x9a, 0xaf, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x8e,
	0xa7, 0xf2, 0x3b, 0x63, 0x12, 0x00, 0x00,
}
