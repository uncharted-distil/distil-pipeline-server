// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data_ext.proto

package pipeline

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FeatureData struct {
	FromFeature *Feature `protobuf:"bytes,1,opt,name=from_feature,json=fromFeature" json:"from_feature,omitempty"`
	ToFeature   *Feature `protobuf:"bytes,2,opt,name=to_feature,json=toFeature" json:"to_feature,omitempty"`
}

func (m *FeatureData) Reset()                    { *m = FeatureData{} }
func (m *FeatureData) String() string            { return proto.CompactTextString(m) }
func (*FeatureData) ProtoMessage()               {}
func (*FeatureData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FeatureData) GetFromFeature() *Feature {
	if m != nil {
		return m.FromFeature
	}
	return nil
}

func (m *FeatureData) GetToFeature() *Feature {
	if m != nil {
		return m.ToFeature
	}
	return nil
}

type AddFeaturesRequest struct {
	Context        *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	FromDatasetUri string          `protobuf:"bytes,2,opt,name=from_dataset_uri,json=fromDatasetUri" json:"from_dataset_uri,omitempty"`
	ToDatasetUri   string          `protobuf:"bytes,3,opt,name=to_dataset_uri,json=toDatasetUri" json:"to_dataset_uri,omitempty"`
	Features       []*FeatureData  `protobuf:"bytes,4,rep,name=features" json:"features,omitempty"`
}

func (m *AddFeaturesRequest) Reset()                    { *m = AddFeaturesRequest{} }
func (m *AddFeaturesRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFeaturesRequest) ProtoMessage()               {}
func (*AddFeaturesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *AddFeaturesRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *AddFeaturesRequest) GetFromDatasetUri() string {
	if m != nil {
		return m.FromDatasetUri
	}
	return ""
}

func (m *AddFeaturesRequest) GetToDatasetUri() string {
	if m != nil {
		return m.ToDatasetUri
	}
	return ""
}

func (m *AddFeaturesRequest) GetFeatures() []*FeatureData {
	if m != nil {
		return m.Features
	}
	return nil
}

type RemoveFeaturesRequest struct {
	Context    *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	DatasetUri string          `protobuf:"bytes,2,opt,name=dataset_uri,json=datasetUri" json:"dataset_uri,omitempty"`
	Features   []*Feature      `protobuf:"bytes,3,rep,name=features" json:"features,omitempty"`
}

func (m *RemoveFeaturesRequest) Reset()                    { *m = RemoveFeaturesRequest{} }
func (m *RemoveFeaturesRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveFeaturesRequest) ProtoMessage()               {}
func (*RemoveFeaturesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RemoveFeaturesRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RemoveFeaturesRequest) GetDatasetUri() string {
	if m != nil {
		return m.DatasetUri
	}
	return ""
}

func (m *RemoveFeaturesRequest) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

type AddSamplesRequest struct {
	Context        *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	FromDatasetUri string          `protobuf:"bytes,2,opt,name=from_dataset_uri,json=fromDatasetUri" json:"from_dataset_uri,omitempty"`
	FromResourceId string          `protobuf:"bytes,3,opt,name=from_resource_id,json=fromResourceId" json:"from_resource_id,omitempty"`
	ToDatasetUri   string          `protobuf:"bytes,4,opt,name=to_dataset_uri,json=toDatasetUri" json:"to_dataset_uri,omitempty"`
	ToResourceId   string          `protobuf:"bytes,5,opt,name=to_resource_id,json=toResourceId" json:"to_resource_id,omitempty"`
	SampleIds      []string        `protobuf:"bytes,6,rep,name=sample_ids,json=sampleIds" json:"sample_ids,omitempty"`
}

func (m *AddSamplesRequest) Reset()                    { *m = AddSamplesRequest{} }
func (m *AddSamplesRequest) String() string            { return proto.CompactTextString(m) }
func (*AddSamplesRequest) ProtoMessage()               {}
func (*AddSamplesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *AddSamplesRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *AddSamplesRequest) GetFromDatasetUri() string {
	if m != nil {
		return m.FromDatasetUri
	}
	return ""
}

func (m *AddSamplesRequest) GetFromResourceId() string {
	if m != nil {
		return m.FromResourceId
	}
	return ""
}

func (m *AddSamplesRequest) GetToDatasetUri() string {
	if m != nil {
		return m.ToDatasetUri
	}
	return ""
}

func (m *AddSamplesRequest) GetToResourceId() string {
	if m != nil {
		return m.ToResourceId
	}
	return ""
}

func (m *AddSamplesRequest) GetSampleIds() []string {
	if m != nil {
		return m.SampleIds
	}
	return nil
}

type RemoveSamplesRequest struct {
	Context    *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	DatasetUri string          `protobuf:"bytes,2,opt,name=dataset_uri,json=datasetUri" json:"dataset_uri,omitempty"`
	ResourceId string          `protobuf:"bytes,3,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	SampleIds  []string        `protobuf:"bytes,4,rep,name=sample_ids,json=sampleIds" json:"sample_ids,omitempty"`
}

func (m *RemoveSamplesRequest) Reset()                    { *m = RemoveSamplesRequest{} }
func (m *RemoveSamplesRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveSamplesRequest) ProtoMessage()               {}
func (*RemoveSamplesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RemoveSamplesRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RemoveSamplesRequest) GetDatasetUri() string {
	if m != nil {
		return m.DatasetUri
	}
	return ""
}

func (m *RemoveSamplesRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *RemoveSamplesRequest) GetSampleIds() []string {
	if m != nil {
		return m.SampleIds
	}
	return nil
}

type ReplacementData struct {
	Feature  *Feature `protobuf:"bytes,1,opt,name=feature" json:"feature,omitempty"`
	SampleId string   `protobuf:"bytes,2,opt,name=sample_id,json=sampleId" json:"sample_id,omitempty"`
	Value    string   `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *ReplacementData) Reset()                    { *m = ReplacementData{} }
func (m *ReplacementData) String() string            { return proto.CompactTextString(m) }
func (*ReplacementData) ProtoMessage()               {}
func (*ReplacementData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ReplacementData) GetFeature() *Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

func (m *ReplacementData) GetSampleId() string {
	if m != nil {
		return m.SampleId
	}
	return ""
}

func (m *ReplacementData) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ReplaceDataRequest struct {
	Context      *SessionContext    `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	DatasetUri   string             `protobuf:"bytes,2,opt,name=dataset_uri,json=datasetUri" json:"dataset_uri,omitempty"`
	Replacements []*ReplacementData `protobuf:"bytes,3,rep,name=replacements" json:"replacements,omitempty"`
}

func (m *ReplaceDataRequest) Reset()                    { *m = ReplaceDataRequest{} }
func (m *ReplaceDataRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplaceDataRequest) ProtoMessage()               {}
func (*ReplaceDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ReplaceDataRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *ReplaceDataRequest) GetDatasetUri() string {
	if m != nil {
		return m.DatasetUri
	}
	return ""
}

func (m *ReplaceDataRequest) GetReplacements() []*ReplacementData {
	if m != nil {
		return m.Replacements
	}
	return nil
}

type MaterializeRequest struct {
	Context          *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	SourceDatasetUri string          `protobuf:"bytes,2,opt,name=source_dataset_uri,json=sourceDatasetUri" json:"source_dataset_uri,omitempty"`
	DestDatasetUri   string          `protobuf:"bytes,3,opt,name=dest_dataset_uri,json=destDatasetUri" json:"dest_dataset_uri,omitempty"`
}

func (m *MaterializeRequest) Reset()                    { *m = MaterializeRequest{} }
func (m *MaterializeRequest) String() string            { return proto.CompactTextString(m) }
func (*MaterializeRequest) ProtoMessage()               {}
func (*MaterializeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *MaterializeRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *MaterializeRequest) GetSourceDatasetUri() string {
	if m != nil {
		return m.SourceDatasetUri
	}
	return ""
}

func (m *MaterializeRequest) GetDestDatasetUri() string {
	if m != nil {
		return m.DestDatasetUri
	}
	return ""
}

type TrainValidationSplitRequest struct {
	Context      *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	ValSize      float32         `protobuf:"fixed32,2,opt,name=val_size,json=valSize" json:"val_size,omitempty"`
	Seed         int32           `protobuf:"varint,3,opt,name=seed" json:"seed,omitempty"`
	IsValidation bool            `protobuf:"varint,4,opt,name=is_validation,json=isValidation" json:"is_validation,omitempty"`
	DatasetUri   string          `protobuf:"bytes,5,opt,name=dataset_uri,json=datasetUri" json:"dataset_uri,omitempty"`
}

func (m *TrainValidationSplitRequest) Reset()                    { *m = TrainValidationSplitRequest{} }
func (m *TrainValidationSplitRequest) String() string            { return proto.CompactTextString(m) }
func (*TrainValidationSplitRequest) ProtoMessage()               {}
func (*TrainValidationSplitRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *TrainValidationSplitRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *TrainValidationSplitRequest) GetValSize() float32 {
	if m != nil {
		return m.ValSize
	}
	return 0
}

func (m *TrainValidationSplitRequest) GetSeed() int32 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *TrainValidationSplitRequest) GetIsValidation() bool {
	if m != nil {
		return m.IsValidation
	}
	return false
}

func (m *TrainValidationSplitRequest) GetDatasetUri() string {
	if m != nil {
		return m.DatasetUri
	}
	return ""
}

type RevertRequest struct {
	DatasetUri string `protobuf:"bytes,1,opt,name=dataset_uri,json=datasetUri" json:"dataset_uri,omitempty"`
}

func (m *RevertRequest) Reset()                    { *m = RevertRequest{} }
func (m *RevertRequest) String() string            { return proto.CompactTextString(m) }
func (*RevertRequest) ProtoMessage()               {}
func (*RevertRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *RevertRequest) GetDatasetUri() string {
	if m != nil {
		return m.DatasetUri
	}
	return ""
}

func init() {
	proto.RegisterType((*FeatureData)(nil), "FeatureData")
	proto.RegisterType((*AddFeaturesRequest)(nil), "AddFeaturesRequest")
	proto.RegisterType((*RemoveFeaturesRequest)(nil), "RemoveFeaturesRequest")
	proto.RegisterType((*AddSamplesRequest)(nil), "AddSamplesRequest")
	proto.RegisterType((*RemoveSamplesRequest)(nil), "RemoveSamplesRequest")
	proto.RegisterType((*ReplacementData)(nil), "ReplacementData")
	proto.RegisterType((*ReplaceDataRequest)(nil), "ReplaceDataRequest")
	proto.RegisterType((*MaterializeRequest)(nil), "MaterializeRequest")
	proto.RegisterType((*TrainValidationSplitRequest)(nil), "TrainValidationSplitRequest")
	proto.RegisterType((*RevertRequest)(nil), "RevertRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataExt service

type DataExtClient interface {
	// Add and remove features to/from datasets
	AddFeatures(ctx context.Context, in *AddFeaturesRequest, opts ...grpc.CallOption) (*Response, error)
	RemoveFeatures(ctx context.Context, in *RemoveFeaturesRequest, opts ...grpc.CallOption) (*Response, error)
	// Add and remove records (rows) to/from datasets
	AddSamples(ctx context.Context, in *AddSamplesRequest, opts ...grpc.CallOption) (*Response, error)
	RemoveSamples(ctx context.Context, in *RemoveSamplesRequest, opts ...grpc.CallOption) (*Response, error)
	// Replace individual data points in a set
	ReplaceData(ctx context.Context, in *ReplaceDataRequest, opts ...grpc.CallOption) (*Response, error)
	// Persist the dataset with modifications applied for future use
	Materialize(ctx context.Context, in *MaterializeRequest, opts ...grpc.CallOption) (*Response, error)
	// Deterministic split of a dataset into training a validation
	// Filters out all but validation records or training records depending on is_validation
	TrainValidationSplit(ctx context.Context, in *TrainValidationSplitRequest, opts ...grpc.CallOption) (*Response, error)
	// Revert the dataset to the original state
	Revert(ctx context.Context, in *RevertRequest, opts ...grpc.CallOption) (*Response, error)
}

type dataExtClient struct {
	cc *grpc.ClientConn
}

func NewDataExtClient(cc *grpc.ClientConn) DataExtClient {
	return &dataExtClient{cc}
}

func (c *dataExtClient) AddFeatures(ctx context.Context, in *AddFeaturesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/DataExt/AddFeatures", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataExtClient) RemoveFeatures(ctx context.Context, in *RemoveFeaturesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/DataExt/RemoveFeatures", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataExtClient) AddSamples(ctx context.Context, in *AddSamplesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/DataExt/AddSamples", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataExtClient) RemoveSamples(ctx context.Context, in *RemoveSamplesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/DataExt/RemoveSamples", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataExtClient) ReplaceData(ctx context.Context, in *ReplaceDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/DataExt/ReplaceData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataExtClient) Materialize(ctx context.Context, in *MaterializeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/DataExt/Materialize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataExtClient) TrainValidationSplit(ctx context.Context, in *TrainValidationSplitRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/DataExt/TrainValidationSplit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataExtClient) Revert(ctx context.Context, in *RevertRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/DataExt/Revert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataExt service

type DataExtServer interface {
	// Add and remove features to/from datasets
	AddFeatures(context.Context, *AddFeaturesRequest) (*Response, error)
	RemoveFeatures(context.Context, *RemoveFeaturesRequest) (*Response, error)
	// Add and remove records (rows) to/from datasets
	AddSamples(context.Context, *AddSamplesRequest) (*Response, error)
	RemoveSamples(context.Context, *RemoveSamplesRequest) (*Response, error)
	// Replace individual data points in a set
	ReplaceData(context.Context, *ReplaceDataRequest) (*Response, error)
	// Persist the dataset with modifications applied for future use
	Materialize(context.Context, *MaterializeRequest) (*Response, error)
	// Deterministic split of a dataset into training a validation
	// Filters out all but validation records or training records depending on is_validation
	TrainValidationSplit(context.Context, *TrainValidationSplitRequest) (*Response, error)
	// Revert the dataset to the original state
	Revert(context.Context, *RevertRequest) (*Response, error)
}

func RegisterDataExtServer(s *grpc.Server, srv DataExtServer) {
	s.RegisterService(&_DataExt_serviceDesc, srv)
}

func _DataExt_AddFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataExtServer).AddFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataExt/AddFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataExtServer).AddFeatures(ctx, req.(*AddFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataExt_RemoveFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataExtServer).RemoveFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataExt/RemoveFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataExtServer).RemoveFeatures(ctx, req.(*RemoveFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataExt_AddSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataExtServer).AddSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataExt/AddSamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataExtServer).AddSamples(ctx, req.(*AddSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataExt_RemoveSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataExtServer).RemoveSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataExt/RemoveSamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataExtServer).RemoveSamples(ctx, req.(*RemoveSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataExt_ReplaceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataExtServer).ReplaceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataExt/ReplaceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataExtServer).ReplaceData(ctx, req.(*ReplaceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataExt_Materialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataExtServer).Materialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataExt/Materialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataExtServer).Materialize(ctx, req.(*MaterializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataExt_TrainValidationSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainValidationSplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataExtServer).TrainValidationSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataExt/TrainValidationSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataExtServer).TrainValidationSplit(ctx, req.(*TrainValidationSplitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataExt_Revert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataExtServer).Revert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataExt/Revert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataExtServer).Revert(ctx, req.(*RevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataExt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DataExt",
	HandlerType: (*DataExtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFeatures",
			Handler:    _DataExt_AddFeatures_Handler,
		},
		{
			MethodName: "RemoveFeatures",
			Handler:    _DataExt_RemoveFeatures_Handler,
		},
		{
			MethodName: "AddSamples",
			Handler:    _DataExt_AddSamples_Handler,
		},
		{
			MethodName: "RemoveSamples",
			Handler:    _DataExt_RemoveSamples_Handler,
		},
		{
			MethodName: "ReplaceData",
			Handler:    _DataExt_ReplaceData_Handler,
		},
		{
			MethodName: "Materialize",
			Handler:    _DataExt_Materialize_Handler,
		},
		{
			MethodName: "TrainValidationSplit",
			Handler:    _DataExt_TrainValidationSplit_Handler,
		},
		{
			MethodName: "Revert",
			Handler:    _DataExt_Revert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_ext.proto",
}

func init() { proto.RegisterFile("data_ext.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xdd, 0x6e, 0xd3, 0x4a,
	0x10, 0x3e, 0x6e, 0x92, 0x26, 0x19, 0xa7, 0x69, 0xcf, 0xb4, 0x3d, 0xea, 0x69, 0xcf, 0x51, 0x2b,
	0x03, 0x22, 0x08, 0xd8, 0xa2, 0x16, 0x1e, 0xa0, 0x50, 0x90, 0x7a, 0xc1, 0xcd, 0x06, 0xb8, 0xe0,
	0xc6, 0x5a, 0xe2, 0xa9, 0x58, 0xc9, 0xf1, 0x9a, 0xdd, 0x4d, 0x54, 0xf5, 0x0d, 0x78, 0x01, 0xb8,
	0x86, 0xb7, 0xe0, 0x82, 0x47, 0x43, 0x42, 0xb1, 0x9d, 0xf8, 0x2f, 0x05, 0xa9, 0xa8, 0x77, 0xde,
	0xd9, 0x6f, 0x66, 0xbf, 0x99, 0xf9, 0x66, 0x0c, 0xfd, 0x40, 0x58, 0xe1, 0xd3, 0x85, 0x65, 0xb1,
	0x56, 0x56, 0xed, 0xc2, 0x48, 0x69, 0x4a, 0xbf, 0xbd, 0x11, 0xb8, 0x2f, 0x48, 0xd8, 0x89, 0xa6,
	0x53, 0x61, 0x05, 0xde, 0x87, 0xde, 0xb9, 0x56, 0x63, 0xff, 0x3c, 0xb5, 0xed, 0x38, 0x07, 0xce,
	0xc0, 0x3d, 0xea, 0xb0, 0x0c, 0xc3, 0xdd, 0xd9, 0x6d, 0x76, 0xc0, 0xbb, 0x00, 0x56, 0x2d, 0xa0,
	0x2b, 0x15, 0x68, 0xd7, 0xaa, 0xec, 0xd3, 0xfb, 0xe6, 0x00, 0x9e, 0x04, 0x41, 0x76, 0x34, 0x9c,
	0x3e, 0x4c, 0xc8, 0x58, 0xbc, 0x07, 0xed, 0x91, 0x8a, 0x2c, 0x5d, 0xd8, 0xec, 0x9d, 0x75, 0x36,
	0x24, 0x63, 0xa4, 0x8a, 0x9e, 0xa5, 0x66, 0x3e, 0xbf, 0xc7, 0x01, 0x6c, 0x24, 0xbc, 0x66, 0x99,
	0x18, 0xb2, 0xfe, 0x44, 0xcb, 0xe4, 0xc1, 0x2e, 0xef, 0xcf, 0xec, 0xa7, 0xa9, 0xf9, 0xb5, 0x96,
	0x78, 0x1b, 0xfa, 0x56, 0x95, 0x70, 0x8d, 0x04, 0xd7, 0xb3, 0xaa, 0x80, 0x1a, 0x40, 0x27, 0xe3,
	0x6d, 0x76, 0x9a, 0x07, 0x8d, 0x81, 0x7b, 0xd4, 0x63, 0x85, 0x3a, 0xf0, 0xc5, 0xad, 0xf7, 0xd1,
	0x81, 0x6d, 0x4e, 0x63, 0x35, 0xa5, 0x3f, 0xa0, 0xbf, 0x0f, 0x6e, 0x9d, 0x39, 0x04, 0x45, 0xd6,
	0x39, 0x9f, 0x46, 0xc2, 0x27, 0x2f, 0x64, 0xce, 0xe5, 0x87, 0x03, 0x7f, 0x9f, 0x04, 0xc1, 0x50,
	0x8c, 0xe3, 0xf0, 0x86, 0xcb, 0x38, 0x47, 0x6a, 0x32, 0x6a, 0xa2, 0x47, 0xe4, 0xcb, 0x20, 0x2b,
	0x64, 0x82, 0xe4, 0x99, 0xf9, 0x2c, 0x58, 0x52, 0xf0, 0xe6, 0x92, 0x82, 0xa7, 0xa8, 0x62, 0xb4,
	0xd6, 0x1c, 0x55, 0x88, 0xf5, 0x3f, 0x80, 0x49, 0x92, 0xf3, 0x65, 0x60, 0x76, 0x56, 0x0f, 0x1a,
	0x83, 0x2e, 0xef, 0xa6, 0x96, 0xb3, 0xc0, 0x78, 0x5f, 0x1d, 0xd8, 0x4a, 0x7b, 0x71, 0xfd, 0x12,
	0xfc, 0xb6, 0x15, 0xfb, 0xe0, 0xd6, 0x93, 0x06, 0x7d, 0x15, 0xc9, 0x66, 0x95, 0xe4, 0x7b, 0x58,
	0xe7, 0x14, 0x87, 0x62, 0x44, 0x63, 0x8a, 0x6c, 0x32, 0x55, 0x1e, 0xb4, 0xaf, 0x1a, 0xa8, 0xf9,
	0x05, 0xee, 0x41, 0x77, 0x11, 0x35, 0x63, 0xd5, 0x99, 0x07, 0xc5, 0x2d, 0x68, 0x4d, 0x45, 0x38,
	0xa1, 0x8c, 0x4d, 0x7a, 0xf0, 0x3e, 0x39, 0x80, 0xd9, 0x53, 0x89, 0x68, 0x6f, 0xa0, 0x18, 0x8f,
	0xa1, 0xa7, 0xf3, 0x64, 0xe6, 0xda, 0xdc, 0x60, 0x95, 0x0c, 0x79, 0x09, 0xe5, 0x7d, 0x76, 0x00,
	0x5f, 0x0a, 0x4b, 0x5a, 0x8a, 0x50, 0x5e, 0xd2, 0x35, 0x88, 0x3d, 0x00, 0xcc, 0x5a, 0x50, 0xe7,
	0xb7, 0x91, 0xde, 0x94, 0xc5, 0x1a, 0x90, 0xb1, 0x4b, 0xa6, 0xbe, 0x3f, 0xb3, 0xe7, 0x48, 0xef,
	0xbb, 0x03, 0x7b, 0xaf, 0xb4, 0x90, 0xd1, 0x1b, 0x11, 0xca, 0x40, 0x58, 0xa9, 0xa2, 0x61, 0x1c,
	0x4a, 0x7b, 0x0d, 0x8a, 0xff, 0x42, 0x67, 0x2a, 0x42, 0xdf, 0xc8, 0xcb, 0x74, 0xf7, 0xad, 0xf0,
	0xf6, 0x54, 0x84, 0x43, 0x79, 0x49, 0x88, 0xd0, 0x34, 0x44, 0xa9, 0x76, 0x5a, 0x3c, 0xf9, 0xc6,
	0x5b, 0xb0, 0x26, 0x8d, 0x3f, 0x5d, 0x3c, 0x9b, 0x4c, 0x49, 0x87, 0xf7, 0xa4, 0xc9, 0xa9, 0x54,
	0xfb, 0xd1, 0xaa, 0xf6, 0xc3, 0x7b, 0x04, 0x6b, 0x9c, 0xa6, 0xa4, 0x17, 0x84, 0x2b, 0x1e, 0x4e,
	0xd5, 0xe3, 0xe8, 0x4b, 0x03, 0xda, 0xb3, 0x02, 0x3c, 0xbf, 0xb0, 0x78, 0x08, 0x6e, 0x61, 0x0d,
	0xe3, 0x26, 0xab, 0x2f, 0xe5, 0xdd, 0x2e, 0xe3, 0x64, 0x62, 0x15, 0x19, 0xf2, 0xfe, 0xc2, 0x27,
	0xd0, 0x2f, 0xef, 0x3e, 0xfc, 0x87, 0x2d, 0x5d, 0x86, 0x65, 0xb7, 0x87, 0x00, 0xf9, 0x9a, 0x42,
	0x64, 0xb5, 0x9d, 0x55, 0x86, 0x1f, 0xcf, 0x92, 0x2a, 0x4c, 0x35, 0x6e, 0xb3, 0x65, 0x53, 0x5e,
	0x76, 0x3a, 0x04, 0xb7, 0xa0, 0x7d, 0xdc, 0x64, 0xf5, 0x49, 0xa8, 0x39, 0x14, 0x34, 0x89, 0x9b,
	0xac, 0xae, 0xd0, 0xb2, 0xc3, 0x09, 0x6c, 0x2d, 0x93, 0x0a, 0xfe, 0xc7, 0x7e, 0xa1, 0xa0, 0x72,
	0x88, 0x3b, 0xb0, 0x9a, 0xb6, 0x0b, 0xfb, 0xac, 0xd4, 0xb7, 0x12, 0xec, 0x29, 0xbc, 0xed, 0xc4,
	0x32, 0xa6, 0x50, 0x46, 0xf4, 0x6e, 0x35, 0xf9, 0x2f, 0x1f, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0xcc, 0xa9, 0x7f, 0xd2, 0xb5, 0x07, 0x00, 0x00,
}
