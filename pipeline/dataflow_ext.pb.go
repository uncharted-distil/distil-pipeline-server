// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dataflow_ext.proto

package pipeline

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ModuleResult_Status int32

const (
	ModuleResult_PENDING ModuleResult_Status = 0
	ModuleResult_RUNNING ModuleResult_Status = 1
	ModuleResult_DONE    ModuleResult_Status = 2
	ModuleResult_ERROR   ModuleResult_Status = 3
)

var ModuleResult_Status_name = map[int32]string{
	0: "PENDING",
	1: "RUNNING",
	2: "DONE",
	3: "ERROR",
}
var ModuleResult_Status_value = map[string]int32{
	"PENDING": 0,
	"RUNNING": 1,
	"DONE":    2,
	"ERROR":   3,
}

func (x ModuleResult_Status) String() string {
	return proto.EnumName(ModuleResult_Status_name, int32(x))
}
func (ModuleResult_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3, 0} }

// This is a reference to a specific machine learning pipeline, created by the
// core API.
type PipelineReference struct {
	Context    *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	PipelineId string          `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId" json:"pipeline_id,omitempty"`
}

func (m *PipelineReference) Reset()                    { *m = PipelineReference{} }
func (m *PipelineReference) String() string            { return proto.CompactTextString(m) }
func (*PipelineReference) ProtoMessage()               {}
func (*PipelineReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *PipelineReference) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *PipelineReference) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

// This message describes a dataflow's structure. Note that this only has the
// structure of the dataflow as it will be run, no runtime information or
// result is included in this message.
type DataflowDescription struct {
	ResponseInfo *Response                         `protobuf:"bytes,4,opt,name=response_info,json=responseInfo" json:"response_info,omitempty"`
	PipelineId   string                            `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId" json:"pipeline_id,omitempty"`
	Modules      []*DataflowDescription_Module     `protobuf:"bytes,2,rep,name=modules" json:"modules,omitempty"`
	Connections  []*DataflowDescription_Connection `protobuf:"bytes,3,rep,name=connections" json:"connections,omitempty"`
}

func (m *DataflowDescription) Reset()                    { *m = DataflowDescription{} }
func (m *DataflowDescription) String() string            { return proto.CompactTextString(m) }
func (*DataflowDescription) ProtoMessage()               {}
func (*DataflowDescription) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *DataflowDescription) GetResponseInfo() *Response {
	if m != nil {
		return m.ResponseInfo
	}
	return nil
}

func (m *DataflowDescription) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *DataflowDescription) GetModules() []*DataflowDescription_Module {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *DataflowDescription) GetConnections() []*DataflowDescription_Connection {
	if m != nil {
		return m.Connections
	}
	return nil
}

// An input port of a module. It has a name, a type, and an optional
// constant value (if it doesn't come from a connection).
type DataflowDescription_Input struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *DataflowDescription_Input) Reset()                    { *m = DataflowDescription_Input{} }
func (m *DataflowDescription_Input) String() string            { return proto.CompactTextString(m) }
func (*DataflowDescription_Input) ProtoMessage()               {}
func (*DataflowDescription_Input) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 0} }

func (m *DataflowDescription_Input) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataflowDescription_Input) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DataflowDescription_Input) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// An output port of a module. Has a name and a type.
type DataflowDescription_Output struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *DataflowDescription_Output) Reset()                    { *m = DataflowDescription_Output{} }
func (m *DataflowDescription_Output) String() string            { return proto.CompactTextString(m) }
func (*DataflowDescription_Output) ProtoMessage()               {}
func (*DataflowDescription_Output) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 1} }

func (m *DataflowDescription_Output) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataflowDescription_Output) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// A module, that represents a unit of computation. It has an opaque id
// unique in the dataflow, a type that references the computation that it
// performs, a human-readable label for display, and inputs and outputs.
type DataflowDescription_Module struct {
	Id      string                        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type    string                        `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Label   string                        `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	Inputs  []*DataflowDescription_Input  `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	Outputs []*DataflowDescription_Output `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
}

func (m *DataflowDescription_Module) Reset()                    { *m = DataflowDescription_Module{} }
func (m *DataflowDescription_Module) String() string            { return proto.CompactTextString(m) }
func (*DataflowDescription_Module) ProtoMessage()               {}
func (*DataflowDescription_Module) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 2} }

func (m *DataflowDescription_Module) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DataflowDescription_Module) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DataflowDescription_Module) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *DataflowDescription_Module) GetInputs() []*DataflowDescription_Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *DataflowDescription_Module) GetOutputs() []*DataflowDescription_Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

// A connection, through which data is passed down between modules.
type DataflowDescription_Connection struct {
	FromModuleId   string `protobuf:"bytes,1,opt,name=from_module_id,json=fromModuleId" json:"from_module_id,omitempty"`
	FromOutputName string `protobuf:"bytes,2,opt,name=from_output_name,json=fromOutputName" json:"from_output_name,omitempty"`
	ToModuleId     string `protobuf:"bytes,3,opt,name=to_module_id,json=toModuleId" json:"to_module_id,omitempty"`
	ToInputName    string `protobuf:"bytes,4,opt,name=to_input_name,json=toInputName" json:"to_input_name,omitempty"`
}

func (m *DataflowDescription_Connection) Reset()         { *m = DataflowDescription_Connection{} }
func (m *DataflowDescription_Connection) String() string { return proto.CompactTextString(m) }
func (*DataflowDescription_Connection) ProtoMessage()    {}
func (*DataflowDescription_Connection) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{1, 3}
}

func (m *DataflowDescription_Connection) GetFromModuleId() string {
	if m != nil {
		return m.FromModuleId
	}
	return ""
}

func (m *DataflowDescription_Connection) GetFromOutputName() string {
	if m != nil {
		return m.FromOutputName
	}
	return ""
}

func (m *DataflowDescription_Connection) GetToModuleId() string {
	if m != nil {
		return m.ToModuleId
	}
	return ""
}

func (m *DataflowDescription_Connection) GetToInputName() string {
	if m != nil {
		return m.ToInputName
	}
	return ""
}

// A value outputted by a module.
// Not all output values from a module need to be sent here, only the ones that
// you intend TA3 to display.
// Because a Module can have multiple Output ports, this part of the
// ModuleResult message can be repeated.
type ModuleOutput struct {
	OutputName string `protobuf:"bytes,1,opt,name=output_name,json=outputName" json:"output_name,omitempty"`
	Value      string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ModuleOutput) Reset()                    { *m = ModuleOutput{} }
func (m *ModuleOutput) String() string            { return proto.CompactTextString(m) }
func (*ModuleOutput) ProtoMessage()               {}
func (*ModuleOutput) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ModuleOutput) GetOutputName() string {
	if m != nil {
		return m.OutputName
	}
	return ""
}

func (m *ModuleOutput) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// This describes the status of a module's execution.
// You can get multiple ModuleResult message for the same module. The status and
// progress replace the previous values for this module, and the output_value
// replaces the previous value for that port of that module.
type ModuleResult struct {
	ResponseInfo  *Response           `protobuf:"bytes,6,opt,name=response_info,json=responseInfo" json:"response_info,omitempty"`
	ModuleId      string              `protobuf:"bytes,1,opt,name=module_id,json=moduleId" json:"module_id,omitempty"`
	Status        ModuleResult_Status `protobuf:"varint,2,opt,name=status,enum=ModuleResult_Status" json:"status,omitempty"`
	Progress      float32             `protobuf:"fixed32,3,opt,name=progress" json:"progress,omitempty"`
	Outputs       []*ModuleOutput     `protobuf:"bytes,4,rep,name=outputs" json:"outputs,omitempty"`
	ExecutionTime float32             `protobuf:"fixed32,5,opt,name=execution_time,json=executionTime" json:"execution_time,omitempty"`
}

func (m *ModuleResult) Reset()                    { *m = ModuleResult{} }
func (m *ModuleResult) String() string            { return proto.CompactTextString(m) }
func (*ModuleResult) ProtoMessage()               {}
func (*ModuleResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *ModuleResult) GetResponseInfo() *Response {
	if m != nil {
		return m.ResponseInfo
	}
	return nil
}

func (m *ModuleResult) GetModuleId() string {
	if m != nil {
		return m.ModuleId
	}
	return ""
}

func (m *ModuleResult) GetStatus() ModuleResult_Status {
	if m != nil {
		return m.Status
	}
	return ModuleResult_PENDING
}

func (m *ModuleResult) GetProgress() float32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *ModuleResult) GetOutputs() []*ModuleOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *ModuleResult) GetExecutionTime() float32 {
	if m != nil {
		return m.ExecutionTime
	}
	return 0
}

func init() {
	proto.RegisterType((*PipelineReference)(nil), "PipelineReference")
	proto.RegisterType((*DataflowDescription)(nil), "DataflowDescription")
	proto.RegisterType((*DataflowDescription_Input)(nil), "DataflowDescription.Input")
	proto.RegisterType((*DataflowDescription_Output)(nil), "DataflowDescription.Output")
	proto.RegisterType((*DataflowDescription_Module)(nil), "DataflowDescription.Module")
	proto.RegisterType((*DataflowDescription_Connection)(nil), "DataflowDescription.Connection")
	proto.RegisterType((*ModuleOutput)(nil), "ModuleOutput")
	proto.RegisterType((*ModuleResult)(nil), "ModuleResult")
	proto.RegisterEnum("ModuleResult_Status", ModuleResult_Status_name, ModuleResult_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataflowExt service

type DataflowExtClient interface {
	DescribeDataflow(ctx context.Context, in *PipelineReference, opts ...grpc.CallOption) (*DataflowDescription, error)
	GetDataflowResults(ctx context.Context, in *PipelineReference, opts ...grpc.CallOption) (DataflowExt_GetDataflowResultsClient, error)
}

type dataflowExtClient struct {
	cc *grpc.ClientConn
}

func NewDataflowExtClient(cc *grpc.ClientConn) DataflowExtClient {
	return &dataflowExtClient{cc}
}

func (c *dataflowExtClient) DescribeDataflow(ctx context.Context, in *PipelineReference, opts ...grpc.CallOption) (*DataflowDescription, error) {
	out := new(DataflowDescription)
	err := grpc.Invoke(ctx, "/DataflowExt/DescribeDataflow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataflowExtClient) GetDataflowResults(ctx context.Context, in *PipelineReference, opts ...grpc.CallOption) (DataflowExt_GetDataflowResultsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DataflowExt_serviceDesc.Streams[0], c.cc, "/DataflowExt/GetDataflowResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataflowExtGetDataflowResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataflowExt_GetDataflowResultsClient interface {
	Recv() (*ModuleResult, error)
	grpc.ClientStream
}

type dataflowExtGetDataflowResultsClient struct {
	grpc.ClientStream
}

func (x *dataflowExtGetDataflowResultsClient) Recv() (*ModuleResult, error) {
	m := new(ModuleResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DataflowExt service

type DataflowExtServer interface {
	DescribeDataflow(context.Context, *PipelineReference) (*DataflowDescription, error)
	GetDataflowResults(*PipelineReference, DataflowExt_GetDataflowResultsServer) error
}

func RegisterDataflowExtServer(s *grpc.Server, srv DataflowExtServer) {
	s.RegisterService(&_DataflowExt_serviceDesc, srv)
}

func _DataflowExt_DescribeDataflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataflowExtServer).DescribeDataflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataflowExt/DescribeDataflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataflowExtServer).DescribeDataflow(ctx, req.(*PipelineReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataflowExt_GetDataflowResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipelineReference)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataflowExtServer).GetDataflowResults(m, &dataflowExtGetDataflowResultsServer{stream})
}

type DataflowExt_GetDataflowResultsServer interface {
	Send(*ModuleResult) error
	grpc.ServerStream
}

type dataflowExtGetDataflowResultsServer struct {
	grpc.ServerStream
}

func (x *dataflowExtGetDataflowResultsServer) Send(m *ModuleResult) error {
	return x.ServerStream.SendMsg(m)
}

var _DataflowExt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DataflowExt",
	HandlerType: (*DataflowExtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeDataflow",
			Handler:    _DataflowExt_DescribeDataflow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDataflowResults",
			Handler:       _DataflowExt_GetDataflowResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dataflow_ext.proto",
}

func init() { proto.RegisterFile("dataflow_ext.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x9d, 0xc4, 0x4d, 0xc6, 0x49, 0x08, 0x43, 0x0f, 0x96, 0x7b, 0x68, 0x64, 0x81, 0x08,
	0x12, 0xb2, 0xaa, 0x20, 0xc4, 0x01, 0x09, 0x09, 0x9a, 0xa8, 0xca, 0x81, 0xb4, 0xda, 0xc2, 0x85,
	0x8b, 0x95, 0x3a, 0x13, 0x64, 0xc9, 0xf1, 0x5a, 0xde, 0x35, 0x84, 0xbf, 0xc0, 0xcf, 0xe0, 0x4e,
	0x7f, 0x23, 0xf2, 0xae, 0xed, 0x84, 0x34, 0x54, 0xe2, 0xb6, 0x3b, 0x5f, 0x6f, 0xdf, 0x7b, 0xa3,
	0x05, 0x5c, 0x2e, 0xe4, 0x62, 0x15, 0xf3, 0xef, 0x01, 0x6d, 0xa4, 0x9f, 0x66, 0x5c, 0x72, 0x17,
	0x42, 0x9e, 0x91, 0x3e, 0x7b, 0x01, 0x3c, 0xbe, 0x8e, 0x52, 0x8a, 0xa3, 0x84, 0x18, 0xad, 0x28,
	0xa3, 0x24, 0x24, 0x7c, 0x01, 0xc7, 0x21, 0x4f, 0x24, 0x6d, 0xa4, 0x63, 0x0c, 0x8d, 0x91, 0x3d,
	0x7e, 0xe4, 0xdf, 0x90, 0x10, 0x11, 0x4f, 0x2e, 0x74, 0x98, 0x55, 0x79, 0x3c, 0x03, 0x3b, 0x2d,
	0xfb, 0x83, 0x68, 0xe9, 0x98, 0x43, 0x63, 0xd4, 0x61, 0x50, 0x85, 0x66, 0x4b, 0xef, 0xae, 0x05,
	0x4f, 0x26, 0xe5, 0x1b, 0x26, 0x24, 0xc2, 0x2c, 0x4a, 0x65, 0xc4, 0x13, 0xf4, 0xa1, 0x97, 0x91,
	0x48, 0x79, 0x22, 0x28, 0x88, 0x92, 0x15, 0x77, 0x9a, 0x0a, 0xa9, 0xe3, 0xb3, 0x32, 0xca, 0xba,
	0x55, 0x7e, 0x96, 0xac, 0xf8, 0x3e, 0x90, 0xb1, 0x0f, 0x84, 0xaf, 0xe1, 0x78, 0xcd, 0x97, 0x79,
	0x4c, 0xc2, 0x31, 0x87, 0x8d, 0x91, 0x3d, 0x3e, 0xf5, 0x0f, 0xe0, 0xfa, 0x1f, 0x55, 0x0d, 0xab,
	0x6a, 0xf1, 0x3d, 0xd8, 0x21, 0x4f, 0x12, 0x0a, 0x8b, 0xac, 0x70, 0x1a, 0xaa, 0xf5, 0xec, 0x60,
	0xeb, 0x45, 0x5d, 0xc7, 0x76, 0x7b, 0xdc, 0x29, 0xb4, 0x66, 0x49, 0x9a, 0x4b, 0x44, 0x68, 0x26,
	0x8b, 0x35, 0x95, 0x8f, 0x53, 0xe7, 0x22, 0x26, 0x7f, 0xa4, 0x54, 0x2a, 0xa3, 0xce, 0x78, 0x02,
	0xad, 0x6f, 0x8b, 0x38, 0x27, 0xa7, 0xa1, 0x82, 0xfa, 0xe2, 0x9e, 0x83, 0x75, 0x95, 0xcb, 0xff,
	0x98, 0xe3, 0xfe, 0x36, 0xc0, 0xd2, 0x7c, 0xb0, 0x0f, 0x66, 0xad, 0x8a, 0x19, 0x2d, 0xff, 0x05,
	0x1b, 0x2f, 0x6e, 0x29, 0xae, 0x60, 0xd5, 0x05, 0xc7, 0x60, 0x45, 0xc5, 0xeb, 0x85, 0xd3, 0x54,
	0xdc, 0xdd, 0x83, 0xdc, 0x15, 0x41, 0x56, 0x56, 0x16, 0x5a, 0x73, 0xf5, 0x54, 0xe1, 0xb4, 0x1e,
	0xd0, 0x5a, 0xd3, 0x61, 0x55, 0xad, 0xfb, 0xcb, 0x00, 0xd8, 0x8a, 0x88, 0x4f, 0xa1, 0xbf, 0xca,
	0xf8, 0x3a, 0xd0, 0x56, 0x6c, 0x5d, 0xed, 0x16, 0x51, 0xcd, 0x6b, 0xb6, 0xc4, 0x11, 0x0c, 0x54,
	0x95, 0x1e, 0x12, 0x28, 0x61, 0x34, 0x2b, 0xd5, 0xad, 0x31, 0xe6, 0x85, 0x44, 0x43, 0xe8, 0x4a,
	0xbe, 0x33, 0x4d, 0xd3, 0x04, 0xc9, 0xeb, 0x59, 0x1e, 0xf4, 0x24, 0x0f, 0x14, 0x09, 0x3d, 0xa8,
	0xa9, 0x4a, 0x6c, 0xc9, 0x15, 0xbf, 0x62, 0x8a, 0x37, 0x85, 0xae, 0xae, 0x2f, 0xcd, 0x38, 0x03,
	0x7b, 0x17, 0xba, 0x5c, 0x3c, 0xbe, 0x85, 0xad, 0xdd, 0x34, 0x77, 0xdc, 0xf4, 0xee, 0xcc, 0x6a,
	0x0e, 0x23, 0x91, 0xc7, 0xf2, 0xfe, 0xc2, 0x5b, 0x0f, 0x2f, 0xfc, 0x29, 0x74, 0xf6, 0x85, 0x69,
	0xaf, 0x2b, 0x22, 0x2f, 0xc1, 0x12, 0x72, 0x21, 0x73, 0xa1, 0x40, 0xfb, 0xe3, 0x13, 0x7f, 0x17,
	0xcb, 0xbf, 0x51, 0x39, 0x56, 0xd6, 0xa0, 0x0b, 0xed, 0x34, 0xe3, 0x5f, 0x33, 0x12, 0x42, 0x89,
	0x62, 0xb2, 0xfa, 0x8e, 0xcf, 0xb7, 0x56, 0x6a, 0xff, 0x7b, 0xfe, 0x2e, 0xfd, 0xda, 0x3c, 0x7c,
	0x06, 0x7d, 0xda, 0x50, 0x98, 0x17, 0xd6, 0x05, 0x32, 0x5a, 0x93, 0xd3, 0x52, 0xa3, 0x7a, 0x75,
	0xf4, 0x53, 0xb4, 0x26, 0xef, 0x0d, 0x58, 0x1a, 0x1d, 0x6d, 0x38, 0xbe, 0x9e, 0xce, 0x27, 0xb3,
	0xf9, 0xe5, 0xe0, 0xa8, 0xb8, 0xb0, 0xcf, 0xf3, 0x79, 0x71, 0x31, 0xb0, 0x0d, 0xcd, 0xc9, 0xd5,
	0x7c, 0x3a, 0x30, 0xb1, 0x03, 0xad, 0x29, 0x63, 0x57, 0x6c, 0xd0, 0x18, 0xff, 0x34, 0xc0, 0xae,
	0x96, 0x68, 0xba, 0x91, 0xf8, 0x0e, 0x06, 0x7a, 0x97, 0x6e, 0xa9, 0x0a, 0x23, 0xfa, 0xf7, 0x3e,
	0x2b, 0xf7, 0xe4, 0xd0, 0xea, 0x79, 0x47, 0xf8, 0x16, 0xf0, 0x92, 0x64, 0x95, 0xd3, 0xc2, 0x88,
	0x83, 0x13, 0x7a, 0x7f, 0x89, 0xe7, 0x1d, 0x9d, 0x1b, 0x1f, 0xe0, 0x4b, 0xbb, 0xfa, 0x5a, 0x6e,
	0x2d, 0xf5, 0x53, 0xbe, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0x49, 0x67, 0x45, 0x88, 0x4b, 0x05,
	0x00, 0x00,
}
