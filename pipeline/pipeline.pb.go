// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipeline.proto

package pipeline

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PipelineContext int32

const (
	// Default value. Not to be used.
	PipelineContext_PIPELINE_CONTEXT_UNKNOWN PipelineContext = 0
	// Pipeline was created during building/training of the system itself, e.g., during metalearning.
	PipelineContext_PRETRAINING PipelineContext = 1
	// Pipeline was created during development or testing of the system itself, e.g., during debugging.
	PipelineContext_TESTING PipelineContext = 2
	// Pipeline was created during evaluation of the system itself, e.g., NIST blind evaluation.
	PipelineContext_EVALUATION PipelineContext = 3
	// Pipeline was created during regular (production) operation of the system.
	PipelineContext_PRODUCTION PipelineContext = 4
)

var PipelineContext_name = map[int32]string{
	0: "PIPELINE_CONTEXT_UNKNOWN",
	1: "PRETRAINING",
	2: "TESTING",
	3: "EVALUATION",
	4: "PRODUCTION",
}
var PipelineContext_value = map[string]int32{
	"PIPELINE_CONTEXT_UNKNOWN": 0,
	"PRETRAINING":              1,
	"TESTING":                  2,
	"EVALUATION":               3,
	"PRODUCTION":               4,
}

func (x PipelineContext) String() string {
	return proto.EnumName(PipelineContext_name, int32(x))
}
func (PipelineContext) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{0}
}

type ContainerArgument struct {
	// Data reference.
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerArgument) Reset()         { *m = ContainerArgument{} }
func (m *ContainerArgument) String() string { return proto.CompactTextString(m) }
func (*ContainerArgument) ProtoMessage()    {}
func (*ContainerArgument) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{0}
}
func (m *ContainerArgument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerArgument.Unmarshal(m, b)
}
func (m *ContainerArgument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerArgument.Marshal(b, m, deterministic)
}
func (dst *ContainerArgument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerArgument.Merge(dst, src)
}
func (m *ContainerArgument) XXX_Size() int {
	return xxx_messageInfo_ContainerArgument.Size(m)
}
func (m *ContainerArgument) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerArgument.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerArgument proto.InternalMessageInfo

func (m *ContainerArgument) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type DataArgument struct {
	// Data reference.
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataArgument) Reset()         { *m = DataArgument{} }
func (m *DataArgument) String() string { return proto.CompactTextString(m) }
func (*DataArgument) ProtoMessage()    {}
func (*DataArgument) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{1}
}
func (m *DataArgument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataArgument.Unmarshal(m, b)
}
func (m *DataArgument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataArgument.Marshal(b, m, deterministic)
}
func (dst *DataArgument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataArgument.Merge(dst, src)
}
func (m *DataArgument) XXX_Size() int {
	return xxx_messageInfo_DataArgument.Size(m)
}
func (m *DataArgument) XXX_DiscardUnknown() {
	xxx_messageInfo_DataArgument.DiscardUnknown(m)
}

var xxx_messageInfo_DataArgument proto.InternalMessageInfo

func (m *DataArgument) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type DataArguments struct {
	Data                 []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataArguments) Reset()         { *m = DataArguments{} }
func (m *DataArguments) String() string { return proto.CompactTextString(m) }
func (*DataArguments) ProtoMessage()    {}
func (*DataArguments) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{2}
}
func (m *DataArguments) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataArguments.Unmarshal(m, b)
}
func (m *DataArguments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataArguments.Marshal(b, m, deterministic)
}
func (dst *DataArguments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataArguments.Merge(dst, src)
}
func (m *DataArguments) XXX_Size() int {
	return xxx_messageInfo_DataArguments.Size(m)
}
func (m *DataArguments) XXX_DiscardUnknown() {
	xxx_messageInfo_DataArguments.DiscardUnknown(m)
}

var xxx_messageInfo_DataArguments proto.InternalMessageInfo

func (m *DataArguments) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type PrimitiveArgument struct {
	// 0-based index identifying a step of which primitive is used as a value.
	Data                 int32    `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimitiveArgument) Reset()         { *m = PrimitiveArgument{} }
func (m *PrimitiveArgument) String() string { return proto.CompactTextString(m) }
func (*PrimitiveArgument) ProtoMessage()    {}
func (*PrimitiveArgument) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{3}
}
func (m *PrimitiveArgument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimitiveArgument.Unmarshal(m, b)
}
func (m *PrimitiveArgument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimitiveArgument.Marshal(b, m, deterministic)
}
func (dst *PrimitiveArgument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveArgument.Merge(dst, src)
}
func (m *PrimitiveArgument) XXX_Size() int {
	return xxx_messageInfo_PrimitiveArgument.Size(m)
}
func (m *PrimitiveArgument) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveArgument.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveArgument proto.InternalMessageInfo

func (m *PrimitiveArgument) GetData() int32 {
	if m != nil {
		return m.Data
	}
	return 0
}

type PrimitiveArguments struct {
	// 0-based index identifying a step of which primitive is used as a value.
	Data                 []int32  `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimitiveArguments) Reset()         { *m = PrimitiveArguments{} }
func (m *PrimitiveArguments) String() string { return proto.CompactTextString(m) }
func (*PrimitiveArguments) ProtoMessage()    {}
func (*PrimitiveArguments) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{4}
}
func (m *PrimitiveArguments) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimitiveArguments.Unmarshal(m, b)
}
func (m *PrimitiveArguments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimitiveArguments.Marshal(b, m, deterministic)
}
func (dst *PrimitiveArguments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveArguments.Merge(dst, src)
}
func (m *PrimitiveArguments) XXX_Size() int {
	return xxx_messageInfo_PrimitiveArguments.Size(m)
}
func (m *PrimitiveArguments) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveArguments.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveArguments proto.InternalMessageInfo

func (m *PrimitiveArguments) GetData() []int32 {
	if m != nil {
		return m.Data
	}
	return nil
}

type ValueArgument struct {
	Data                 *Value   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValueArgument) Reset()         { *m = ValueArgument{} }
func (m *ValueArgument) String() string { return proto.CompactTextString(m) }
func (*ValueArgument) ProtoMessage()    {}
func (*ValueArgument) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{5}
}
func (m *ValueArgument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValueArgument.Unmarshal(m, b)
}
func (m *ValueArgument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValueArgument.Marshal(b, m, deterministic)
}
func (dst *ValueArgument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueArgument.Merge(dst, src)
}
func (m *ValueArgument) XXX_Size() int {
	return xxx_messageInfo_ValueArgument.Size(m)
}
func (m *ValueArgument) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueArgument.DiscardUnknown(m)
}

var xxx_messageInfo_ValueArgument proto.InternalMessageInfo

func (m *ValueArgument) GetData() *Value {
	if m != nil {
		return m.Data
	}
	return nil
}

type PrimitiveStepArgument struct {
	// Types that are valid to be assigned to Argument:
	//	*PrimitiveStepArgument_Container
	//	*PrimitiveStepArgument_Data
	Argument             isPrimitiveStepArgument_Argument `protobuf_oneof:"argument"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PrimitiveStepArgument) Reset()         { *m = PrimitiveStepArgument{} }
func (m *PrimitiveStepArgument) String() string { return proto.CompactTextString(m) }
func (*PrimitiveStepArgument) ProtoMessage()    {}
func (*PrimitiveStepArgument) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{6}
}
func (m *PrimitiveStepArgument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimitiveStepArgument.Unmarshal(m, b)
}
func (m *PrimitiveStepArgument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimitiveStepArgument.Marshal(b, m, deterministic)
}
func (dst *PrimitiveStepArgument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveStepArgument.Merge(dst, src)
}
func (m *PrimitiveStepArgument) XXX_Size() int {
	return xxx_messageInfo_PrimitiveStepArgument.Size(m)
}
func (m *PrimitiveStepArgument) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveStepArgument.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveStepArgument proto.InternalMessageInfo

type isPrimitiveStepArgument_Argument interface {
	isPrimitiveStepArgument_Argument()
}

type PrimitiveStepArgument_Container struct {
	Container *ContainerArgument `protobuf:"bytes,1,opt,name=container,proto3,oneof"`
}
type PrimitiveStepArgument_Data struct {
	Data *DataArgument `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*PrimitiveStepArgument_Container) isPrimitiveStepArgument_Argument() {}
func (*PrimitiveStepArgument_Data) isPrimitiveStepArgument_Argument()      {}

func (m *PrimitiveStepArgument) GetArgument() isPrimitiveStepArgument_Argument {
	if m != nil {
		return m.Argument
	}
	return nil
}

func (m *PrimitiveStepArgument) GetContainer() *ContainerArgument {
	if x, ok := m.GetArgument().(*PrimitiveStepArgument_Container); ok {
		return x.Container
	}
	return nil
}

func (m *PrimitiveStepArgument) GetData() *DataArgument {
	if x, ok := m.GetArgument().(*PrimitiveStepArgument_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PrimitiveStepArgument) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PrimitiveStepArgument_OneofMarshaler, _PrimitiveStepArgument_OneofUnmarshaler, _PrimitiveStepArgument_OneofSizer, []interface{}{
		(*PrimitiveStepArgument_Container)(nil),
		(*PrimitiveStepArgument_Data)(nil),
	}
}

func _PrimitiveStepArgument_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PrimitiveStepArgument)
	// argument
	switch x := m.Argument.(type) {
	case *PrimitiveStepArgument_Container:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Container); err != nil {
			return err
		}
	case *PrimitiveStepArgument_Data:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PrimitiveStepArgument.Argument has unexpected type %T", x)
	}
	return nil
}

func _PrimitiveStepArgument_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PrimitiveStepArgument)
	switch tag {
	case 1: // argument.container
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContainerArgument)
		err := b.DecodeMessage(msg)
		m.Argument = &PrimitiveStepArgument_Container{msg}
		return true, err
	case 2: // argument.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataArgument)
		err := b.DecodeMessage(msg)
		m.Argument = &PrimitiveStepArgument_Data{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PrimitiveStepArgument_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PrimitiveStepArgument)
	// argument
	switch x := m.Argument.(type) {
	case *PrimitiveStepArgument_Container:
		s := proto.Size(x.Container)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PrimitiveStepArgument_Data:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PrimitiveStepHyperparameter struct {
	// Types that are valid to be assigned to Argument:
	//	*PrimitiveStepHyperparameter_Container
	//	*PrimitiveStepHyperparameter_Data
	//	*PrimitiveStepHyperparameter_Primitive
	//	*PrimitiveStepHyperparameter_Value
	//	*PrimitiveStepHyperparameter_DataSet
	//	*PrimitiveStepHyperparameter_PrimitivesSet
	Argument             isPrimitiveStepHyperparameter_Argument `protobuf_oneof:"argument"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *PrimitiveStepHyperparameter) Reset()         { *m = PrimitiveStepHyperparameter{} }
func (m *PrimitiveStepHyperparameter) String() string { return proto.CompactTextString(m) }
func (*PrimitiveStepHyperparameter) ProtoMessage()    {}
func (*PrimitiveStepHyperparameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{7}
}
func (m *PrimitiveStepHyperparameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimitiveStepHyperparameter.Unmarshal(m, b)
}
func (m *PrimitiveStepHyperparameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimitiveStepHyperparameter.Marshal(b, m, deterministic)
}
func (dst *PrimitiveStepHyperparameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveStepHyperparameter.Merge(dst, src)
}
func (m *PrimitiveStepHyperparameter) XXX_Size() int {
	return xxx_messageInfo_PrimitiveStepHyperparameter.Size(m)
}
func (m *PrimitiveStepHyperparameter) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveStepHyperparameter.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveStepHyperparameter proto.InternalMessageInfo

type isPrimitiveStepHyperparameter_Argument interface {
	isPrimitiveStepHyperparameter_Argument()
}

type PrimitiveStepHyperparameter_Container struct {
	Container *ContainerArgument `protobuf:"bytes,1,opt,name=container,proto3,oneof"`
}
type PrimitiveStepHyperparameter_Data struct {
	Data *DataArgument `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}
type PrimitiveStepHyperparameter_Primitive struct {
	Primitive *PrimitiveArgument `protobuf:"bytes,3,opt,name=primitive,proto3,oneof"`
}
type PrimitiveStepHyperparameter_Value struct {
	Value *ValueArgument `protobuf:"bytes,4,opt,name=value,proto3,oneof"`
}
type PrimitiveStepHyperparameter_DataSet struct {
	DataSet *DataArguments `protobuf:"bytes,5,opt,name=data_set,json=dataSet,proto3,oneof"`
}
type PrimitiveStepHyperparameter_PrimitivesSet struct {
	PrimitivesSet *PrimitiveArguments `protobuf:"bytes,6,opt,name=primitives_set,json=primitivesSet,proto3,oneof"`
}

func (*PrimitiveStepHyperparameter_Container) isPrimitiveStepHyperparameter_Argument()     {}
func (*PrimitiveStepHyperparameter_Data) isPrimitiveStepHyperparameter_Argument()          {}
func (*PrimitiveStepHyperparameter_Primitive) isPrimitiveStepHyperparameter_Argument()     {}
func (*PrimitiveStepHyperparameter_Value) isPrimitiveStepHyperparameter_Argument()         {}
func (*PrimitiveStepHyperparameter_DataSet) isPrimitiveStepHyperparameter_Argument()       {}
func (*PrimitiveStepHyperparameter_PrimitivesSet) isPrimitiveStepHyperparameter_Argument() {}

func (m *PrimitiveStepHyperparameter) GetArgument() isPrimitiveStepHyperparameter_Argument {
	if m != nil {
		return m.Argument
	}
	return nil
}

func (m *PrimitiveStepHyperparameter) GetContainer() *ContainerArgument {
	if x, ok := m.GetArgument().(*PrimitiveStepHyperparameter_Container); ok {
		return x.Container
	}
	return nil
}

func (m *PrimitiveStepHyperparameter) GetData() *DataArgument {
	if x, ok := m.GetArgument().(*PrimitiveStepHyperparameter_Data); ok {
		return x.Data
	}
	return nil
}

func (m *PrimitiveStepHyperparameter) GetPrimitive() *PrimitiveArgument {
	if x, ok := m.GetArgument().(*PrimitiveStepHyperparameter_Primitive); ok {
		return x.Primitive
	}
	return nil
}

func (m *PrimitiveStepHyperparameter) GetValue() *ValueArgument {
	if x, ok := m.GetArgument().(*PrimitiveStepHyperparameter_Value); ok {
		return x.Value
	}
	return nil
}

func (m *PrimitiveStepHyperparameter) GetDataSet() *DataArguments {
	if x, ok := m.GetArgument().(*PrimitiveStepHyperparameter_DataSet); ok {
		return x.DataSet
	}
	return nil
}

func (m *PrimitiveStepHyperparameter) GetPrimitivesSet() *PrimitiveArguments {
	if x, ok := m.GetArgument().(*PrimitiveStepHyperparameter_PrimitivesSet); ok {
		return x.PrimitivesSet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PrimitiveStepHyperparameter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PrimitiveStepHyperparameter_OneofMarshaler, _PrimitiveStepHyperparameter_OneofUnmarshaler, _PrimitiveStepHyperparameter_OneofSizer, []interface{}{
		(*PrimitiveStepHyperparameter_Container)(nil),
		(*PrimitiveStepHyperparameter_Data)(nil),
		(*PrimitiveStepHyperparameter_Primitive)(nil),
		(*PrimitiveStepHyperparameter_Value)(nil),
		(*PrimitiveStepHyperparameter_DataSet)(nil),
		(*PrimitiveStepHyperparameter_PrimitivesSet)(nil),
	}
}

func _PrimitiveStepHyperparameter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PrimitiveStepHyperparameter)
	// argument
	switch x := m.Argument.(type) {
	case *PrimitiveStepHyperparameter_Container:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Container); err != nil {
			return err
		}
	case *PrimitiveStepHyperparameter_Data:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case *PrimitiveStepHyperparameter_Primitive:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Primitive); err != nil {
			return err
		}
	case *PrimitiveStepHyperparameter_Value:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Value); err != nil {
			return err
		}
	case *PrimitiveStepHyperparameter_DataSet:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataSet); err != nil {
			return err
		}
	case *PrimitiveStepHyperparameter_PrimitivesSet:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrimitivesSet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PrimitiveStepHyperparameter.Argument has unexpected type %T", x)
	}
	return nil
}

func _PrimitiveStepHyperparameter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PrimitiveStepHyperparameter)
	switch tag {
	case 1: // argument.container
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContainerArgument)
		err := b.DecodeMessage(msg)
		m.Argument = &PrimitiveStepHyperparameter_Container{msg}
		return true, err
	case 2: // argument.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataArgument)
		err := b.DecodeMessage(msg)
		m.Argument = &PrimitiveStepHyperparameter_Data{msg}
		return true, err
	case 3: // argument.primitive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrimitiveArgument)
		err := b.DecodeMessage(msg)
		m.Argument = &PrimitiveStepHyperparameter_Primitive{msg}
		return true, err
	case 4: // argument.value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ValueArgument)
		err := b.DecodeMessage(msg)
		m.Argument = &PrimitiveStepHyperparameter_Value{msg}
		return true, err
	case 5: // argument.data_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataArguments)
		err := b.DecodeMessage(msg)
		m.Argument = &PrimitiveStepHyperparameter_DataSet{msg}
		return true, err
	case 6: // argument.primitives_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrimitiveArguments)
		err := b.DecodeMessage(msg)
		m.Argument = &PrimitiveStepHyperparameter_PrimitivesSet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PrimitiveStepHyperparameter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PrimitiveStepHyperparameter)
	// argument
	switch x := m.Argument.(type) {
	case *PrimitiveStepHyperparameter_Container:
		s := proto.Size(x.Container)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PrimitiveStepHyperparameter_Data:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PrimitiveStepHyperparameter_Primitive:
		s := proto.Size(x.Primitive)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PrimitiveStepHyperparameter_Value:
		s := proto.Size(x.Value)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PrimitiveStepHyperparameter_DataSet:
		s := proto.Size(x.DataSet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PrimitiveStepHyperparameter_PrimitivesSet:
		s := proto.Size(x.PrimitivesSet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StepInput struct {
	// Data reference.
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StepInput) Reset()         { *m = StepInput{} }
func (m *StepInput) String() string { return proto.CompactTextString(m) }
func (*StepInput) ProtoMessage()    {}
func (*StepInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{8}
}
func (m *StepInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StepInput.Unmarshal(m, b)
}
func (m *StepInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StepInput.Marshal(b, m, deterministic)
}
func (dst *StepInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepInput.Merge(dst, src)
}
func (m *StepInput) XXX_Size() int {
	return xxx_messageInfo_StepInput.Size(m)
}
func (m *StepInput) XXX_DiscardUnknown() {
	xxx_messageInfo_StepInput.DiscardUnknown(m)
}

var xxx_messageInfo_StepInput proto.InternalMessageInfo

func (m *StepInput) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type StepOutput struct {
	// Name which becomes part of the data reference.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StepOutput) Reset()         { *m = StepOutput{} }
func (m *StepOutput) String() string { return proto.CompactTextString(m) }
func (*StepOutput) ProtoMessage()    {}
func (*StepOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{9}
}
func (m *StepOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StepOutput.Unmarshal(m, b)
}
func (m *StepOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StepOutput.Marshal(b, m, deterministic)
}
func (dst *StepOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepOutput.Merge(dst, src)
}
func (m *StepOutput) XXX_Size() int {
	return xxx_messageInfo_StepOutput.Size(m)
}
func (m *StepOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_StepOutput.DiscardUnknown(m)
}

var xxx_messageInfo_StepOutput proto.InternalMessageInfo

func (m *StepOutput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PipelineSource struct {
	// String representing name of the author, team.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// An URI to contact the source.
	Contact string `protobuf:"bytes,2,opt,name=contact,proto3" json:"contact,omitempty"`
	// A list of pipeline IDs used to derive the pipeline.
	Pipelines            []string `protobuf:"bytes,3,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineSource) Reset()         { *m = PipelineSource{} }
func (m *PipelineSource) String() string { return proto.CompactTextString(m) }
func (*PipelineSource) ProtoMessage()    {}
func (*PipelineSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{10}
}
func (m *PipelineSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineSource.Unmarshal(m, b)
}
func (m *PipelineSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineSource.Marshal(b, m, deterministic)
}
func (dst *PipelineSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineSource.Merge(dst, src)
}
func (m *PipelineSource) XXX_Size() int {
	return xxx_messageInfo_PipelineSource.Size(m)
}
func (m *PipelineSource) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineSource.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineSource proto.InternalMessageInfo

func (m *PipelineSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PipelineSource) GetContact() string {
	if m != nil {
		return m.Contact
	}
	return ""
}

func (m *PipelineSource) GetPipelines() []string {
	if m != nil {
		return m.Pipelines
	}
	return nil
}

// User associated with the creation of the template/pipeline, or selection of a primitive.
type PipelineDescriptionUser struct {
	// Globally unique ID for this user. It can be opaque, but it should identify the same user
	// across sessions. Consider using UUID variant 5 with namespace set to the name of your system
	// and name to an ID in your system's database. It does not have to map to any real ID, just
	// that it is possible to connect mutliple pipelines/templates by the same user together,
	// if necessary.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A natural language description of what the user did to be on the list, e.g., "Picked
	// a pipeline from a list of pipelines.".
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// A natural language description by the user of what the user did,
	// e.g., "I picked a pipeline because it looks short in comparison with others.".
	Rationale            string   `protobuf:"bytes,3,opt,name=rationale,proto3" json:"rationale,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineDescriptionUser) Reset()         { *m = PipelineDescriptionUser{} }
func (m *PipelineDescriptionUser) String() string { return proto.CompactTextString(m) }
func (*PipelineDescriptionUser) ProtoMessage()    {}
func (*PipelineDescriptionUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{11}
}
func (m *PipelineDescriptionUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineDescriptionUser.Unmarshal(m, b)
}
func (m *PipelineDescriptionUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineDescriptionUser.Marshal(b, m, deterministic)
}
func (dst *PipelineDescriptionUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineDescriptionUser.Merge(dst, src)
}
func (m *PipelineDescriptionUser) XXX_Size() int {
	return xxx_messageInfo_PipelineDescriptionUser.Size(m)
}
func (m *PipelineDescriptionUser) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineDescriptionUser.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineDescriptionUser proto.InternalMessageInfo

func (m *PipelineDescriptionUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PipelineDescriptionUser) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PipelineDescriptionUser) GetRationale() string {
	if m != nil {
		return m.Rationale
	}
	return ""
}

// Possible input to the pipeline or template.
type PipelineDescriptionInput struct {
	// Human friendly name of the input.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineDescriptionInput) Reset()         { *m = PipelineDescriptionInput{} }
func (m *PipelineDescriptionInput) String() string { return proto.CompactTextString(m) }
func (*PipelineDescriptionInput) ProtoMessage()    {}
func (*PipelineDescriptionInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{12}
}
func (m *PipelineDescriptionInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineDescriptionInput.Unmarshal(m, b)
}
func (m *PipelineDescriptionInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineDescriptionInput.Marshal(b, m, deterministic)
}
func (dst *PipelineDescriptionInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineDescriptionInput.Merge(dst, src)
}
func (m *PipelineDescriptionInput) XXX_Size() int {
	return xxx_messageInfo_PipelineDescriptionInput.Size(m)
}
func (m *PipelineDescriptionInput) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineDescriptionInput.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineDescriptionInput proto.InternalMessageInfo

func (m *PipelineDescriptionInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Available output of the pipeline or template.
type PipelineDescriptionOutput struct {
	// Human friendly name of the output.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Data reference, probably of an output of a step.
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineDescriptionOutput) Reset()         { *m = PipelineDescriptionOutput{} }
func (m *PipelineDescriptionOutput) String() string { return proto.CompactTextString(m) }
func (*PipelineDescriptionOutput) ProtoMessage()    {}
func (*PipelineDescriptionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{13}
}
func (m *PipelineDescriptionOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineDescriptionOutput.Unmarshal(m, b)
}
func (m *PipelineDescriptionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineDescriptionOutput.Marshal(b, m, deterministic)
}
func (dst *PipelineDescriptionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineDescriptionOutput.Merge(dst, src)
}
func (m *PipelineDescriptionOutput) XXX_Size() int {
	return xxx_messageInfo_PipelineDescriptionOutput.Size(m)
}
func (m *PipelineDescriptionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineDescriptionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineDescriptionOutput proto.InternalMessageInfo

func (m *PipelineDescriptionOutput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PipelineDescriptionOutput) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type PrimitivePipelineDescriptionStep struct {
	Primitive *Primitive `protobuf:"bytes,1,opt,name=primitive,proto3" json:"primitive,omitempty"`
	// Arguments to the primitive. Constructor arguments should not be listed here, because they
	// can be automatically created from other information. All these arguments are listed as kind
	// "PIPELINE" in primitive's metadata.
	Arguments map[string]*PrimitiveStepArgument `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of produce metods providing data. One can reference using data reference these outputs
	// then in arguments (inputs) in other steps or pipeline outputs.
	Outputs []*StepOutput `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Some hyper-parameters are not really tunable and should be fixed as part of template/pipeline.
	// This can be done here. Hyper-parameters listed here cannot be tuned or overridden. Author of a
	// template/pipeline decides which hyper-parameter are which, probably based on their semantic type.
	// TA3 can specify a list of hyper-parameters to fix, and TA2 can add to the list additional
	// hyper-paramaters in found pipelines.
	Hyperparams map[string]*PrimitiveStepHyperparameter `protobuf:"bytes,4,rep,name=hyperparams,proto3" json:"hyperparams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of users associated with selection of this primitive/arguments/hyper-parameters. Optional.
	Users                []*PipelineDescriptionUser `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PrimitivePipelineDescriptionStep) Reset()         { *m = PrimitivePipelineDescriptionStep{} }
func (m *PrimitivePipelineDescriptionStep) String() string { return proto.CompactTextString(m) }
func (*PrimitivePipelineDescriptionStep) ProtoMessage()    {}
func (*PrimitivePipelineDescriptionStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{14}
}
func (m *PrimitivePipelineDescriptionStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimitivePipelineDescriptionStep.Unmarshal(m, b)
}
func (m *PrimitivePipelineDescriptionStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimitivePipelineDescriptionStep.Marshal(b, m, deterministic)
}
func (dst *PrimitivePipelineDescriptionStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitivePipelineDescriptionStep.Merge(dst, src)
}
func (m *PrimitivePipelineDescriptionStep) XXX_Size() int {
	return xxx_messageInfo_PrimitivePipelineDescriptionStep.Size(m)
}
func (m *PrimitivePipelineDescriptionStep) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitivePipelineDescriptionStep.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitivePipelineDescriptionStep proto.InternalMessageInfo

func (m *PrimitivePipelineDescriptionStep) GetPrimitive() *Primitive {
	if m != nil {
		return m.Primitive
	}
	return nil
}

func (m *PrimitivePipelineDescriptionStep) GetArguments() map[string]*PrimitiveStepArgument {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *PrimitivePipelineDescriptionStep) GetOutputs() []*StepOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *PrimitivePipelineDescriptionStep) GetHyperparams() map[string]*PrimitiveStepHyperparameter {
	if m != nil {
		return m.Hyperparams
	}
	return nil
}

func (m *PrimitivePipelineDescriptionStep) GetUsers() []*PipelineDescriptionUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type SubpipelinePipelineDescriptionStep struct {
	// Only "id" field is required in this case to reference another pipeline in the template.
	Pipeline *PipelineDescription `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// List of data references, probably of an output of a step or pipeline input,
	// mapped to sub-pipeline's inputs in order.
	Inputs []*StepInput `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// List of IDs to be used in data references, mapping sub-pipeline's outputs in order.
	Outputs              []*StepOutput `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SubpipelinePipelineDescriptionStep) Reset()         { *m = SubpipelinePipelineDescriptionStep{} }
func (m *SubpipelinePipelineDescriptionStep) String() string { return proto.CompactTextString(m) }
func (*SubpipelinePipelineDescriptionStep) ProtoMessage()    {}
func (*SubpipelinePipelineDescriptionStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{15}
}
func (m *SubpipelinePipelineDescriptionStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubpipelinePipelineDescriptionStep.Unmarshal(m, b)
}
func (m *SubpipelinePipelineDescriptionStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubpipelinePipelineDescriptionStep.Marshal(b, m, deterministic)
}
func (dst *SubpipelinePipelineDescriptionStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubpipelinePipelineDescriptionStep.Merge(dst, src)
}
func (m *SubpipelinePipelineDescriptionStep) XXX_Size() int {
	return xxx_messageInfo_SubpipelinePipelineDescriptionStep.Size(m)
}
func (m *SubpipelinePipelineDescriptionStep) XXX_DiscardUnknown() {
	xxx_messageInfo_SubpipelinePipelineDescriptionStep.DiscardUnknown(m)
}

var xxx_messageInfo_SubpipelinePipelineDescriptionStep proto.InternalMessageInfo

func (m *SubpipelinePipelineDescriptionStep) GetPipeline() *PipelineDescription {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *SubpipelinePipelineDescriptionStep) GetInputs() []*StepInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *SubpipelinePipelineDescriptionStep) GetOutputs() []*StepOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

// Used to represent a pipeline template which can be used to generate full pipelines.
// A placeholder is replaced with a pipeline step to form a pipeline. See README.md
// for restrictions on the number of them, their position, allowed inputs and outputs,
// etc.
type PlaceholderPipelineDescriptionStep struct {
	// List of inputs which can be used as inputs to resulting sub-pipeline. Resulting
	// sub-pipeline does not have to use all the inputs, but it cannot use any other inputs.
	Inputs []*StepInput `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// A list of outputs of the resulting sub-pipeline.
	Outputs              []*StepOutput `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PlaceholderPipelineDescriptionStep) Reset()         { *m = PlaceholderPipelineDescriptionStep{} }
func (m *PlaceholderPipelineDescriptionStep) String() string { return proto.CompactTextString(m) }
func (*PlaceholderPipelineDescriptionStep) ProtoMessage()    {}
func (*PlaceholderPipelineDescriptionStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{16}
}
func (m *PlaceholderPipelineDescriptionStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceholderPipelineDescriptionStep.Unmarshal(m, b)
}
func (m *PlaceholderPipelineDescriptionStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceholderPipelineDescriptionStep.Marshal(b, m, deterministic)
}
func (dst *PlaceholderPipelineDescriptionStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceholderPipelineDescriptionStep.Merge(dst, src)
}
func (m *PlaceholderPipelineDescriptionStep) XXX_Size() int {
	return xxx_messageInfo_PlaceholderPipelineDescriptionStep.Size(m)
}
func (m *PlaceholderPipelineDescriptionStep) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceholderPipelineDescriptionStep.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceholderPipelineDescriptionStep proto.InternalMessageInfo

func (m *PlaceholderPipelineDescriptionStep) GetInputs() []*StepInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PlaceholderPipelineDescriptionStep) GetOutputs() []*StepOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type PipelineDescriptionStep struct {
	// Types that are valid to be assigned to Step:
	//	*PipelineDescriptionStep_Primitive
	//	*PipelineDescriptionStep_Pipeline
	//	*PipelineDescriptionStep_Placeholder
	Step                 isPipelineDescriptionStep_Step `protobuf_oneof:"step"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *PipelineDescriptionStep) Reset()         { *m = PipelineDescriptionStep{} }
func (m *PipelineDescriptionStep) String() string { return proto.CompactTextString(m) }
func (*PipelineDescriptionStep) ProtoMessage()    {}
func (*PipelineDescriptionStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{17}
}
func (m *PipelineDescriptionStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineDescriptionStep.Unmarshal(m, b)
}
func (m *PipelineDescriptionStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineDescriptionStep.Marshal(b, m, deterministic)
}
func (dst *PipelineDescriptionStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineDescriptionStep.Merge(dst, src)
}
func (m *PipelineDescriptionStep) XXX_Size() int {
	return xxx_messageInfo_PipelineDescriptionStep.Size(m)
}
func (m *PipelineDescriptionStep) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineDescriptionStep.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineDescriptionStep proto.InternalMessageInfo

type isPipelineDescriptionStep_Step interface {
	isPipelineDescriptionStep_Step()
}

type PipelineDescriptionStep_Primitive struct {
	Primitive *PrimitivePipelineDescriptionStep `protobuf:"bytes,1,opt,name=primitive,proto3,oneof"`
}
type PipelineDescriptionStep_Pipeline struct {
	Pipeline *SubpipelinePipelineDescriptionStep `protobuf:"bytes,2,opt,name=pipeline,proto3,oneof"`
}
type PipelineDescriptionStep_Placeholder struct {
	Placeholder *PlaceholderPipelineDescriptionStep `protobuf:"bytes,3,opt,name=placeholder,proto3,oneof"`
}

func (*PipelineDescriptionStep_Primitive) isPipelineDescriptionStep_Step()   {}
func (*PipelineDescriptionStep_Pipeline) isPipelineDescriptionStep_Step()    {}
func (*PipelineDescriptionStep_Placeholder) isPipelineDescriptionStep_Step() {}

func (m *PipelineDescriptionStep) GetStep() isPipelineDescriptionStep_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *PipelineDescriptionStep) GetPrimitive() *PrimitivePipelineDescriptionStep {
	if x, ok := m.GetStep().(*PipelineDescriptionStep_Primitive); ok {
		return x.Primitive
	}
	return nil
}

func (m *PipelineDescriptionStep) GetPipeline() *SubpipelinePipelineDescriptionStep {
	if x, ok := m.GetStep().(*PipelineDescriptionStep_Pipeline); ok {
		return x.Pipeline
	}
	return nil
}

func (m *PipelineDescriptionStep) GetPlaceholder() *PlaceholderPipelineDescriptionStep {
	if x, ok := m.GetStep().(*PipelineDescriptionStep_Placeholder); ok {
		return x.Placeholder
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PipelineDescriptionStep) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PipelineDescriptionStep_OneofMarshaler, _PipelineDescriptionStep_OneofUnmarshaler, _PipelineDescriptionStep_OneofSizer, []interface{}{
		(*PipelineDescriptionStep_Primitive)(nil),
		(*PipelineDescriptionStep_Pipeline)(nil),
		(*PipelineDescriptionStep_Placeholder)(nil),
	}
}

func _PipelineDescriptionStep_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PipelineDescriptionStep)
	// step
	switch x := m.Step.(type) {
	case *PipelineDescriptionStep_Primitive:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Primitive); err != nil {
			return err
		}
	case *PipelineDescriptionStep_Pipeline:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pipeline); err != nil {
			return err
		}
	case *PipelineDescriptionStep_Placeholder:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Placeholder); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PipelineDescriptionStep.Step has unexpected type %T", x)
	}
	return nil
}

func _PipelineDescriptionStep_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PipelineDescriptionStep)
	switch tag {
	case 1: // step.primitive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrimitivePipelineDescriptionStep)
		err := b.DecodeMessage(msg)
		m.Step = &PipelineDescriptionStep_Primitive{msg}
		return true, err
	case 2: // step.pipeline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubpipelinePipelineDescriptionStep)
		err := b.DecodeMessage(msg)
		m.Step = &PipelineDescriptionStep_Pipeline{msg}
		return true, err
	case 3: // step.placeholder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlaceholderPipelineDescriptionStep)
		err := b.DecodeMessage(msg)
		m.Step = &PipelineDescriptionStep_Placeholder{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PipelineDescriptionStep_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PipelineDescriptionStep)
	// step
	switch x := m.Step.(type) {
	case *PipelineDescriptionStep_Primitive:
		s := proto.Size(x.Primitive)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PipelineDescriptionStep_Pipeline:
		s := proto.Size(x.Pipeline)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PipelineDescriptionStep_Placeholder:
		s := proto.Size(x.Placeholder)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Pipeline description matches the D3M pipeline description.
// It serves two purposes: describing found pipelines by TA2 to TA3, and communicating pipeline
// templates by TA3 to TA2. Because of this some fields are reasonable only in one of those uses.
// They are marked with "TA2" or "TA3" in the comment, for fields which are primarily to be set
// only by TA2 or only by TA3, respectivelly.
type PipelineDescription struct {
	// TA2: UUID of the pipeline. Templates do not have IDs. But TA3 might provide it for a fully
	// specified pipeline. It does not necessary have to match "solution_id" from
	// "ListSolutionsResponse" and other related messages. Those IDs are about whole solutions
	// (pipeline, potentially fitted, with set hyper-parameters). This here ID is about this
	// particular ID description.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// "schema" field is not needed because it is fixed by the TA2-TA3 protocol version.
	// System which generated a pipeline or a template. Optional.
	Source *PipelineSource `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// TA2: Timestamp when created. Templates do not have this timestamp. TA3 might provide it for
	// a fully specified pipeline.
	Created *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// In which context a template or pipeline was made. This is helpful to distinguish evaluation
	// context from other contexts. The value should not really influence different behavior from
	// either system, but it is useful when recording metalearning information to understand this.
	Context PipelineContext `protobuf:"varint,4,opt,name=context,proto3,enum=PipelineContext" json:"context,omitempty"`
	// Human friendly name of the pipeline. For templates it can be a hint to
	// TA2 how to name found pipelines. Optional.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Human friendly description of the pipeline. Optional.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// List of users associated with the creation of the template and consequently of the pipeline.
	// TA2 can store this information into metalearning database. TA2 is not really expected to use
	// this information during pipeline search. TA2 should not have to understand TA3 users, mapping
	// between users and pipeline search IDs is something TA3 should handle. Optional.
	Users []*PipelineDescriptionUser `protobuf:"bytes,7,rep,name=users,proto3" json:"users,omitempty"`
	// In most cases inputs are datasets. But if TA3 wants to jut run a primitive, it can send a
	// template with only that primitive in the template, and then pass anything to its inputs during
	// execution. Here, we are describing possible inputs to the pipeline or template. Order matters.
	Inputs []*PipelineDescriptionInput `protobuf:"bytes,8,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Available outputs of the pipeline or template.
	Outputs []*PipelineDescriptionOutput `protobuf:"bytes,9,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Steps defining the pipeline.
	Steps                []*PipelineDescriptionStep `protobuf:"bytes,10,rep,name=steps,proto3" json:"steps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PipelineDescription) Reset()         { *m = PipelineDescription{} }
func (m *PipelineDescription) String() string { return proto.CompactTextString(m) }
func (*PipelineDescription) ProtoMessage()    {}
func (*PipelineDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipeline_448625383800ad61, []int{18}
}
func (m *PipelineDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineDescription.Unmarshal(m, b)
}
func (m *PipelineDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineDescription.Marshal(b, m, deterministic)
}
func (dst *PipelineDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineDescription.Merge(dst, src)
}
func (m *PipelineDescription) XXX_Size() int {
	return xxx_messageInfo_PipelineDescription.Size(m)
}
func (m *PipelineDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineDescription.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineDescription proto.InternalMessageInfo

func (m *PipelineDescription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PipelineDescription) GetSource() *PipelineSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *PipelineDescription) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *PipelineDescription) GetContext() PipelineContext {
	if m != nil {
		return m.Context
	}
	return PipelineContext_PIPELINE_CONTEXT_UNKNOWN
}

func (m *PipelineDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PipelineDescription) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PipelineDescription) GetUsers() []*PipelineDescriptionUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *PipelineDescription) GetInputs() []*PipelineDescriptionInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PipelineDescription) GetOutputs() []*PipelineDescriptionOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *PipelineDescription) GetSteps() []*PipelineDescriptionStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

func init() {
	proto.RegisterType((*ContainerArgument)(nil), "ContainerArgument")
	proto.RegisterType((*DataArgument)(nil), "DataArgument")
	proto.RegisterType((*DataArguments)(nil), "DataArguments")
	proto.RegisterType((*PrimitiveArgument)(nil), "PrimitiveArgument")
	proto.RegisterType((*PrimitiveArguments)(nil), "PrimitiveArguments")
	proto.RegisterType((*ValueArgument)(nil), "ValueArgument")
	proto.RegisterType((*PrimitiveStepArgument)(nil), "PrimitiveStepArgument")
	proto.RegisterType((*PrimitiveStepHyperparameter)(nil), "PrimitiveStepHyperparameter")
	proto.RegisterType((*StepInput)(nil), "StepInput")
	proto.RegisterType((*StepOutput)(nil), "StepOutput")
	proto.RegisterType((*PipelineSource)(nil), "PipelineSource")
	proto.RegisterType((*PipelineDescriptionUser)(nil), "PipelineDescriptionUser")
	proto.RegisterType((*PipelineDescriptionInput)(nil), "PipelineDescriptionInput")
	proto.RegisterType((*PipelineDescriptionOutput)(nil), "PipelineDescriptionOutput")
	proto.RegisterType((*PrimitivePipelineDescriptionStep)(nil), "PrimitivePipelineDescriptionStep")
	proto.RegisterMapType((map[string]*PrimitiveStepArgument)(nil), "PrimitivePipelineDescriptionStep.ArgumentsEntry")
	proto.RegisterMapType((map[string]*PrimitiveStepHyperparameter)(nil), "PrimitivePipelineDescriptionStep.HyperparamsEntry")
	proto.RegisterType((*SubpipelinePipelineDescriptionStep)(nil), "SubpipelinePipelineDescriptionStep")
	proto.RegisterType((*PlaceholderPipelineDescriptionStep)(nil), "PlaceholderPipelineDescriptionStep")
	proto.RegisterType((*PipelineDescriptionStep)(nil), "PipelineDescriptionStep")
	proto.RegisterType((*PipelineDescription)(nil), "PipelineDescription")
	proto.RegisterEnum("PipelineContext", PipelineContext_name, PipelineContext_value)
}

func init() { proto.RegisterFile("pipeline.proto", fileDescriptor_pipeline_448625383800ad61) }

var fileDescriptor_pipeline_448625383800ad61 = []byte{
	// 976 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xf6, 0xbf, 0xe3, 0xa3, 0xc5, 0x71, 0xd9, 0xad, 0x53, 0xbd, 0x00, 0xf5, 0x14, 0x6c, 0x09,
	0xda, 0x81, 0xed, 0xbc, 0x5e, 0x0c, 0xc3, 0x6e, 0x1c, 0xc7, 0xa8, 0x8d, 0x15, 0xb6, 0x41, 0x2b,
	0xdd, 0x30, 0x14, 0x08, 0x14, 0x9b, 0x4b, 0x85, 0xd9, 0x92, 0x20, 0xd1, 0xc1, 0x02, 0xec, 0x65,
	0xf6, 0x04, 0x7b, 0x8e, 0xbd, 0xcd, 0x5e, 0x60, 0xc0, 0x40, 0x8a, 0xa4, 0x24, 0x5b, 0x8e, 0x73,
	0xd3, 0x3b, 0x93, 0xfc, 0xf8, 0x9d, 0xc3, 0xef, 0x7c, 0xe7, 0x58, 0xd0, 0x0c, 0xdc, 0x80, 0x2e,
	0x5d, 0x8f, 0xe2, 0x20, 0xf4, 0x99, 0xdf, 0xee, 0xdc, 0xf8, 0xfe, 0xcd, 0x92, 0xbe, 0x14, 0xab,
	0xeb, 0xf5, 0x6f, 0x2f, 0x17, 0x34, 0x9a, 0x87, 0x6e, 0xc0, 0xfc, 0x50, 0x22, 0x9e, 0x6d, 0x22,
	0x98, 0xbb, 0xa2, 0x11, 0x73, 0x56, 0x81, 0x04, 0x1c, 0x05, 0xa1, 0xbb, 0x72, 0x99, 0x7b, 0xab,
	0x38, 0x8d, 0x5b, 0x67, 0xb9, 0x96, 0x0b, 0xeb, 0x14, 0x1e, 0xf5, 0x7d, 0x8f, 0x39, 0xae, 0x47,
	0xc3, 0x5e, 0x78, 0xb3, 0x5e, 0x51, 0x8f, 0x21, 0x04, 0x95, 0x85, 0xc3, 0x1c, 0xb3, 0xd8, 0x29,
	0x9e, 0x35, 0x88, 0xf8, 0x6d, 0x59, 0xf0, 0xc9, 0x85, 0xc3, 0x9c, 0x7b, 0x31, 0x27, 0x70, 0x98,
	0xc6, 0x44, 0x29, 0x50, 0x59, 0x83, 0x4e, 0xe1, 0xd1, 0x54, 0x65, 0x94, 0xcb, 0x56, 0x95, 0xc0,
	0x33, 0x40, 0x5b, 0xc0, 0x2c, 0xa5, 0x42, 0xbe, 0x80, 0xc3, 0x77, 0xfc, 0x4d, 0x9a, 0xae, 0x9d,
	0xa2, 0x33, 0xba, 0x35, 0x2c, 0x4e, 0x25, 0xf8, 0x4f, 0xf8, 0x4c, 0xd3, 0xce, 0x18, 0x0d, 0xf4,
	0xa5, 0x2e, 0x34, 0xe6, 0x4a, 0x0a, 0x79, 0x13, 0xe1, 0x2d, 0x71, 0x86, 0x05, 0x92, 0xc0, 0xd0,
	0x89, 0x0c, 0x54, 0x12, 0xf0, 0x43, 0x9c, 0x7e, 0xfe, 0xb0, 0x10, 0x47, 0x3c, 0x07, 0x38, 0x70,
	0xe4, 0x9e, 0xf5, 0x4f, 0x09, 0xbe, 0xc8, 0x84, 0x1f, 0xde, 0x05, 0x34, 0x0c, 0x9c, 0xd0, 0x59,
	0x51, 0x46, 0xc3, 0x8f, 0x96, 0x04, 0x27, 0xd6, 0x46, 0x30, 0xcb, 0x92, 0x78, 0x4b, 0x5f, 0x4e,
	0xac, 0x61, 0xe8, 0x6b, 0xa8, 0x0a, 0xaf, 0x98, 0x15, 0x81, 0x6f, 0xe2, 0x8c, 0xca, 0xc3, 0x02,
	0x89, 0x8f, 0xd1, 0x0b, 0x38, 0xe0, 0x31, 0xae, 0x22, 0xca, 0xcc, 0xaa, 0x84, 0x66, 0x8c, 0x30,
	0x2c, 0x90, 0x3a, 0x47, 0xcc, 0x28, 0x43, 0x3f, 0x42, 0x53, 0x47, 0x88, 0xc4, 0x95, 0x9a, 0xb8,
	0xf2, 0x78, 0x3b, 0x1b, 0x7e, 0xef, 0x30, 0x01, 0xcf, 0x28, 0xcb, 0x68, 0xf9, 0x0c, 0x1a, 0x5c,
	0xc1, 0x91, 0x17, 0xac, 0xf3, 0xfd, 0x78, 0x0c, 0xc0, 0x01, 0x93, 0x35, 0xe3, 0x88, 0x26, 0x94,
	0xdc, 0x85, 0x3c, 0x2f, 0xb9, 0x0b, 0xeb, 0x3d, 0x34, 0xa7, 0xb2, 0xdb, 0x66, 0xfe, 0x3a, 0x9c,
	0x53, 0xce, 0xe1, 0x39, 0x2b, 0xaa, 0x38, 0xf8, 0x6f, 0x64, 0x42, 0x5d, 0x28, 0x3d, 0x67, 0x42,
	0xdf, 0x06, 0x51, 0x4b, 0x74, 0x0c, 0x0d, 0xd5, 0xad, 0x91, 0x59, 0x16, 0x0e, 0x4f, 0x36, 0xac,
	0x2b, 0xf8, 0x5c, 0xb1, 0x5f, 0xc8, 0x9e, 0x75, 0x7d, 0xef, 0x32, 0xa2, 0xe1, 0x66, 0x22, 0xe8,
	0x09, 0xd4, 0x42, 0xea, 0x44, 0xbe, 0x27, 0x23, 0xc8, 0x15, 0x0f, 0x10, 0x3a, 0xfc, 0x96, 0xb3,
	0x8c, 0x4b, 0xd6, 0x20, 0xc9, 0x86, 0x85, 0xc1, 0xcc, 0x09, 0xa0, 0xc5, 0xd8, 0x7c, 0x88, 0xd5,
	0x87, 0xa7, 0x39, 0x78, 0xa9, 0x4d, 0xde, 0xcb, 0x51, 0xca, 0x56, 0x4a, 0xd1, 0xff, 0xca, 0xd0,
	0xd1, 0x65, 0xca, 0xa1, 0xe3, 0x72, 0xa3, 0xb3, 0xb4, 0xd5, 0x62, 0x0f, 0x43, 0x52, 0xdc, 0xb4,
	0xc1, 0xc6, 0xd0, 0x50, 0xd5, 0x8c, 0xcc, 0x52, 0xa7, 0x7c, 0x66, 0x74, 0x5f, 0xe1, 0x7d, 0xfc,
	0x58, 0xdb, 0x63, 0xe0, 0xb1, 0xf0, 0x8e, 0x24, 0x14, 0xe8, 0x2b, 0xa8, 0xfb, 0xe2, 0x41, 0x71,
	0x41, 0x8c, 0xae, 0x81, 0x13, 0x03, 0x10, 0x75, 0x86, 0x6c, 0x30, 0x3e, 0xe8, 0xb6, 0x8b, 0xcc,
	0x8a, 0x80, 0x76, 0xf7, 0x07, 0x4e, 0x7a, 0x55, 0x86, 0x4e, 0xd3, 0x20, 0x0c, 0xd5, 0x75, 0x44,
	0xc3, 0xc8, 0xac, 0x0a, 0x3e, 0x13, 0xef, 0xa8, 0x3f, 0x89, 0x61, 0x6d, 0x1b, 0x9a, 0xd9, 0x97,
	0xa0, 0x16, 0x94, 0x7f, 0xa7, 0x77, 0xb2, 0x08, 0xfc, 0x27, 0xfa, 0x46, 0x75, 0x60, 0xdc, 0xdb,
	0x4f, 0x70, 0xee, 0xe8, 0x92, 0x7d, 0xf8, 0x43, 0xe9, 0xfb, 0x62, 0xfb, 0x3d, 0xb4, 0x36, 0xd3,
	0xcc, 0xe1, 0xed, 0x66, 0x79, 0x8f, 0xf1, 0x3d, 0x33, 0x29, 0xc5, 0x6e, 0xfd, 0x55, 0x04, 0x6b,
	0xb6, 0xbe, 0x56, 0x36, 0xdf, 0xe5, 0x80, 0x57, 0x70, 0xa0, 0x20, 0xd2, 0x00, 0x9f, 0xe6, 0xa9,
	0x41, 0x34, 0x0a, 0x59, 0x50, 0x73, 0x3d, 0x51, 0xb8, 0xd8, 0x06, 0x80, 0x75, 0x6b, 0x13, 0x79,
	0xf2, 0xc0, 0xea, 0x5a, 0x3e, 0x58, 0xd3, 0xa5, 0x33, 0xa7, 0x1f, 0xfc, 0xe5, 0x82, 0x86, 0xbb,
	0x52, 0x4c, 0x02, 0x16, 0x1f, 0x12, 0xb0, 0x74, 0x4f, 0xc0, 0x7f, 0x8b, 0xb9, 0xbd, 0x2e, 0xc2,
	0xf4, 0xb6, 0x7b, 0xe1, 0xcb, 0xbd, 0x46, 0xcb, 0x4e, 0xe1, 0x5e, 0x4a, 0xcc, 0xb8, 0x5c, 0x27,
	0x78, 0x7f, 0x0d, 0x86, 0x85, 0x94, 0xba, 0x6f, 0xc0, 0x08, 0x12, 0x49, 0xe4, 0xf8, 0x3f, 0xc1,
	0xfb, 0x65, 0x1a, 0x16, 0x48, 0xfa, 0xe6, 0x79, 0x0d, 0x2a, 0x11, 0xa3, 0x81, 0xf5, 0x77, 0x19,
	0x1e, 0xe7, 0x5c, 0xd9, 0x1a, 0x6d, 0xa7, 0x50, 0x8b, 0xc4, 0x6c, 0x95, 0x99, 0x1f, 0xe1, 0xec,
	0xc8, 0x25, 0xf2, 0x18, 0xbd, 0x86, 0xfa, 0x3c, 0xa4, 0x0e, 0xa3, 0x0b, 0x99, 0x5d, 0x1b, 0xc7,
	0x1f, 0x36, 0x58, 0x7d, 0xd8, 0x60, 0x5b, 0x7d, 0xd8, 0x10, 0x05, 0x45, 0xcf, 0xe3, 0xe1, 0x4c,
	0xff, 0x60, 0xe2, 0x2f, 0xaa, 0xd9, 0x6d, 0x69, 0xfe, 0x7e, 0xbc, 0x4f, 0x14, 0x40, 0x8f, 0xb8,
	0x6a, 0x6a, 0xc4, 0x75, 0xc0, 0x58, 0x24, 0xd9, 0x8b, 0x3f, 0xa2, 0x06, 0x49, 0x6f, 0x25, 0x4d,
	0x5d, 0x7f, 0x50, 0x53, 0xa3, 0x6f, 0xb5, 0xad, 0x0e, 0xc4, 0x85, 0xa7, 0x78, 0xd7, 0x90, 0xd6,
	0x2e, 0x7b, 0x9d, 0xb8, 0xac, 0x21, 0xee, 0xb4, 0xf1, 0xce, 0x41, 0x9d, 0xcc, 0x30, 0x0c, 0x55,
	0x5e, 0x89, 0xc8, 0x84, 0xdd, 0x89, 0xf1, 0x0a, 0x92, 0x18, 0xf6, 0x7c, 0x05, 0x47, 0x1b, 0xd2,
	0xa0, 0x63, 0x30, 0xa7, 0xa3, 0xe9, 0xe0, 0xed, 0x68, 0x3c, 0xb8, 0xea, 0x4f, 0xc6, 0xf6, 0xe0,
	0x17, 0xfb, 0xea, 0x72, 0xfc, 0xd3, 0x78, 0xf2, 0xf3, 0xb8, 0x55, 0x40, 0x47, 0x60, 0x4c, 0xc9,
	0xc0, 0x26, 0xbd, 0xd1, 0x78, 0x34, 0x7e, 0xd3, 0x2a, 0x22, 0x03, 0xea, 0xf6, 0x60, 0x66, 0xf3,
	0x45, 0x09, 0x35, 0x01, 0x06, 0xef, 0x7a, 0x6f, 0x2f, 0x7b, 0xf6, 0x68, 0x32, 0x6e, 0x95, 0xf9,
	0x7a, 0x4a, 0x26, 0x17, 0x97, 0x7d, 0xb1, 0xae, 0x9c, 0xc3, 0xaf, 0xda, 0x7d, 0xd7, 0x35, 0x51,
	0xc2, 0xef, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x14, 0x9b, 0x86, 0x6e, 0xdd, 0x0a, 0x00, 0x00,
}
