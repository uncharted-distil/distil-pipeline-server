// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipeline_service.proto

/*
Package pipeline is a generated protocol buffer package.

It is generated from these files:
	pipeline_service.proto

It has these top-level messages:
	SessionContext
	Status
	Response
	SessionRequest
	PipelineCreateRequest
	Score
	PipelineCreated
	PipelineCreateResult
	PipelineExecuteRequest
	PipelineExecuteResult
*/
package pipeline

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_OK                  StatusCode = 0
	StatusCode_CANCELLED           StatusCode = 1
	StatusCode_SESSION_UNKNOWN     StatusCode = 2
	StatusCode_SESSION_ENDED       StatusCode = 3
	StatusCode_SESSION_EXPIRED     StatusCode = 4
	StatusCode_INVALID_ARGUMENT    StatusCode = 5
	StatusCode_RESOURCE_EXHAUSTED  StatusCode = 6
	StatusCode_UNAVAILABLE         StatusCode = 7
	StatusCode_FAILED_PRECONDITION StatusCode = 8
	StatusCode_OUT_OF_RANGE        StatusCode = 9
	StatusCode_UNIMPLEMENTED       StatusCode = 10
	StatusCode_INTERNAL            StatusCode = 11
	StatusCode_ABORTED             StatusCode = 12
	StatusCode_UNKNOWN             StatusCode = 13
)

var StatusCode_name = map[int32]string{
	0:  "OK",
	1:  "CANCELLED",
	2:  "SESSION_UNKNOWN",
	3:  "SESSION_ENDED",
	4:  "SESSION_EXPIRED",
	5:  "INVALID_ARGUMENT",
	6:  "RESOURCE_EXHAUSTED",
	7:  "UNAVAILABLE",
	8:  "FAILED_PRECONDITION",
	9:  "OUT_OF_RANGE",
	10: "UNIMPLEMENTED",
	11: "INTERNAL",
	12: "ABORTED",
	13: "UNKNOWN",
}
var StatusCode_value = map[string]int32{
	"OK":                  0,
	"CANCELLED":           1,
	"SESSION_UNKNOWN":     2,
	"SESSION_ENDED":       3,
	"SESSION_EXPIRED":     4,
	"INVALID_ARGUMENT":    5,
	"RESOURCE_EXHAUSTED":  6,
	"UNAVAILABLE":         7,
	"FAILED_PRECONDITION": 8,
	"OUT_OF_RANGE":        9,
	"UNIMPLEMENTED":       10,
	"INTERNAL":            11,
	"ABORTED":             12,
	"UNKNOWN":             13,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Progress int32

const (
	Progress_SUBMITTED Progress = 0
	Progress_RUNNING   Progress = 1
	Progress_COMPLETE  Progress = 2
)

var Progress_name = map[int32]string{
	0: "SUBMITTED",
	1: "RUNNING",
	2: "COMPLETE",
}
var Progress_value = map[string]int32{
	"SUBMITTED": 0,
	"RUNNING":   1,
	"COMPLETE":  2,
}

func (x Progress) String() string {
	return proto.EnumName(Progress_name, int32(x))
}
func (Progress) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Task int32

const (
	Task_CLASSIFICATION Task = 0
	Task_REGRESSION     Task = 1
)

var Task_name = map[int32]string{
	0: "CLASSIFICATION",
	1: "REGRESSION",
}
var Task_value = map[string]int32{
	"CLASSIFICATION": 0,
	"REGRESSION":     1,
}

func (x Task) String() string {
	return proto.EnumName(Task_name, int32(x))
}
func (Task) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Output int32

const (
	Output_CLASS_LABEL      Output = 0
	Output_PROBABILITY      Output = 1
	Output_GENERAL_SCORE    Output = 2
	Output_MULTILABEL       Output = 3
	Output_REGRESSION_VALUE Output = 4
)

var Output_name = map[int32]string{
	0: "CLASS_LABEL",
	1: "PROBABILITY",
	2: "GENERAL_SCORE",
	3: "MULTILABEL",
	4: "REGRESSION_VALUE",
}
var Output_value = map[string]int32{
	"CLASS_LABEL":      0,
	"PROBABILITY":      1,
	"GENERAL_SCORE":    2,
	"MULTILABEL":       3,
	"REGRESSION_VALUE": 4,
}

func (x Output) String() string {
	return proto.EnumName(Output_name, int32(x))
}
func (Output) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Metric int32

const (
	Metric_ACCURACY              Metric = 0
	Metric_PRECISION             Metric = 1
	Metric_RECALL                Metric = 2
	Metric_F1_MICRO              Metric = 4
	Metric_F1_MACRO              Metric = 5
	Metric_ROC_AUC               Metric = 6
	Metric_LOG_LOSS              Metric = 7
	Metric_MEAN_SQUARED_ERR      Metric = 8
	Metric_ROOT_MEAN_SQUARED_ERR Metric = 9
	Metric_MEAN_ABSOLUTE_ERR     Metric = 10
	Metric_MEDIAN_ABSOSLUTE_ERR  Metric = 11
	Metric_R2                    Metric = 12
)

var Metric_name = map[int32]string{
	0:  "ACCURACY",
	1:  "PRECISION",
	2:  "RECALL",
	4:  "F1_MICRO",
	5:  "F1_MACRO",
	6:  "ROC_AUC",
	7:  "LOG_LOSS",
	8:  "MEAN_SQUARED_ERR",
	9:  "ROOT_MEAN_SQUARED_ERR",
	10: "MEAN_ABSOLUTE_ERR",
	11: "MEDIAN_ABSOSLUTE_ERR",
	12: "R2",
}
var Metric_value = map[string]int32{
	"ACCURACY":              0,
	"PRECISION":             1,
	"RECALL":                2,
	"F1_MICRO":              4,
	"F1_MACRO":              5,
	"ROC_AUC":               6,
	"LOG_LOSS":              7,
	"MEAN_SQUARED_ERR":      8,
	"ROOT_MEAN_SQUARED_ERR": 9,
	"MEAN_ABSOLUTE_ERR":     10,
	"MEDIAN_ABSOSLUTE_ERR":  11,
	"R2": 12,
}

func (x Metric) String() string {
	return proto.EnumName(Metric_name, int32(x))
}
func (Metric) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SessionContext struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *SessionContext) Reset()                    { *m = SessionContext{} }
func (m *SessionContext) String() string            { return proto.CompactTextString(m) }
func (*SessionContext) ProtoMessage()               {}
func (*SessionContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SessionContext) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type Status struct {
	Code    StatusCode `protobuf:"varint,1,opt,name=code,enum=pipeline.StatusCode" json:"code,omitempty"`
	Details string     `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Status) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_OK
}

func (m *Status) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

type Response struct {
	Context *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Status  *Status         `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Response) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// in the future we could also pass arguments allowing one to fork an existing session,
// or provide resource limits on a session (asking TA2 system to terminate work if it exceeds a given limit)
type SessionRequest struct {
}

func (m *SessionRequest) Reset()                    { *m = SessionRequest{} }
func (m *SessionRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionRequest) ProtoMessage()               {}
func (*SessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PipelineCreateRequest struct {
	Context          *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	TrainDatasetUris []string        `protobuf:"bytes,2,rep,name=train_dataset_uris,json=trainDatasetUris" json:"train_dataset_uris,omitempty"`
	Task             Task            `protobuf:"varint,3,opt,name=task,enum=pipeline.Task" json:"task,omitempty"`
	TaskDescription  string          `protobuf:"bytes,4,opt,name=task_description,json=taskDescription" json:"task_description,omitempty"`
	Output           Output          `protobuf:"varint,5,opt,name=output,enum=pipeline.Output" json:"output,omitempty"`
	Metric           []Metric        `protobuf:"varint,6,rep,packed,name=metric,enum=pipeline.Metric" json:"metric,omitempty"`
	TargetFeatures   []string        `protobuf:"bytes,7,rep,name=target_features,json=targetFeatures" json:"target_features,omitempty"`
	MaxPipelines     int32           `protobuf:"varint,8,opt,name=max_pipelines,json=maxPipelines" json:"max_pipelines,omitempty"`
}

func (m *PipelineCreateRequest) Reset()                    { *m = PipelineCreateRequest{} }
func (m *PipelineCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*PipelineCreateRequest) ProtoMessage()               {}
func (*PipelineCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PipelineCreateRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *PipelineCreateRequest) GetTrainDatasetUris() []string {
	if m != nil {
		return m.TrainDatasetUris
	}
	return nil
}

func (m *PipelineCreateRequest) GetTask() Task {
	if m != nil {
		return m.Task
	}
	return Task_CLASSIFICATION
}

func (m *PipelineCreateRequest) GetTaskDescription() string {
	if m != nil {
		return m.TaskDescription
	}
	return ""
}

func (m *PipelineCreateRequest) GetOutput() Output {
	if m != nil {
		return m.Output
	}
	return Output_CLASS_LABEL
}

func (m *PipelineCreateRequest) GetMetric() []Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *PipelineCreateRequest) GetTargetFeatures() []string {
	if m != nil {
		return m.TargetFeatures
	}
	return nil
}

func (m *PipelineCreateRequest) GetMaxPipelines() int32 {
	if m != nil {
		return m.MaxPipelines
	}
	return 0
}

type Score struct {
	Metric Metric  `protobuf:"varint,1,opt,name=metric,enum=pipeline.Metric" json:"metric,omitempty"`
	Value  float32 `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
}

func (m *Score) Reset()                    { *m = Score{} }
func (m *Score) String() string            { return proto.CompactTextString(m) }
func (*Score) ProtoMessage()               {}
func (*Score) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Score) GetMetric() Metric {
	if m != nil {
		return m.Metric
	}
	return Metric_ACCURACY
}

func (m *Score) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PipelineCreated struct {
	PredictResultUris []string `protobuf:"bytes,1,rep,name=predict_result_uris,json=predictResultUris" json:"predict_result_uris,omitempty"`
	Output            Output   `protobuf:"varint,2,opt,name=output,enum=pipeline.Output" json:"output,omitempty"`
	Score             []*Score `protobuf:"bytes,3,rep,name=score" json:"score,omitempty"`
}

func (m *PipelineCreated) Reset()                    { *m = PipelineCreated{} }
func (m *PipelineCreated) String() string            { return proto.CompactTextString(m) }
func (*PipelineCreated) ProtoMessage()               {}
func (*PipelineCreated) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PipelineCreated) GetPredictResultUris() []string {
	if m != nil {
		return m.PredictResultUris
	}
	return nil
}

func (m *PipelineCreated) GetOutput() Output {
	if m != nil {
		return m.Output
	}
	return Output_CLASS_LABEL
}

func (m *PipelineCreated) GetScore() []*Score {
	if m != nil {
		return m.Score
	}
	return nil
}

type PipelineCreateResult struct {
	ResponseInfo *Response `protobuf:"bytes,1,opt,name=response_info,json=responseInfo" json:"response_info,omitempty"`
	ProgressInfo Progress  `protobuf:"varint,2,opt,name=progress_info,json=progressInfo,enum=pipeline.Progress" json:"progress_info,omitempty"`
	PipelineId   string    `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId" json:"pipeline_id,omitempty"`
	// Will be set if progress info is a value other than COMPLETE
	PipelineInfo *PipelineCreated `protobuf:"bytes,4,opt,name=pipeline_info,json=pipelineInfo" json:"pipeline_info,omitempty"`
}

func (m *PipelineCreateResult) Reset()                    { *m = PipelineCreateResult{} }
func (m *PipelineCreateResult) String() string            { return proto.CompactTextString(m) }
func (*PipelineCreateResult) ProtoMessage()               {}
func (*PipelineCreateResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PipelineCreateResult) GetResponseInfo() *Response {
	if m != nil {
		return m.ResponseInfo
	}
	return nil
}

func (m *PipelineCreateResult) GetProgressInfo() Progress {
	if m != nil {
		return m.ProgressInfo
	}
	return Progress_SUBMITTED
}

func (m *PipelineCreateResult) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *PipelineCreateResult) GetPipelineInfo() *PipelineCreated {
	if m != nil {
		return m.PipelineInfo
	}
	return nil
}

type PipelineExecuteRequest struct {
	Context            *SessionContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	PipelineId         string          `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId" json:"pipeline_id,omitempty"`
	PredictDatasetUris []string        `protobuf:"bytes,3,rep,name=predict_dataset_uris,json=predictDatasetUris" json:"predict_dataset_uris,omitempty"`
}

func (m *PipelineExecuteRequest) Reset()                    { *m = PipelineExecuteRequest{} }
func (m *PipelineExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*PipelineExecuteRequest) ProtoMessage()               {}
func (*PipelineExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PipelineExecuteRequest) GetContext() *SessionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *PipelineExecuteRequest) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *PipelineExecuteRequest) GetPredictDatasetUris() []string {
	if m != nil {
		return m.PredictDatasetUris
	}
	return nil
}

type PipelineExecuteResult struct {
	ResponseInfo *Response `protobuf:"bytes,1,opt,name=response_info,json=responseInfo" json:"response_info,omitempty"`
	ProgressInfo Progress  `protobuf:"varint,2,opt,name=progress_info,json=progressInfo,enum=pipeline.Progress" json:"progress_info,omitempty"`
	PipelineId   string    `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId" json:"pipeline_id,omitempty"`
	// Will be set if progress info is value is COMPLETE
	ResultUris []string `protobuf:"bytes,4,rep,name=result_uris,json=resultUris" json:"result_uris,omitempty"`
}

func (m *PipelineExecuteResult) Reset()                    { *m = PipelineExecuteResult{} }
func (m *PipelineExecuteResult) String() string            { return proto.CompactTextString(m) }
func (*PipelineExecuteResult) ProtoMessage()               {}
func (*PipelineExecuteResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PipelineExecuteResult) GetResponseInfo() *Response {
	if m != nil {
		return m.ResponseInfo
	}
	return nil
}

func (m *PipelineExecuteResult) GetProgressInfo() Progress {
	if m != nil {
		return m.ProgressInfo
	}
	return Progress_SUBMITTED
}

func (m *PipelineExecuteResult) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *PipelineExecuteResult) GetResultUris() []string {
	if m != nil {
		return m.ResultUris
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionContext)(nil), "pipeline.SessionContext")
	proto.RegisterType((*Status)(nil), "pipeline.Status")
	proto.RegisterType((*Response)(nil), "pipeline.Response")
	proto.RegisterType((*SessionRequest)(nil), "pipeline.SessionRequest")
	proto.RegisterType((*PipelineCreateRequest)(nil), "pipeline.PipelineCreateRequest")
	proto.RegisterType((*Score)(nil), "pipeline.Score")
	proto.RegisterType((*PipelineCreated)(nil), "pipeline.PipelineCreated")
	proto.RegisterType((*PipelineCreateResult)(nil), "pipeline.PipelineCreateResult")
	proto.RegisterType((*PipelineExecuteRequest)(nil), "pipeline.PipelineExecuteRequest")
	proto.RegisterType((*PipelineExecuteResult)(nil), "pipeline.PipelineExecuteResult")
	proto.RegisterEnum("pipeline.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("pipeline.Progress", Progress_name, Progress_value)
	proto.RegisterEnum("pipeline.Task", Task_name, Task_value)
	proto.RegisterEnum("pipeline.Output", Output_name, Output_value)
	proto.RegisterEnum("pipeline.Metric", Metric_name, Metric_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PipelineCompute service

type PipelineComputeClient interface {
	// Train step - multiple result messages returned via GRPC streaming.
	CreatePipelines(ctx context.Context, in *PipelineCreateRequest, opts ...grpc.CallOption) (PipelineCompute_CreatePipelinesClient, error)
	// Predict step - multiple results messages returned via GRPC streaming.
	ExecutePipeline(ctx context.Context, in *PipelineExecuteRequest, opts ...grpc.CallOption) (PipelineCompute_ExecutePipelineClient, error)
	// Session management
	StartSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Response, error)
	EndSession(ctx context.Context, in *SessionContext, opts ...grpc.CallOption) (*Response, error)
}

type pipelineComputeClient struct {
	cc *grpc.ClientConn
}

func NewPipelineComputeClient(cc *grpc.ClientConn) PipelineComputeClient {
	return &pipelineComputeClient{cc}
}

func (c *pipelineComputeClient) CreatePipelines(ctx context.Context, in *PipelineCreateRequest, opts ...grpc.CallOption) (PipelineCompute_CreatePipelinesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PipelineCompute_serviceDesc.Streams[0], c.cc, "/pipeline.PipelineCompute/CreatePipelines", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipelineComputeCreatePipelinesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PipelineCompute_CreatePipelinesClient interface {
	Recv() (*PipelineCreateResult, error)
	grpc.ClientStream
}

type pipelineComputeCreatePipelinesClient struct {
	grpc.ClientStream
}

func (x *pipelineComputeCreatePipelinesClient) Recv() (*PipelineCreateResult, error) {
	m := new(PipelineCreateResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pipelineComputeClient) ExecutePipeline(ctx context.Context, in *PipelineExecuteRequest, opts ...grpc.CallOption) (PipelineCompute_ExecutePipelineClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PipelineCompute_serviceDesc.Streams[1], c.cc, "/pipeline.PipelineCompute/ExecutePipeline", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipelineComputeExecutePipelineClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PipelineCompute_ExecutePipelineClient interface {
	Recv() (*PipelineExecuteResult, error)
	grpc.ClientStream
}

type pipelineComputeExecutePipelineClient struct {
	grpc.ClientStream
}

func (x *pipelineComputeExecutePipelineClient) Recv() (*PipelineExecuteResult, error) {
	m := new(PipelineExecuteResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pipelineComputeClient) StartSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/pipeline.PipelineCompute/StartSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineComputeClient) EndSession(ctx context.Context, in *SessionContext, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/pipeline.PipelineCompute/EndSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PipelineCompute service

type PipelineComputeServer interface {
	// Train step - multiple result messages returned via GRPC streaming.
	CreatePipelines(*PipelineCreateRequest, PipelineCompute_CreatePipelinesServer) error
	// Predict step - multiple results messages returned via GRPC streaming.
	ExecutePipeline(*PipelineExecuteRequest, PipelineCompute_ExecutePipelineServer) error
	// Session management
	StartSession(context.Context, *SessionRequest) (*Response, error)
	EndSession(context.Context, *SessionContext) (*Response, error)
}

func RegisterPipelineComputeServer(s *grpc.Server, srv PipelineComputeServer) {
	s.RegisterService(&_PipelineCompute_serviceDesc, srv)
}

func _PipelineCompute_CreatePipelines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipelineCreateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PipelineComputeServer).CreatePipelines(m, &pipelineComputeCreatePipelinesServer{stream})
}

type PipelineCompute_CreatePipelinesServer interface {
	Send(*PipelineCreateResult) error
	grpc.ServerStream
}

type pipelineComputeCreatePipelinesServer struct {
	grpc.ServerStream
}

func (x *pipelineComputeCreatePipelinesServer) Send(m *PipelineCreateResult) error {
	return x.ServerStream.SendMsg(m)
}

func _PipelineCompute_ExecutePipeline_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipelineExecuteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PipelineComputeServer).ExecutePipeline(m, &pipelineComputeExecutePipelineServer{stream})
}

type PipelineCompute_ExecutePipelineServer interface {
	Send(*PipelineExecuteResult) error
	grpc.ServerStream
}

type pipelineComputeExecutePipelineServer struct {
	grpc.ServerStream
}

func (x *pipelineComputeExecutePipelineServer) Send(m *PipelineExecuteResult) error {
	return x.ServerStream.SendMsg(m)
}

func _PipelineCompute_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineComputeServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.PipelineCompute/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineComputeServer).StartSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineCompute_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineComputeServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.PipelineCompute/EndSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineComputeServer).EndSession(ctx, req.(*SessionContext))
	}
	return interceptor(ctx, in, info, handler)
}

var _PipelineCompute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pipeline.PipelineCompute",
	HandlerType: (*PipelineComputeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSession",
			Handler:    _PipelineCompute_StartSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _PipelineCompute_EndSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreatePipelines",
			Handler:       _PipelineCompute_CreatePipelines_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecutePipeline",
			Handler:       _PipelineCompute_ExecutePipeline_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pipeline_service.proto",
}

func init() { proto.RegisterFile("pipeline_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0xf3, 0xd7, 0xe4, 0x24, 0x6d, 0x66, 0x67, 0xbb, 0x8b, 0x77, 0x25, 0x68, 0x65, 0x84,
	0x28, 0x15, 0x2a, 0x4b, 0x40, 0xe2, 0x06, 0xad, 0x34, 0xb1, 0xa7, 0xc1, 0x5a, 0xc7, 0x2e, 0x63,
	0xbb, 0xec, 0x5e, 0x8d, 0x4c, 0x3c, 0x5d, 0xac, 0x6d, 0xe3, 0x60, 0x3b, 0xab, 0xbe, 0x00, 0x2f,
	0xc0, 0x0b, 0xf0, 0x2c, 0x5c, 0x73, 0xc7, 0x5b, 0xc0, 0x53, 0xa0, 0x19, 0xdb, 0xf9, 0x69, 0xb7,
	0x20, 0xc1, 0x0d, 0x57, 0xd5, 0x9c, 0xef, 0x3b, 0x9f, 0xbf, 0x39, 0x73, 0xce, 0x69, 0xe0, 0xf1,
	0x22, 0x59, 0x88, 0xab, 0x64, 0x2e, 0x78, 0x2e, 0xb2, 0xb7, 0xc9, 0x4c, 0x9c, 0x2e, 0xb2, 0xb4,
	0x48, 0x71, 0xb7, 0x8e, 0x1b, 0x9f, 0xc1, 0xbe, 0x2f, 0xf2, 0x3c, 0x49, 0xe7, 0x66, 0x3a, 0x2f,
	0xc4, 0x4d, 0x81, 0xdf, 0x07, 0xc8, 0xcb, 0x08, 0x4f, 0x62, 0x5d, 0x3b, 0xd2, 0x8e, 0x7b, 0xac,
	0x57, 0x45, 0xec, 0xd8, 0x70, 0xa0, 0xe3, 0x17, 0x51, 0xb1, 0xcc, 0xf1, 0x31, 0xb4, 0x66, 0x69,
	0x2c, 0x14, 0x65, 0x7f, 0x74, 0x70, 0x5a, 0x6b, 0x9e, 0x96, 0xb8, 0x99, 0xc6, 0x82, 0x29, 0x06,
	0xd6, 0x61, 0x37, 0x16, 0x45, 0x94, 0x5c, 0xe5, 0x7a, 0x43, 0xe9, 0xd5, 0x47, 0xe3, 0x07, 0xe8,
	0x32, 0x91, 0x2f, 0xd2, 0x79, 0x2e, 0xf0, 0x08, 0x76, 0x67, 0xa5, 0x07, 0x25, 0xd9, 0x1f, 0xe9,
	0x1b, 0x92, 0x5b, 0x1e, 0x59, 0x4d, 0xc4, 0xc7, 0xd0, 0xc9, 0xd5, 0xd7, 0x94, 0x70, 0x7f, 0x84,
	0x6e, 0xbb, 0x60, 0x15, 0x6e, 0xa0, 0xd5, 0x45, 0x99, 0xf8, 0x71, 0x29, 0xf2, 0xc2, 0xf8, 0xb3,
	0x01, 0x8f, 0xce, 0x2b, 0xb6, 0x99, 0x89, 0xa8, 0x10, 0x15, 0xf2, 0xaf, 0x9c, 0x7c, 0x0a, 0xb8,
	0xc8, 0xa2, 0x64, 0xce, 0xe3, 0xa8, 0x88, 0x72, 0x51, 0xf0, 0x65, 0x96, 0x48, 0x57, 0xcd, 0xe3,
	0x1e, 0x43, 0x0a, 0xb1, 0x4a, 0x20, 0xcc, 0x92, 0x1c, 0x1b, 0xd0, 0x2a, 0xa2, 0xfc, 0x8d, 0xde,
	0x54, 0xb5, 0xdb, 0x5f, 0xcb, 0x07, 0x51, 0xfe, 0x86, 0x29, 0x0c, 0x7f, 0x02, 0x48, 0xfe, 0xe5,
	0xb1, 0xc8, 0x67, 0x59, 0xb2, 0x28, 0x92, 0x74, 0xae, 0xb7, 0x54, 0xf9, 0x86, 0x32, 0x6e, 0xad,
	0xc3, 0xb2, 0x0c, 0xe9, 0xb2, 0x58, 0x2c, 0x0b, 0xbd, 0xad, 0x04, 0x37, 0xca, 0xe0, 0xa9, 0x38,
	0xab, 0x70, 0xc9, 0xbc, 0x16, 0x45, 0x96, 0xcc, 0xf4, 0xce, 0x51, 0x73, 0x9b, 0x39, 0x55, 0x71,
	0x56, 0xe1, 0xf8, 0x63, 0x18, 0x16, 0x51, 0xf6, 0x5a, 0x14, 0xfc, 0x52, 0x44, 0xc5, 0x32, 0x13,
	0xb9, 0xbe, 0xab, 0x6e, 0xb3, 0x5f, 0x86, 0xcf, 0xaa, 0x28, 0xfe, 0x10, 0xf6, 0xae, 0xa3, 0x1b,
	0x5e, 0xeb, 0xe4, 0x7a, 0xf7, 0x48, 0x3b, 0x6e, 0xb3, 0xc1, 0x75, 0x74, 0x53, 0x97, 0x37, 0x37,
	0x26, 0xd0, 0xf6, 0x67, 0x69, 0x26, 0x36, 0x0c, 0x68, 0xb7, 0xad, 0xde, 0x32, 0x70, 0x00, 0xed,
	0xb7, 0xd1, 0xd5, 0x52, 0xa8, 0xa7, 0x6d, 0xb0, 0xf2, 0x60, 0xfc, 0xac, 0xc1, 0x70, 0xfb, 0xd5,
	0x62, 0x7c, 0x0a, 0x0f, 0x17, 0x99, 0x88, 0x93, 0x59, 0xc1, 0x33, 0x91, 0x2f, 0xaf, 0xaa, 0xe2,
	0x6b, 0xca, 0xee, 0x83, 0x0a, 0x62, 0x0a, 0x51, 0xd5, 0x5f, 0x97, 0xab, 0xf1, 0x0f, 0xe5, 0xfa,
	0x08, 0xda, 0xb9, 0xb4, 0xad, 0x37, 0x8f, 0x9a, 0xc7, 0xfd, 0xd1, 0x70, 0xa3, 0x0f, 0x64, 0x98,
	0x95, 0xa8, 0xf1, 0x87, 0x06, 0x07, 0xb7, 0x5b, 0x49, 0x7e, 0x0d, 0x7f, 0x05, 0x7b, 0x59, 0xd5,
	0xdf, 0x3c, 0x99, 0x5f, 0xa6, 0x55, 0x3f, 0xe1, 0xb5, 0x4e, 0xdd, 0xfe, 0x6c, 0x50, 0x13, 0xed,
	0xf9, 0x65, 0x2a, 0x13, 0x17, 0x59, 0xfa, 0x3a, 0x13, 0x79, 0x5e, 0x26, 0x96, 0x4e, 0x37, 0x12,
	0xcf, 0x2b, 0x98, 0x0d, 0x6a, 0xa2, 0x4a, 0x3c, 0x84, 0xfe, 0x6a, 0xe8, 0x93, 0x58, 0x35, 0x58,
	0x8f, 0x41, 0x1d, 0xb2, 0x63, 0xfc, 0x1c, 0xf6, 0xd6, 0x04, 0xa9, 0xdc, 0x52, 0x96, 0x9e, 0x6c,
	0x28, 0x6f, 0x97, 0x97, 0x0d, 0x56, 0xd9, 0xf3, 0xcb, 0xd4, 0xf8, 0x45, 0x83, 0xc7, 0x35, 0x83,
	0xde, 0x88, 0xd9, 0xf2, 0xbf, 0xcd, 0xcd, 0x2d, 0xbf, 0x8d, 0x3b, 0x7e, 0x9f, 0xc1, 0x41, 0xfd,
	0xb8, 0x5b, 0xa3, 0xd5, 0x54, 0xaf, 0x8b, 0x2b, 0x6c, 0x63, 0xb8, 0x8c, 0xdf, 0xb4, 0xf5, 0x60,
	0xaf, 0x1c, 0xfe, 0x5f, 0x9f, 0xe3, 0x10, 0xfa, 0x9b, 0x3d, 0xdb, 0x52, 0xb7, 0x82, 0x6c, 0xd5,
	0xac, 0x27, 0x3f, 0x35, 0x00, 0xd6, 0x1b, 0x15, 0x77, 0xa0, 0xe1, 0xbd, 0x40, 0x3b, 0x78, 0x0f,
	0x7a, 0x26, 0x71, 0x4d, 0xea, 0x38, 0xd4, 0x42, 0x1a, 0x7e, 0x08, 0x43, 0x9f, 0xfa, 0xbe, 0xed,
	0xb9, 0x3c, 0x74, 0x5f, 0xb8, 0xde, 0x77, 0x2e, 0x6a, 0xe0, 0x07, 0xb0, 0x57, 0x07, 0xa9, 0x6b,
	0x51, 0x0b, 0x35, 0x37, 0x79, 0xf4, 0xe5, 0xb9, 0xcd, 0xa8, 0x85, 0x5a, 0xf8, 0x00, 0x90, 0xed,
	0x5e, 0x10, 0xc7, 0xb6, 0x38, 0x61, 0x93, 0x70, 0x4a, 0xdd, 0x00, 0xb5, 0xf1, 0x63, 0xc0, 0x8c,
	0xfa, 0x5e, 0xc8, 0x4c, 0xca, 0xe9, 0xcb, 0x6f, 0x48, 0xe8, 0x07, 0xd4, 0x42, 0x1d, 0x3c, 0x84,
	0x7e, 0xe8, 0x92, 0x0b, 0x62, 0x3b, 0x64, 0xec, 0x50, 0xb4, 0x8b, 0xdf, 0x83, 0x87, 0x67, 0xc4,
	0x76, 0xa8, 0xc5, 0xcf, 0x19, 0x35, 0x3d, 0xd7, 0xb2, 0x03, 0xdb, 0x73, 0x51, 0x17, 0x23, 0x18,
	0x78, 0x61, 0xc0, 0xbd, 0x33, 0xce, 0x88, 0x3b, 0xa1, 0xa8, 0x27, 0x1d, 0x85, 0xae, 0x3d, 0x3d,
	0x77, 0xa8, 0xfc, 0x08, 0xb5, 0x10, 0xe0, 0x01, 0x74, 0x6d, 0x37, 0xa0, 0xcc, 0x25, 0x0e, 0xea,
	0xe3, 0x3e, 0xec, 0x92, 0xb1, 0xc7, 0x24, 0x34, 0x90, 0x87, 0xfa, 0x32, 0x7b, 0x27, 0x5f, 0x42,
	0xb7, 0xae, 0xb1, 0xbc, 0xbc, 0x1f, 0x8e, 0xa7, 0x76, 0x20, 0x79, 0x3b, 0x92, 0xc7, 0x42, 0xd7,
	0xb5, 0xdd, 0x09, 0xd2, 0xa4, 0x9e, 0xe9, 0xc9, 0x2f, 0x04, 0x14, 0x35, 0x4e, 0x4e, 0xa0, 0x25,
	0x57, 0x2a, 0xc6, 0xb0, 0x6f, 0x3a, 0xc4, 0xf7, 0xed, 0x33, 0xdb, 0x24, 0xca, 0xde, 0x0e, 0xde,
	0x07, 0x60, 0x74, 0xc2, 0xca, 0x72, 0x20, 0xed, 0x64, 0x06, 0x9d, 0x72, 0xfc, 0xe5, 0x15, 0x15,
	0x9b, 0x3b, 0x64, 0x4c, 0x1d, 0xb4, 0x23, 0x03, 0xe7, 0xcc, 0x1b, 0x93, 0xb1, 0xed, 0xd8, 0xc1,
	0x2b, 0xa4, 0xc9, 0x8b, 0x4c, 0xa8, 0x4b, 0x19, 0x71, 0xb8, 0x6f, 0x7a, 0x8c, 0xa2, 0x86, 0x94,
	0x9b, 0x86, 0x4e, 0x60, 0x97, 0x39, 0x4d, 0x59, 0xd5, 0xb5, 0x3c, 0xbf, 0x20, 0x4e, 0x48, 0x51,
	0xeb, 0xe4, 0x77, 0x0d, 0x3a, 0xe5, 0xa2, 0x93, 0x4e, 0x89, 0x69, 0x86, 0x8c, 0x98, 0xaf, 0xca,
	0x07, 0x95, 0xe5, 0xb3, 0x4b, 0x33, 0x18, 0xa0, 0xc3, 0xa8, 0x49, 0x1c, 0x07, 0x35, 0x24, 0xf1,
	0xec, 0x73, 0x3e, 0xb5, 0x4d, 0xe6, 0xa1, 0x56, 0x7d, 0x22, 0xf2, 0xd4, 0x56, 0x77, 0xf7, 0x4c,
	0x4e, 0x42, 0x13, 0x75, 0x24, 0xe4, 0x78, 0x13, 0xee, 0x78, 0xbe, 0x8f, 0x76, 0xa5, 0x81, 0x29,
	0x25, 0x2e, 0xf7, 0xbf, 0x0d, 0x09, 0xa3, 0x16, 0xa7, 0x8c, 0xa1, 0x2e, 0x7e, 0x02, 0x8f, 0x98,
	0xe7, 0x05, 0xfc, 0x0e, 0xd4, 0xc3, 0x8f, 0xe0, 0x81, 0x8a, 0x92, 0xb1, 0xef, 0x39, 0x61, 0x40,
	0x55, 0x18, 0xb0, 0x0e, 0x07, 0x53, 0x6a, 0xd9, 0x15, 0xe0, 0xaf, 0x90, 0xbe, 0x6c, 0x46, 0x36,
	0x42, 0x83, 0xd1, 0xaf, 0x8d, 0x8d, 0xa5, 0x9c, 0x5e, 0x2f, 0x96, 0x85, 0xc0, 0x17, 0x30, 0x2c,
	0x17, 0xc8, 0xea, 0x9f, 0x00, 0x3e, 0xbc, 0x6f, 0xc7, 0x54, 0x0b, 0xe4, 0xe9, 0x07, 0xf7, 0x13,
	0xe4, 0x3c, 0x18, 0x3b, 0xcf, 0x34, 0xfc, 0x12, 0x86, 0xd5, 0x50, 0xd7, 0x14, 0x7c, 0x74, 0x37,
	0x6d, 0x7b, 0x33, 0x3d, 0x3d, 0xfc, 0x1b, 0xc6, 0x4a, 0xf9, 0x39, 0x0c, 0xfc, 0x22, 0xca, 0x8a,
	0x6a, 0x55, 0xe1, 0xbb, 0xdb, 0xab, 0x96, 0x7b, 0xc7, 0xc2, 0x30, 0x76, 0xf0, 0xd7, 0x00, 0x74,
	0x1e, 0xdf, 0x9f, 0x5d, 0xed, 0xbe, 0x77, 0x67, 0x7f, 0xdf, 0x51, 0x3f, 0xcd, 0xbe, 0xf8, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0x40, 0xa5, 0x7e, 0x7d, 0xb4, 0x09, 0x00, 0x00,
}
