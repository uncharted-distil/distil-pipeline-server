// Code generated by protoc-gen-go. DO NOT EDIT.
// source: problem.proto

package pipeline

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Top level classification of the problem.
type TaskType int32

const (
	// Default value. Not to be used.
	TaskType_TASK_TYPE_UNDEFINED     TaskType = 0
	TaskType_CLASSIFICATION          TaskType = 1
	TaskType_REGRESSION              TaskType = 2
	TaskType_CLUSTERING              TaskType = 3
	TaskType_LINK_PREDICTION         TaskType = 4
	TaskType_VERTEX_NOMINATION       TaskType = 5
	TaskType_COMMUNITY_DETECTION     TaskType = 6
	TaskType_GRAPH_CLUSTERING        TaskType = 7
	TaskType_GRAPH_MATCHING          TaskType = 8
	TaskType_TIME_SERIES_FORECASTING TaskType = 9
	TaskType_COLLABORATIVE_FILTERING TaskType = 10
	TaskType_OBJECT_DETECTION        TaskType = 11
)

var TaskType_name = map[int32]string{
	0:  "TASK_TYPE_UNDEFINED",
	1:  "CLASSIFICATION",
	2:  "REGRESSION",
	3:  "CLUSTERING",
	4:  "LINK_PREDICTION",
	5:  "VERTEX_NOMINATION",
	6:  "COMMUNITY_DETECTION",
	7:  "GRAPH_CLUSTERING",
	8:  "GRAPH_MATCHING",
	9:  "TIME_SERIES_FORECASTING",
	10: "COLLABORATIVE_FILTERING",
	11: "OBJECT_DETECTION",
}
var TaskType_value = map[string]int32{
	"TASK_TYPE_UNDEFINED":     0,
	"CLASSIFICATION":          1,
	"REGRESSION":              2,
	"CLUSTERING":              3,
	"LINK_PREDICTION":         4,
	"VERTEX_NOMINATION":       5,
	"COMMUNITY_DETECTION":     6,
	"GRAPH_CLUSTERING":        7,
	"GRAPH_MATCHING":          8,
	"TIME_SERIES_FORECASTING": 9,
	"COLLABORATIVE_FILTERING": 10,
	"OBJECT_DETECTION":        11,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_problem_21650f98b898c36f, []int{0}
}

// Secondary classification of the problem.
type TaskSubtype int32

const (
	// Default value. Not to be used.
	TaskSubtype_TASK_SUBTYPE_UNDEFINED TaskSubtype = 0
	// No secondary task is applicable for this problem.
	TaskSubtype_NONE           TaskSubtype = 1
	TaskSubtype_BINARY         TaskSubtype = 2
	TaskSubtype_MULTICLASS     TaskSubtype = 3
	TaskSubtype_MULTILABEL     TaskSubtype = 4
	TaskSubtype_UNIVARIATE     TaskSubtype = 5
	TaskSubtype_MULTIVARIATE   TaskSubtype = 6
	TaskSubtype_OVERLAPPING    TaskSubtype = 7
	TaskSubtype_NONOVERLAPPING TaskSubtype = 8
)

var TaskSubtype_name = map[int32]string{
	0: "TASK_SUBTYPE_UNDEFINED",
	1: "NONE",
	2: "BINARY",
	3: "MULTICLASS",
	4: "MULTILABEL",
	5: "UNIVARIATE",
	6: "MULTIVARIATE",
	7: "OVERLAPPING",
	8: "NONOVERLAPPING",
}
var TaskSubtype_value = map[string]int32{
	"TASK_SUBTYPE_UNDEFINED": 0,
	"NONE":           1,
	"BINARY":         2,
	"MULTICLASS":     3,
	"MULTILABEL":     4,
	"UNIVARIATE":     5,
	"MULTIVARIATE":   6,
	"OVERLAPPING":    7,
	"NONOVERLAPPING": 8,
}

func (x TaskSubtype) String() string {
	return proto.EnumName(TaskSubtype_name, int32(x))
}
func (TaskSubtype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_problem_21650f98b898c36f, []int{1}
}

// The evaluation metric for any potential solution.
type PerformanceMetric int32

const (
	// Default value. Not to be used.
	PerformanceMetric_METRIC_UNDEFINED PerformanceMetric = 0
	// The following are the only evaluation methods required
	// to be supported for the ScoreSolution call.
	PerformanceMetric_ACCURACY                           PerformanceMetric = 1
	PerformanceMetric_PRECISION                          PerformanceMetric = 2
	PerformanceMetric_RECALL                             PerformanceMetric = 3
	PerformanceMetric_F1                                 PerformanceMetric = 4
	PerformanceMetric_F1_MICRO                           PerformanceMetric = 5
	PerformanceMetric_F1_MACRO                           PerformanceMetric = 6
	PerformanceMetric_ROC_AUC                            PerformanceMetric = 7
	PerformanceMetric_ROC_AUC_MICRO                      PerformanceMetric = 8
	PerformanceMetric_ROC_AUC_MACRO                      PerformanceMetric = 9
	PerformanceMetric_MEAN_SQUARED_ERROR                 PerformanceMetric = 10
	PerformanceMetric_ROOT_MEAN_SQUARED_ERROR            PerformanceMetric = 11
	PerformanceMetric_ROOT_MEAN_SQUARED_ERROR_AVG        PerformanceMetric = 12
	PerformanceMetric_MEAN_ABSOLUTE_ERROR                PerformanceMetric = 13
	PerformanceMetric_R_SQUARED                          PerformanceMetric = 14
	PerformanceMetric_NORMALIZED_MUTUAL_INFORMATION      PerformanceMetric = 15
	PerformanceMetric_JACCARD_SIMILARITY_SCORE           PerformanceMetric = 16
	PerformanceMetric_PRECISION_AT_TOP_K                 PerformanceMetric = 17
	PerformanceMetric_OBJECT_DETECTION_AVERAGE_PRECISION PerformanceMetric = 18
	// The rest are defined to allow expressing internal evaluation
	// scores used by TA2 during pipeline search. If any you are using
	// is missing, feel free to request it to be added.
	// Average loss of an unspecified loss function.
	PerformanceMetric_LOSS PerformanceMetric = 100
)

var PerformanceMetric_name = map[int32]string{
	0:   "METRIC_UNDEFINED",
	1:   "ACCURACY",
	2:   "PRECISION",
	3:   "RECALL",
	4:   "F1",
	5:   "F1_MICRO",
	6:   "F1_MACRO",
	7:   "ROC_AUC",
	8:   "ROC_AUC_MICRO",
	9:   "ROC_AUC_MACRO",
	10:  "MEAN_SQUARED_ERROR",
	11:  "ROOT_MEAN_SQUARED_ERROR",
	12:  "ROOT_MEAN_SQUARED_ERROR_AVG",
	13:  "MEAN_ABSOLUTE_ERROR",
	14:  "R_SQUARED",
	15:  "NORMALIZED_MUTUAL_INFORMATION",
	16:  "JACCARD_SIMILARITY_SCORE",
	17:  "PRECISION_AT_TOP_K",
	18:  "OBJECT_DETECTION_AVERAGE_PRECISION",
	100: "LOSS",
}
var PerformanceMetric_value = map[string]int32{
	"METRIC_UNDEFINED":                   0,
	"ACCURACY":                           1,
	"PRECISION":                          2,
	"RECALL":                             3,
	"F1":                                 4,
	"F1_MICRO":                           5,
	"F1_MACRO":                           6,
	"ROC_AUC":                            7,
	"ROC_AUC_MICRO":                      8,
	"ROC_AUC_MACRO":                      9,
	"MEAN_SQUARED_ERROR":                 10,
	"ROOT_MEAN_SQUARED_ERROR":            11,
	"ROOT_MEAN_SQUARED_ERROR_AVG":        12,
	"MEAN_ABSOLUTE_ERROR":                13,
	"R_SQUARED":                          14,
	"NORMALIZED_MUTUAL_INFORMATION":      15,
	"JACCARD_SIMILARITY_SCORE":           16,
	"PRECISION_AT_TOP_K":                 17,
	"OBJECT_DETECTION_AVERAGE_PRECISION": 18,
	"LOSS": 100,
}

func (x PerformanceMetric) String() string {
	return proto.EnumName(PerformanceMetric_name, int32(x))
}
func (PerformanceMetric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_problem_21650f98b898c36f, []int{2}
}

type ProblemPerformanceMetric struct {
	Metric PerformanceMetric `protobuf:"varint,1,opt,name=metric,proto3,enum=PerformanceMetric" json:"metric,omitempty"`
	// Additional params used by some metrics.
	K                    int32    `protobuf:"varint,2,opt,name=k,proto3" json:"k,omitempty"`
	PosLabel             string   `protobuf:"bytes,3,opt,name=pos_label,json=posLabel,proto3" json:"pos_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemPerformanceMetric) Reset()         { *m = ProblemPerformanceMetric{} }
func (m *ProblemPerformanceMetric) String() string { return proto.CompactTextString(m) }
func (*ProblemPerformanceMetric) ProtoMessage()    {}
func (*ProblemPerformanceMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_problem_21650f98b898c36f, []int{0}
}
func (m *ProblemPerformanceMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemPerformanceMetric.Unmarshal(m, b)
}
func (m *ProblemPerformanceMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemPerformanceMetric.Marshal(b, m, deterministic)
}
func (dst *ProblemPerformanceMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemPerformanceMetric.Merge(dst, src)
}
func (m *ProblemPerformanceMetric) XXX_Size() int {
	return xxx_messageInfo_ProblemPerformanceMetric.Size(m)
}
func (m *ProblemPerformanceMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemPerformanceMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemPerformanceMetric proto.InternalMessageInfo

func (m *ProblemPerformanceMetric) GetMetric() PerformanceMetric {
	if m != nil {
		return m.Metric
	}
	return PerformanceMetric_METRIC_UNDEFINED
}

func (m *ProblemPerformanceMetric) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *ProblemPerformanceMetric) GetPosLabel() string {
	if m != nil {
		return m.PosLabel
	}
	return ""
}

type Problem struct {
	// ID of this problem.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version of this problem.
	Version              string                      `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Name                 string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TaskType             TaskType                    `protobuf:"varint,5,opt,name=task_type,json=taskType,proto3,enum=TaskType" json:"task_type,omitempty"`
	TaskSubtype          TaskSubtype                 `protobuf:"varint,6,opt,name=task_subtype,json=taskSubtype,proto3,enum=TaskSubtype" json:"task_subtype,omitempty"`
	PerformanceMetrics   []*ProblemPerformanceMetric `protobuf:"bytes,7,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Problem) Reset()         { *m = Problem{} }
func (m *Problem) String() string { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()    {}
func (*Problem) Descriptor() ([]byte, []int) {
	return fileDescriptor_problem_21650f98b898c36f, []int{1}
}
func (m *Problem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Problem.Unmarshal(m, b)
}
func (m *Problem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Problem.Marshal(b, m, deterministic)
}
func (dst *Problem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Problem.Merge(dst, src)
}
func (m *Problem) XXX_Size() int {
	return xxx_messageInfo_Problem.Size(m)
}
func (m *Problem) XXX_DiscardUnknown() {
	xxx_messageInfo_Problem.DiscardUnknown(m)
}

var xxx_messageInfo_Problem proto.InternalMessageInfo

func (m *Problem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Problem) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Problem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Problem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Problem) GetTaskType() TaskType {
	if m != nil {
		return m.TaskType
	}
	return TaskType_TASK_TYPE_UNDEFINED
}

func (m *Problem) GetTaskSubtype() TaskSubtype {
	if m != nil {
		return m.TaskSubtype
	}
	return TaskSubtype_TASK_SUBTYPE_UNDEFINED
}

func (m *Problem) GetPerformanceMetrics() []*ProblemPerformanceMetric {
	if m != nil {
		return m.PerformanceMetrics
	}
	return nil
}

type ProblemTarget struct {
	TargetIndex          int32    `protobuf:"varint,1,opt,name=target_index,json=targetIndex,proto3" json:"target_index,omitempty"`
	ResourceId           string   `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ColumnIndex          int32    `protobuf:"varint,3,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	ColumnName           string   `protobuf:"bytes,4,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ClustersNumber       int32    `protobuf:"varint,5,opt,name=clusters_number,json=clustersNumber,proto3" json:"clusters_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemTarget) Reset()         { *m = ProblemTarget{} }
func (m *ProblemTarget) String() string { return proto.CompactTextString(m) }
func (*ProblemTarget) ProtoMessage()    {}
func (*ProblemTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_problem_21650f98b898c36f, []int{2}
}
func (m *ProblemTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemTarget.Unmarshal(m, b)
}
func (m *ProblemTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemTarget.Marshal(b, m, deterministic)
}
func (dst *ProblemTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemTarget.Merge(dst, src)
}
func (m *ProblemTarget) XXX_Size() int {
	return xxx_messageInfo_ProblemTarget.Size(m)
}
func (m *ProblemTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemTarget.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemTarget proto.InternalMessageInfo

func (m *ProblemTarget) GetTargetIndex() int32 {
	if m != nil {
		return m.TargetIndex
	}
	return 0
}

func (m *ProblemTarget) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ProblemTarget) GetColumnIndex() int32 {
	if m != nil {
		return m.ColumnIndex
	}
	return 0
}

func (m *ProblemTarget) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *ProblemTarget) GetClustersNumber() int32 {
	if m != nil {
		return m.ClustersNumber
	}
	return 0
}

type ProblemInput struct {
	// Should match one of input datasets given to the pipeline search.
	// Every "Dataset" object has an "id" associated with it and is available
	// in its metadata. That ID is then used here to reference those inputs.
	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Targets should resolve to columns in a given dataset.
	Targets              []*ProblemTarget `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ProblemInput) Reset()         { *m = ProblemInput{} }
func (m *ProblemInput) String() string { return proto.CompactTextString(m) }
func (*ProblemInput) ProtoMessage()    {}
func (*ProblemInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_problem_21650f98b898c36f, []int{3}
}
func (m *ProblemInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemInput.Unmarshal(m, b)
}
func (m *ProblemInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemInput.Marshal(b, m, deterministic)
}
func (dst *ProblemInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemInput.Merge(dst, src)
}
func (m *ProblemInput) XXX_Size() int {
	return xxx_messageInfo_ProblemInput.Size(m)
}
func (m *ProblemInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemInput.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemInput proto.InternalMessageInfo

func (m *ProblemInput) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *ProblemInput) GetTargets() []*ProblemTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

// Problem description matches the parsed problem description by
// the d3m_metadata.problem.parse_problem_description Python method.
// Problem outputs are not necessary for the purpose of this API
// and are needed only when executing an exported pipeline, but then
// TA2 gets full problem description anyway directly.
type ProblemDescription struct {
	Problem              *Problem        `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
	Inputs               []*ProblemInput `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ProblemDescription) Reset()         { *m = ProblemDescription{} }
func (m *ProblemDescription) String() string { return proto.CompactTextString(m) }
func (*ProblemDescription) ProtoMessage()    {}
func (*ProblemDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_problem_21650f98b898c36f, []int{4}
}
func (m *ProblemDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemDescription.Unmarshal(m, b)
}
func (m *ProblemDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemDescription.Marshal(b, m, deterministic)
}
func (dst *ProblemDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemDescription.Merge(dst, src)
}
func (m *ProblemDescription) XXX_Size() int {
	return xxx_messageInfo_ProblemDescription.Size(m)
}
func (m *ProblemDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemDescription.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemDescription proto.InternalMessageInfo

func (m *ProblemDescription) GetProblem() *Problem {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *ProblemDescription) GetInputs() []*ProblemInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func init() {
	proto.RegisterType((*ProblemPerformanceMetric)(nil), "ProblemPerformanceMetric")
	proto.RegisterType((*Problem)(nil), "Problem")
	proto.RegisterType((*ProblemTarget)(nil), "ProblemTarget")
	proto.RegisterType((*ProblemInput)(nil), "ProblemInput")
	proto.RegisterType((*ProblemDescription)(nil), "ProblemDescription")
	proto.RegisterEnum("TaskType", TaskType_name, TaskType_value)
	proto.RegisterEnum("TaskSubtype", TaskSubtype_name, TaskSubtype_value)
	proto.RegisterEnum("PerformanceMetric", PerformanceMetric_name, PerformanceMetric_value)
}

func init() { proto.RegisterFile("problem.proto", fileDescriptor_problem_21650f98b898c36f) }

var fileDescriptor_problem_21650f98b898c36f = []byte{
	// 966 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xdb, 0x72, 0xdb, 0x36,
	0x10, 0x2d, 0x75, 0xd7, 0xea, 0x62, 0x18, 0x49, 0x13, 0x35, 0x6e, 0x26, 0x8a, 0x66, 0x9a, 0x7a,
	0xfc, 0x20, 0x4f, 0xdc, 0x2f, 0x80, 0x28, 0xc8, 0x81, 0xcd, 0x8b, 0x0a, 0x82, 0x6a, 0x9d, 0x17,
	0x8c, 0x2e, 0x8c, 0x47, 0x63, 0x49, 0x64, 0x49, 0xaa, 0xd3, 0xfc, 0x44, 0x1f, 0xfb, 0x09, 0xfd,
	0x80, 0x7e, 0x41, 0x3f, 0xad, 0x03, 0x90, 0xb4, 0xe5, 0xb8, 0x79, 0xc3, 0x9e, 0xb3, 0x7b, 0xb0,
	0x7b, 0xb0, 0x43, 0x42, 0x27, 0x8a, 0xc3, 0xc5, 0x26, 0xd8, 0x0e, 0xa3, 0x38, 0x4c, 0xc3, 0x57,
	0xfd, 0xdb, 0x30, 0xbc, 0xdd, 0x04, 0xe7, 0x3a, 0x5a, 0xec, 0x3f, 0x9d, 0xaf, 0x82, 0x64, 0x19,
	0xaf, 0xa3, 0x34, 0x8c, 0xb3, 0x8c, 0xc1, 0x6f, 0xd0, 0x9b, 0x66, 0x25, 0xd3, 0x20, 0xfe, 0x14,
	0xc6, 0xdb, 0xf9, 0x6e, 0x19, 0xd8, 0x41, 0x1a, 0xaf, 0x97, 0xf8, 0x0c, 0x6a, 0x5b, 0x7d, 0xea,
	0x19, 0x7d, 0xe3, 0xb4, 0x7b, 0x81, 0x87, 0x4f, 0x72, 0x78, 0x9e, 0x81, 0xdb, 0x60, 0xdc, 0xf5,
	0x4a, 0x7d, 0xe3, 0xb4, 0xca, 0x8d, 0x3b, 0x7c, 0x02, 0xcd, 0x28, 0x4c, 0xe4, 0x66, 0xbe, 0x08,
	0x36, 0xbd, 0x72, 0xdf, 0x38, 0x6d, 0xf2, 0x46, 0x14, 0x26, 0x96, 0x8a, 0x07, 0x7f, 0x96, 0xa0,
	0x9e, 0xdf, 0x89, 0xbb, 0x50, 0x5a, 0xaf, 0xb4, 0x7c, 0x93, 0x97, 0xd6, 0x2b, 0xdc, 0x83, 0xfa,
	0xef, 0x41, 0x9c, 0xac, 0xc3, 0x9d, 0x16, 0x6b, 0xf2, 0x22, 0xc4, 0x18, 0x2a, 0xbb, 0xf9, 0x36,
	0xc8, 0xd5, 0xf4, 0x19, 0xf7, 0xa1, 0x55, 0x0c, 0xa4, 0x2a, 0x2a, 0x9a, 0x3a, 0x84, 0xf0, 0x3b,
	0x68, 0xa6, 0xf3, 0xe4, 0x4e, 0xa6, 0x9f, 0xa3, 0xa0, 0x57, 0xd5, 0x53, 0x34, 0x87, 0x62, 0x9e,
	0xdc, 0x89, 0xcf, 0x51, 0xc0, 0x1b, 0x69, 0x7e, 0xc2, 0xe7, 0xd0, 0xd6, 0x79, 0xc9, 0x7e, 0xa1,
	0x53, 0x6b, 0x3a, 0xb5, 0xad, 0x53, 0xbd, 0x0c, 0xe3, 0xad, 0xf4, 0x21, 0xc0, 0x57, 0xf0, 0x2c,
	0x7a, 0x30, 0x43, 0x66, 0x2e, 0x24, 0xbd, 0x7a, 0xbf, 0x7c, 0xda, 0xba, 0xf8, 0x6e, 0xf8, 0x35,
	0x4f, 0x39, 0x8e, 0xbe, 0x84, 0x92, 0xc1, 0xbf, 0x06, 0x74, 0xf2, 0x02, 0x31, 0x8f, 0x6f, 0x83,
	0x14, 0xbf, 0x55, 0xed, 0xa8, 0x93, 0x5c, 0xef, 0x56, 0xc1, 0x1f, 0xda, 0xa0, 0xaa, 0x6a, 0x40,
	0x61, 0x4c, 0x41, 0xf8, 0x0d, 0xb4, 0xe2, 0x20, 0x09, 0xf7, 0xf1, 0x32, 0x90, 0xeb, 0x55, 0xee,
	0x16, 0x14, 0x10, 0x5b, 0x29, 0x8d, 0x65, 0xb8, 0xd9, 0x6f, 0x77, 0xb9, 0x46, 0x39, 0xd3, 0xc8,
	0xb0, 0x7b, 0x8d, 0x3c, 0x45, 0x5b, 0x9b, 0xf9, 0x07, 0x19, 0xe4, 0x28, 0x83, 0x7f, 0x84, 0xa3,
	0xe5, 0x66, 0x9f, 0xa4, 0x41, 0x9c, 0xc8, 0xdd, 0x7e, 0xbb, 0x08, 0x62, 0x6d, 0x62, 0x95, 0x77,
	0x0b, 0xd8, 0xd1, 0xe8, 0xe0, 0x17, 0x68, 0xe7, 0x13, 0xb0, 0x5d, 0xb4, 0x4f, 0xf1, 0x6b, 0x80,
	0xd5, 0x3c, 0x9d, 0x27, 0x6a, 0x82, 0xe2, 0x7d, 0x9b, 0x39, 0xc2, 0x56, 0xf8, 0x14, 0xea, 0xd9,
	0x2c, 0x49, 0xaf, 0xa4, 0x1d, 0xeb, 0x0e, 0x1f, 0x19, 0xc0, 0x0b, 0x7a, 0x20, 0x01, 0xe7, 0xcc,
	0xf8, 0xe0, 0x59, 0x07, 0x50, 0xcf, 0x17, 0x5d, 0x6b, 0xb7, 0x2e, 0x1a, 0x45, 0x3d, 0x2f, 0x08,
	0xfc, 0x03, 0xd4, 0xd6, 0xaa, 0x97, 0xe2, 0x8a, 0xce, 0xf0, 0xb0, 0x43, 0x9e, 0x93, 0x67, 0x7f,
	0x95, 0xa0, 0x51, 0x2c, 0x04, 0x7e, 0x09, 0xcf, 0x04, 0xf1, 0xae, 0xa5, 0xb8, 0x99, 0x52, 0xe9,
	0x3b, 0x63, 0x3a, 0x61, 0x0e, 0x1d, 0xa3, 0x6f, 0x30, 0x86, 0xae, 0x69, 0x11, 0xcf, 0x63, 0x13,
	0x66, 0x12, 0xc1, 0x5c, 0x07, 0x19, 0xb8, 0x0b, 0xc0, 0xe9, 0x25, 0xa7, 0x9e, 0xa7, 0xe2, 0x92,
	0x8a, 0x4d, 0xcb, 0xf7, 0x04, 0xe5, 0xcc, 0xb9, 0x44, 0x65, 0xfc, 0x0c, 0x8e, 0x2c, 0xe6, 0x5c,
	0xcb, 0x29, 0xa7, 0x63, 0x66, 0xea, 0xa2, 0x0a, 0xfe, 0x16, 0x8e, 0x67, 0x94, 0x0b, 0xfa, 0xab,
	0x74, 0x5c, 0x9b, 0x39, 0x99, 0x56, 0x55, 0x5d, 0x6c, 0xba, 0xb6, 0xed, 0x3b, 0x4c, 0xdc, 0xc8,
	0x31, 0x15, 0x34, 0xcb, 0xaf, 0xe1, 0xe7, 0x80, 0x2e, 0x39, 0x99, 0x7e, 0x90, 0x07, 0xd2, 0x75,
	0xd5, 0x4e, 0x86, 0xda, 0x44, 0x98, 0x1f, 0x14, 0xd6, 0xc0, 0x27, 0xf0, 0x52, 0x30, 0x9b, 0x4a,
	0x8f, 0x72, 0x46, 0x3d, 0x39, 0x71, 0x39, 0x35, 0x89, 0x27, 0x14, 0xd9, 0x54, 0xa4, 0xe9, 0x5a,
	0x16, 0x19, 0xb9, 0x9c, 0x08, 0x36, 0xa3, 0x72, 0xc2, 0xac, 0x5c, 0x0d, 0xd4, 0x1d, 0xee, 0xe8,
	0x8a, 0x9a, 0xe2, 0xe0, 0xe6, 0xd6, 0xd9, 0xdf, 0x06, 0xb4, 0x0e, 0xd6, 0x1f, 0xbf, 0x82, 0x17,
	0xda, 0x1b, 0xcf, 0x1f, 0x3d, 0xb1, 0xa7, 0x01, 0x15, 0xc7, 0x75, 0x28, 0x32, 0x30, 0x40, 0x6d,
	0xc4, 0x1c, 0xc2, 0x6f, 0x32, 0x43, 0x6c, 0xdf, 0x12, 0x4c, 0x3b, 0x87, 0xca, 0xf7, 0xb1, 0x45,
	0x46, 0xd4, 0x42, 0x15, 0x15, 0xfb, 0x0e, 0x9b, 0x11, 0xce, 0x88, 0xa0, 0xa8, 0x8a, 0x11, 0xb4,
	0x35, 0x5f, 0x20, 0x35, 0x7c, 0x04, 0x2d, 0x77, 0x46, 0xb9, 0x45, 0xa6, 0xd3, 0xfb, 0xc1, 0x1d,
	0xd7, 0x39, 0xc4, 0x1a, 0x67, 0xff, 0x94, 0xe1, 0xf8, 0xe9, 0xc7, 0xeb, 0x39, 0x20, 0x9b, 0x0a,
	0xce, 0xcc, 0x47, 0x8d, 0xb6, 0xa1, 0x41, 0x4c, 0xd3, 0xe7, 0xc4, 0xbc, 0x41, 0x06, 0xee, 0x40,
	0x73, 0xca, 0xa9, 0xc9, 0xf2, 0x07, 0x04, 0xa8, 0x29, 0xcf, 0x2c, 0x0b, 0x95, 0x71, 0x0d, 0x4a,
	0x93, 0xf7, 0xa8, 0xa2, 0x0a, 0x26, 0xef, 0xa5, 0xcd, 0x4c, 0xee, 0xa2, 0x6a, 0x11, 0x11, 0x15,
	0xd5, 0x70, 0x0b, 0xea, 0xdc, 0x35, 0x25, 0xf1, 0x4d, 0x54, 0xc7, 0xc7, 0xd0, 0xc9, 0x83, 0x3c,
	0xbb, 0xf1, 0x08, 0xd2, 0x25, 0x4d, 0xfc, 0x02, 0xb0, 0x4d, 0x89, 0x23, 0xbd, 0x9f, 0x7d, 0xc2,
	0xe9, 0x58, 0x52, 0xce, 0x5d, 0x8e, 0x40, 0xbd, 0x0f, 0x77, 0x5d, 0x21, 0xff, 0x87, 0x6c, 0xe1,
	0x37, 0x70, 0xf2, 0x15, 0x52, 0x92, 0xd9, 0x25, 0x6a, 0xab, 0xed, 0xd1, 0x1c, 0x19, 0x79, 0xae,
	0xe5, 0x0b, 0x9a, 0x57, 0x76, 0xd4, 0x80, 0xbc, 0xa8, 0x40, 0x5d, 0xfc, 0x16, 0x5e, 0x3b, 0x2e,
	0xb7, 0x89, 0xc5, 0x3e, 0xd2, 0xb1, 0xb4, 0x7d, 0xe1, 0x13, 0x4b, 0x32, 0x67, 0xa2, 0x30, 0xfd,
	0xea, 0x47, 0xf8, 0x7b, 0xe8, 0x5d, 0x11, 0xd3, 0x24, 0x7c, 0x2c, 0x3d, 0x66, 0x33, 0x8b, 0x70,
	0xb5, 0x91, 0x9e, 0xe9, 0x72, 0x8a, 0x90, 0x6a, 0xff, 0xde, 0x30, 0x49, 0x84, 0x14, 0xee, 0x54,
	0x5e, 0xa3, 0x63, 0xfc, 0x0e, 0x06, 0x5f, 0x6e, 0x90, 0x24, 0x33, 0xca, 0xc9, 0x25, 0x95, 0x0f,
	0x0e, 0x63, 0xb5, 0x27, 0x96, 0xeb, 0x79, 0x68, 0x35, 0x82, 0x8f, 0x8d, 0x68, 0x1d, 0x05, 0x9b,
	0xf5, 0x2e, 0x58, 0xd4, 0xf4, 0xaf, 0xe8, 0xa7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x7b,
	0x54, 0x43, 0xbd, 0x06, 0x00, 0x00,
}
