// Code generated by protoc-gen-go. DO NOT EDIT.
// source: problem.proto

package pipeline

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Top level classification of the problem.
type TaskType int32

const (
	// Default value. Not to be used.
	TaskType_TASK_TYPE_UNDEFINED     TaskType = 0
	TaskType_CLASSIFICATION          TaskType = 1
	TaskType_REGRESSION              TaskType = 2
	TaskType_CLUSTERING              TaskType = 3
	TaskType_LINK_PREDICTION         TaskType = 4
	TaskType_VERTEX_NOMINATION       TaskType = 5
	TaskType_COMMUNITY_DETECTION     TaskType = 6
	TaskType_GRAPH_CLUSTERING        TaskType = 7
	TaskType_GRAPH_MATCHING          TaskType = 8
	TaskType_TIME_SERIES_FORECASTING TaskType = 9
	TaskType_COLLABORATIVE_FILTERING TaskType = 10
)

var TaskType_name = map[int32]string{
	0:  "TASK_TYPE_UNDEFINED",
	1:  "CLASSIFICATION",
	2:  "REGRESSION",
	3:  "CLUSTERING",
	4:  "LINK_PREDICTION",
	5:  "VERTEX_NOMINATION",
	6:  "COMMUNITY_DETECTION",
	7:  "GRAPH_CLUSTERING",
	8:  "GRAPH_MATCHING",
	9:  "TIME_SERIES_FORECASTING",
	10: "COLLABORATIVE_FILTERING",
}
var TaskType_value = map[string]int32{
	"TASK_TYPE_UNDEFINED":     0,
	"CLASSIFICATION":          1,
	"REGRESSION":              2,
	"CLUSTERING":              3,
	"LINK_PREDICTION":         4,
	"VERTEX_NOMINATION":       5,
	"COMMUNITY_DETECTION":     6,
	"GRAPH_CLUSTERING":        7,
	"GRAPH_MATCHING":          8,
	"TIME_SERIES_FORECASTING": 9,
	"COLLABORATIVE_FILTERING": 10,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}
func (TaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

// Secondary classification of the problem.
type TaskSubtype int32

const (
	// Default value. Not to be used.
	TaskSubtype_TASK_SUBTYPE_UNDEFINED TaskSubtype = 0
	// No secondary task is applicable for this problem.
	TaskSubtype_NONE           TaskSubtype = 1
	TaskSubtype_BINARY         TaskSubtype = 2
	TaskSubtype_MULTICLASS     TaskSubtype = 3
	TaskSubtype_MULTILABEL     TaskSubtype = 4
	TaskSubtype_UNIVARIATE     TaskSubtype = 5
	TaskSubtype_MULTIVARIATE   TaskSubtype = 6
	TaskSubtype_OVERLAPPING    TaskSubtype = 7
	TaskSubtype_NONOVERLAPPING TaskSubtype = 8
)

var TaskSubtype_name = map[int32]string{
	0: "TASK_SUBTYPE_UNDEFINED",
	1: "NONE",
	2: "BINARY",
	3: "MULTICLASS",
	4: "MULTILABEL",
	5: "UNIVARIATE",
	6: "MULTIVARIATE",
	7: "OVERLAPPING",
	8: "NONOVERLAPPING",
}
var TaskSubtype_value = map[string]int32{
	"TASK_SUBTYPE_UNDEFINED": 0,
	"NONE":           1,
	"BINARY":         2,
	"MULTICLASS":     3,
	"MULTILABEL":     4,
	"UNIVARIATE":     5,
	"MULTIVARIATE":   6,
	"OVERLAPPING":    7,
	"NONOVERLAPPING": 8,
}

func (x TaskSubtype) String() string {
	return proto.EnumName(TaskSubtype_name, int32(x))
}
func (TaskSubtype) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

// The evaluation metric for any potential solution.
type PerformanceMetric int32

const (
	// Default value. Not to be used.
	PerformanceMetric_METRIC_UNDEFINED PerformanceMetric = 0
	// The following are the only evaluation methods required
	// to be supported for the ScorePipeline call.
	PerformanceMetric_ACCURACY                      PerformanceMetric = 1
	PerformanceMetric_F1                            PerformanceMetric = 2
	PerformanceMetric_F1_MICRO                      PerformanceMetric = 3
	PerformanceMetric_F1_MACRO                      PerformanceMetric = 4
	PerformanceMetric_ROC_AUC                       PerformanceMetric = 5
	PerformanceMetric_ROC_AUC_MICRO                 PerformanceMetric = 6
	PerformanceMetric_ROC_AUC_MACRO                 PerformanceMetric = 7
	PerformanceMetric_MEAN_SQUARED_ERROR            PerformanceMetric = 8
	PerformanceMetric_ROOT_MEAN_SQUARED_ERROR       PerformanceMetric = 9
	PerformanceMetric_ROOT_MEAN_SQUARED_ERROR_AVG   PerformanceMetric = 10
	PerformanceMetric_MEAN_ABSOLUTE_ERROR           PerformanceMetric = 11
	PerformanceMetric_R_SQUARED                     PerformanceMetric = 12
	PerformanceMetric_NORMALIZED_MUTUAL_INFORMATION PerformanceMetric = 13
	PerformanceMetric_JACCARD_SIMILARITY_SCORE      PerformanceMetric = 14
	PerformanceMetric_PRECISION_AT_TOP_K            PerformanceMetric = 15
	// The rest are defined to allow expressing internal evaluation
	// scores used by TA2 during pipeline search. If any you are using
	// is missing, feel free to request it to be added.
	// Average loss of an unspecified loss function.
	PerformanceMetric_LOSS PerformanceMetric = 100
)

var PerformanceMetric_name = map[int32]string{
	0:   "METRIC_UNDEFINED",
	1:   "ACCURACY",
	2:   "F1",
	3:   "F1_MICRO",
	4:   "F1_MACRO",
	5:   "ROC_AUC",
	6:   "ROC_AUC_MICRO",
	7:   "ROC_AUC_MACRO",
	8:   "MEAN_SQUARED_ERROR",
	9:   "ROOT_MEAN_SQUARED_ERROR",
	10:  "ROOT_MEAN_SQUARED_ERROR_AVG",
	11:  "MEAN_ABSOLUTE_ERROR",
	12:  "R_SQUARED",
	13:  "NORMALIZED_MUTUAL_INFORMATION",
	14:  "JACCARD_SIMILARITY_SCORE",
	15:  "PRECISION_AT_TOP_K",
	100: "LOSS",
}
var PerformanceMetric_value = map[string]int32{
	"METRIC_UNDEFINED":              0,
	"ACCURACY":                      1,
	"F1":                            2,
	"F1_MICRO":                      3,
	"F1_MACRO":                      4,
	"ROC_AUC":                       5,
	"ROC_AUC_MICRO":                 6,
	"ROC_AUC_MACRO":                 7,
	"MEAN_SQUARED_ERROR":            8,
	"ROOT_MEAN_SQUARED_ERROR":       9,
	"ROOT_MEAN_SQUARED_ERROR_AVG":   10,
	"MEAN_ABSOLUTE_ERROR":           11,
	"R_SQUARED":                     12,
	"NORMALIZED_MUTUAL_INFORMATION": 13,
	"JACCARD_SIMILARITY_SCORE":      14,
	"PRECISION_AT_TOP_K":            15,
	"LOSS":                          100,
}

func (x PerformanceMetric) String() string {
	return proto.EnumName(PerformanceMetric_name, int32(x))
}
func (PerformanceMetric) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type ProblemPerformanceMetric struct {
	Metric PerformanceMetric `protobuf:"varint,1,opt,name=metric,enum=PerformanceMetric" json:"metric,omitempty"`
	// Additional params used by some metrics.
	K        int32  `protobuf:"varint,2,opt,name=k" json:"k,omitempty"`
	PosLabel string `protobuf:"bytes,3,opt,name=pos_label,json=posLabel" json:"pos_label,omitempty"`
}

func (m *ProblemPerformanceMetric) Reset()                    { *m = ProblemPerformanceMetric{} }
func (m *ProblemPerformanceMetric) String() string            { return proto.CompactTextString(m) }
func (*ProblemPerformanceMetric) ProtoMessage()               {}
func (*ProblemPerformanceMetric) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *ProblemPerformanceMetric) GetMetric() PerformanceMetric {
	if m != nil {
		return m.Metric
	}
	return PerformanceMetric_METRIC_UNDEFINED
}

func (m *ProblemPerformanceMetric) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *ProblemPerformanceMetric) GetPosLabel() string {
	if m != nil {
		return m.PosLabel
	}
	return ""
}

type Problem struct {
	// ID of this problem.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Version of this problem.
	Version            string                      `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Name               string                      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description        string                      `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	TaskType           TaskType                    `protobuf:"varint,5,opt,name=task_type,json=taskType,enum=TaskType" json:"task_type,omitempty"`
	TaskSubtype        TaskSubtype                 `protobuf:"varint,6,opt,name=task_subtype,json=taskSubtype,enum=TaskSubtype" json:"task_subtype,omitempty"`
	PerformanceMetrics []*ProblemPerformanceMetric `protobuf:"bytes,7,rep,name=performance_metrics,json=performanceMetrics" json:"performance_metrics,omitempty"`
}

func (m *Problem) Reset()                    { *m = Problem{} }
func (m *Problem) String() string            { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()               {}
func (*Problem) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Problem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Problem) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Problem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Problem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Problem) GetTaskType() TaskType {
	if m != nil {
		return m.TaskType
	}
	return TaskType_TASK_TYPE_UNDEFINED
}

func (m *Problem) GetTaskSubtype() TaskSubtype {
	if m != nil {
		return m.TaskSubtype
	}
	return TaskSubtype_TASK_SUBTYPE_UNDEFINED
}

func (m *Problem) GetPerformanceMetrics() []*ProblemPerformanceMetric {
	if m != nil {
		return m.PerformanceMetrics
	}
	return nil
}

type ProblemTarget struct {
	TargetIndex int32  `protobuf:"varint,1,opt,name=target_index,json=targetIndex" json:"target_index,omitempty"`
	ResourceId  string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	ColumnIndex int32  `protobuf:"varint,3,opt,name=column_index,json=columnIndex" json:"column_index,omitempty"`
	ColumnName  string `protobuf:"bytes,4,opt,name=column_name,json=columnName" json:"column_name,omitempty"`
}

func (m *ProblemTarget) Reset()                    { *m = ProblemTarget{} }
func (m *ProblemTarget) String() string            { return proto.CompactTextString(m) }
func (*ProblemTarget) ProtoMessage()               {}
func (*ProblemTarget) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ProblemTarget) GetTargetIndex() int32 {
	if m != nil {
		return m.TargetIndex
	}
	return 0
}

func (m *ProblemTarget) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ProblemTarget) GetColumnIndex() int32 {
	if m != nil {
		return m.ColumnIndex
	}
	return 0
}

func (m *ProblemTarget) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

type ProblemInput struct {
	DatasetId string           `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	Targets   []*ProblemTarget `protobuf:"bytes,2,rep,name=targets" json:"targets,omitempty"`
}

func (m *ProblemInput) Reset()                    { *m = ProblemInput{} }
func (m *ProblemInput) String() string            { return proto.CompactTextString(m) }
func (*ProblemInput) ProtoMessage()               {}
func (*ProblemInput) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *ProblemInput) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *ProblemInput) GetTargets() []*ProblemTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

type ProblemOutputs struct {
	PredictionsFile string `protobuf:"bytes,1,opt,name=predictions_file,json=predictionsFile" json:"predictions_file,omitempty"`
	ScoresFile      string `protobuf:"bytes,2,opt,name=scores_file,json=scoresFile" json:"scores_file,omitempty"`
}

func (m *ProblemOutputs) Reset()                    { *m = ProblemOutputs{} }
func (m *ProblemOutputs) String() string            { return proto.CompactTextString(m) }
func (*ProblemOutputs) ProtoMessage()               {}
func (*ProblemOutputs) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *ProblemOutputs) GetPredictionsFile() string {
	if m != nil {
		return m.PredictionsFile
	}
	return ""
}

func (m *ProblemOutputs) GetScoresFile() string {
	if m != nil {
		return m.ScoresFile
	}
	return ""
}

// Problem description matches the parsed problem description by
// the d3m_metadata.problem.parse_problem_description Python method.
type ProblemDescription struct {
	Problem *Problem        `protobuf:"bytes,1,opt,name=problem" json:"problem,omitempty"`
	Inputs  []*ProblemInput `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	Outputs *ProblemOutputs `protobuf:"bytes,3,opt,name=outputs" json:"outputs,omitempty"`
}

func (m *ProblemDescription) Reset()                    { *m = ProblemDescription{} }
func (m *ProblemDescription) String() string            { return proto.CompactTextString(m) }
func (*ProblemDescription) ProtoMessage()               {}
func (*ProblemDescription) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *ProblemDescription) GetProblem() *Problem {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *ProblemDescription) GetInputs() []*ProblemInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ProblemDescription) GetOutputs() *ProblemOutputs {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func init() {
	proto.RegisterType((*ProblemPerformanceMetric)(nil), "ProblemPerformanceMetric")
	proto.RegisterType((*Problem)(nil), "Problem")
	proto.RegisterType((*ProblemTarget)(nil), "ProblemTarget")
	proto.RegisterType((*ProblemInput)(nil), "ProblemInput")
	proto.RegisterType((*ProblemOutputs)(nil), "ProblemOutputs")
	proto.RegisterType((*ProblemDescription)(nil), "ProblemDescription")
	proto.RegisterEnum("TaskType", TaskType_name, TaskType_value)
	proto.RegisterEnum("TaskSubtype", TaskSubtype_name, TaskSubtype_value)
	proto.RegisterEnum("PerformanceMetric", PerformanceMetric_name, PerformanceMetric_value)
}

func init() { proto.RegisterFile("problem.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 974 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xdd, 0x72, 0xdb, 0x36,
	0x13, 0xfd, 0xa8, 0x7f, 0xad, 0x7e, 0x4c, 0xc3, 0xf9, 0x12, 0x35, 0x6e, 0x26, 0x8a, 0x66, 0xda,
	0x71, 0x7c, 0x21, 0x4f, 0xdc, 0x27, 0x80, 0x28, 0xc8, 0x41, 0xcc, 0x1f, 0x15, 0x04, 0xdd, 0x3a,
	0xd3, 0x19, 0x8c, 0x2c, 0xc1, 0x1e, 0x8e, 0x25, 0x91, 0x25, 0xa9, 0x4e, 0x73, 0xd7, 0xeb, 0x5e,
	0xf4, 0xb6, 0x6f, 0xd0, 0xd7, 0xeb, 0x2b, 0x74, 0x00, 0x92, 0x8e, 0x5c, 0x37, 0x77, 0xd8, 0xb3,
	0x67, 0x0f, 0x76, 0x0f, 0x96, 0x12, 0xf4, 0xe2, 0x24, 0xba, 0x59, 0xcb, 0xcd, 0x38, 0x4e, 0xa2,
	0x2c, 0x7a, 0x39, 0xbc, 0x8b, 0xa2, 0xbb, 0xb5, 0x3c, 0xd3, 0xd1, 0xcd, 0xee, 0xf6, 0x6c, 0x25,
	0xd3, 0x65, 0x12, 0xc6, 0x59, 0x94, 0xe4, 0x8c, 0xd1, 0xcf, 0x30, 0x98, 0xe7, 0x25, 0x73, 0x99,
	0xdc, 0x46, 0xc9, 0x66, 0xb1, 0x5d, 0x4a, 0x47, 0x66, 0x49, 0xb8, 0x44, 0xa7, 0xd0, 0xd8, 0xe8,
	0xd3, 0xc0, 0x18, 0x1a, 0x27, 0xfd, 0x73, 0x34, 0x7e, 0xc2, 0x61, 0x05, 0x03, 0x75, 0xc1, 0xb8,
	0x1f, 0x54, 0x86, 0xc6, 0x49, 0x9d, 0x19, 0xf7, 0xe8, 0x18, 0xda, 0x71, 0x94, 0x8a, 0xf5, 0xe2,
	0x46, 0xae, 0x07, 0xd5, 0xa1, 0x71, 0xd2, 0x66, 0xad, 0x38, 0x4a, 0x6d, 0x15, 0x8f, 0xfe, 0xa8,
	0x40, 0xb3, 0xb8, 0x13, 0xf5, 0xa1, 0x12, 0xae, 0xb4, 0x7c, 0x9b, 0x55, 0xc2, 0x15, 0x1a, 0x40,
	0xf3, 0x17, 0x99, 0xa4, 0x61, 0xb4, 0xd5, 0x62, 0x6d, 0x56, 0x86, 0x08, 0x41, 0x6d, 0xbb, 0xd8,
	0xc8, 0x42, 0x4d, 0x9f, 0xd1, 0x10, 0x3a, 0xe5, 0x40, 0xaa, 0xa2, 0xa6, 0x53, 0xfb, 0x10, 0xfa,
	0x16, 0xda, 0xd9, 0x22, 0xbd, 0x17, 0xd9, 0xa7, 0x58, 0x0e, 0xea, 0x7a, 0x8a, 0xf6, 0x98, 0x2f,
	0xd2, 0x7b, 0xfe, 0x29, 0x96, 0xac, 0x95, 0x15, 0x27, 0x74, 0x06, 0x5d, 0xcd, 0x4b, 0x77, 0x37,
	0x9a, 0xda, 0xd0, 0xd4, 0xae, 0xa6, 0xfa, 0x39, 0xc6, 0x3a, 0xd9, 0xe7, 0x00, 0x7d, 0x80, 0xa3,
	0xf8, 0xb3, 0x19, 0x22, 0x77, 0x21, 0x1d, 0x34, 0x87, 0xd5, 0x93, 0xce, 0xf9, 0x57, 0xe3, 0x2f,
	0x79, 0xca, 0x50, 0xfc, 0x6f, 0x28, 0x1d, 0xfd, 0x69, 0x40, 0xaf, 0x28, 0xe0, 0x8b, 0xe4, 0x4e,
	0x66, 0xe8, 0x8d, 0x6a, 0x47, 0x9d, 0x44, 0xb8, 0x5d, 0xc9, 0x5f, 0xb5, 0x41, 0x75, 0xd5, 0x80,
	0xc2, 0xa8, 0x82, 0xd0, 0x6b, 0xe8, 0x24, 0x32, 0x8d, 0x76, 0xc9, 0x52, 0x8a, 0x70, 0x55, 0xb8,
	0x05, 0x25, 0x44, 0x57, 0x4a, 0x63, 0x19, 0xad, 0x77, 0x9b, 0x6d, 0xa1, 0x51, 0xcd, 0x35, 0x72,
	0xec, 0x41, 0xa3, 0xa0, 0x68, 0x6b, 0x73, 0xff, 0x20, 0x87, 0xdc, 0xc5, 0x46, 0x8e, 0x7e, 0x80,
	0x6e, 0xd1, 0x18, 0xdd, 0xc6, 0xbb, 0x0c, 0xbd, 0x02, 0x58, 0x2d, 0xb2, 0x45, 0xaa, 0x1a, 0x2b,
	0x9f, 0xad, 0x5d, 0x20, 0x74, 0x85, 0x4e, 0xa0, 0x99, 0xb7, 0x98, 0x0e, 0x2a, 0xda, 0x88, 0xfe,
	0xf8, 0xd1, 0x5c, 0xac, 0x4c, 0x8f, 0x7e, 0x82, 0x7e, 0x91, 0xf1, 0x76, 0x59, 0xbc, 0xcb, 0x52,
	0xf4, 0x16, 0xcc, 0x38, 0x91, 0xab, 0x70, 0xa9, 0xde, 0x2d, 0x15, 0xb7, 0xe1, 0x5a, 0x16, 0x17,
	0x1c, 0xec, 0xe1, 0xb3, 0x70, 0x2d, 0x55, 0xdb, 0xe9, 0x32, 0x4a, 0x64, 0xc1, 0x2a, 0x46, 0xcf,
	0x21, 0x45, 0x18, 0xfd, 0x6e, 0x00, 0x2a, 0xe4, 0xa7, 0x7b, 0xcb, 0x30, 0x82, 0x66, 0xf1, 0x79,
	0x68, 0xe5, 0xce, 0x79, 0xab, 0x6c, 0x8f, 0x95, 0x09, 0xf4, 0x0d, 0x34, 0x42, 0x35, 0x6a, 0x39,
	0x41, 0x6f, 0xbc, 0x6f, 0x00, 0x2b, 0x92, 0xe8, 0x2d, 0x34, 0xa3, 0xbc, 0x71, 0xed, 0x6b, 0xe7,
	0xfc, 0x60, 0xfc, 0x78, 0x1e, 0x56, 0xe6, 0x4f, 0x7f, 0xab, 0x40, 0xab, 0xdc, 0x38, 0xf4, 0x02,
	0x8e, 0x38, 0xf6, 0x2f, 0x05, 0xbf, 0x9e, 0x13, 0x11, 0xb8, 0x53, 0x32, 0xa3, 0x2e, 0x99, 0x9a,
	0xff, 0x43, 0x08, 0xfa, 0x96, 0x8d, 0x7d, 0x9f, 0xce, 0xa8, 0x85, 0x39, 0xf5, 0x5c, 0xd3, 0x40,
	0x7d, 0x00, 0x46, 0x2e, 0x18, 0xf1, 0x7d, 0x15, 0x57, 0x54, 0x6c, 0xd9, 0x81, 0xcf, 0x09, 0xa3,
	0xee, 0x85, 0x59, 0x45, 0x47, 0x70, 0x60, 0x53, 0xf7, 0x52, 0xcc, 0x19, 0x99, 0x52, 0x4b, 0x17,
	0xd5, 0xd0, 0xff, 0xe1, 0xf0, 0x8a, 0x30, 0x4e, 0x7e, 0x14, 0xae, 0xe7, 0x50, 0x37, 0xd7, 0xaa,
	0xab, 0x8b, 0x2d, 0xcf, 0x71, 0x02, 0x97, 0xf2, 0x6b, 0x31, 0x25, 0x9c, 0xe4, 0xfc, 0x06, 0x7a,
	0x06, 0xe6, 0x05, 0xc3, 0xf3, 0xf7, 0x62, 0x4f, 0xba, 0xa9, 0xda, 0xc9, 0x51, 0x07, 0x73, 0xeb,
	0xbd, 0xc2, 0x5a, 0xe8, 0x18, 0x5e, 0x70, 0xea, 0x10, 0xe1, 0x13, 0x46, 0x89, 0x2f, 0x66, 0x1e,
	0x23, 0x16, 0xf6, 0xb9, 0x4a, 0xb6, 0x55, 0xd2, 0xf2, 0x6c, 0x1b, 0x4f, 0x3c, 0x86, 0x39, 0xbd,
	0x22, 0x62, 0x46, 0xed, 0x42, 0x0d, 0x4e, 0xff, 0x32, 0xa0, 0xb3, 0xf7, 0x25, 0xa1, 0x97, 0xf0,
	0x5c, 0xbb, 0xe0, 0x07, 0x93, 0x27, 0x46, 0xb4, 0xa0, 0xe6, 0x7a, 0x2e, 0x31, 0x0d, 0x04, 0xd0,
	0x98, 0x50, 0x17, 0xb3, 0xeb, 0x7c, 0x74, 0x27, 0xb0, 0x39, 0xd5, 0x1e, 0x99, 0xd5, 0x87, 0xd8,
	0xc6, 0x13, 0x62, 0x9b, 0x35, 0x15, 0x07, 0x2e, 0xbd, 0xc2, 0x8c, 0x62, 0x4e, 0xcc, 0x3a, 0x32,
	0xa1, 0xab, 0xf3, 0x25, 0xd2, 0x40, 0x07, 0xd0, 0xf1, 0xae, 0x08, 0xb3, 0xf1, 0x7c, 0xfe, 0x30,
	0xa2, 0xeb, 0xb9, 0xfb, 0x58, 0xeb, 0xf4, 0xef, 0x0a, 0x1c, 0x3e, 0xfd, 0x1d, 0x7c, 0x06, 0xa6,
	0x43, 0x38, 0xa3, 0xd6, 0xa3, 0x46, 0xbb, 0xd0, 0xc2, 0x96, 0x15, 0x30, 0x6c, 0x5d, 0x9b, 0x06,
	0x6a, 0x40, 0x65, 0xf6, 0xce, 0xac, 0x28, 0x74, 0xf6, 0x4e, 0x38, 0xd4, 0x62, 0x9e, 0x59, 0x2d,
	0x23, 0xac, 0xa2, 0x1a, 0xea, 0x40, 0x93, 0x79, 0x96, 0xc0, 0x81, 0x65, 0xd6, 0xd1, 0x21, 0xf4,
	0x8a, 0xa0, 0x60, 0x37, 0x1e, 0x41, 0xba, 0xa4, 0x89, 0x9e, 0x03, 0x72, 0x08, 0x76, 0x85, 0xff,
	0x7d, 0x80, 0x19, 0x99, 0x0a, 0xc2, 0x98, 0xc7, 0xf2, 0xb7, 0x60, 0x9e, 0xc7, 0xc5, 0x7f, 0x24,
	0xdb, 0xe8, 0x35, 0x1c, 0x7f, 0x21, 0x29, 0xf0, 0xd5, 0x85, 0x09, 0x6a, 0x19, 0x74, 0x0e, 0x4f,
	0x7c, 0xcf, 0x0e, 0x38, 0x29, 0x2a, 0x3b, 0xa8, 0x07, 0x6d, 0x56, 0x56, 0x98, 0x5d, 0xf4, 0x06,
	0x5e, 0xb9, 0x1e, 0x73, 0xb0, 0x4d, 0x3f, 0x92, 0xa9, 0x70, 0x02, 0x1e, 0x60, 0x5b, 0x50, 0x77,
	0xa6, 0x30, 0xbd, 0x3e, 0x3d, 0xf4, 0x35, 0x0c, 0x3e, 0x60, 0xcb, 0xc2, 0x6c, 0x2a, 0x7c, 0xea,
	0x50, 0x1b, 0x33, 0xb5, 0x60, 0xbe, 0xe5, 0x31, 0x62, 0xf6, 0x55, 0xfb, 0x73, 0x46, 0x2c, 0xaa,
	0x16, 0x58, 0x60, 0x2e, 0xb8, 0x37, 0x17, 0x97, 0xe6, 0x81, 0x7a, 0x64, 0xdb, 0xf3, 0x7d, 0x73,
	0x35, 0x81, 0x8f, 0xad, 0x38, 0x8c, 0xe5, 0x3a, 0xdc, 0xca, 0x9b, 0x86, 0xfe, 0x4b, 0xfa, 0xee,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x6f, 0xf6, 0x1b, 0xc5, 0x06, 0x00, 0x00,
}
