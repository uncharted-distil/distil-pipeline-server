// Code generated by protoc-gen-go. DO NOT EDIT.
// source: value.proto

package pipeline

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ValueType int32

const (
	// Default value. Not to be used.
	ValueType_VALUE_TYPE_UNDEFINED ValueType = 0
	// Raw value. Not all values can be represented as a raw value.
	ValueType_RAW ValueType = 1
	// Represent the value as a D3M dataset. Only "file://" schema is supported using a
	// shared file system. Dataset URI should point to the "datasetDoc.json" file of the dataset.
	// Only Dataset container values can be represented this way.
	ValueType_DATASET_URI ValueType = 2
	// Represent values by Python-pickling them. Only "file://" schema is supported using a
	// shared file system. Pickle URI should point to the file with ".pickle" file extension.
	ValueType_PICKLE_URI ValueType = 3
	// Represent values by Python-pickling them but sending them through the API.
	ValueType_PICKLE_BLOB ValueType = 4
	// Represent the value as a CSV file. Only "file://" schema is supported using a
	// shared file system. CSV URI should point to the file with ".csv" file extension.
	// Only tabular container values with numberic and string cell values can be represented
	// this way.
	ValueType_CSV_URI ValueType = 5
	// Represent values with arrow and storing them into shared instance of Plasma.
	ValueType_PLASMA_ID ValueType = 6
)

var ValueType_name = map[int32]string{
	0: "VALUE_TYPE_UNDEFINED",
	1: "RAW",
	2: "DATASET_URI",
	3: "PICKLE_URI",
	4: "PICKLE_BLOB",
	5: "CSV_URI",
	6: "PLASMA_ID",
}
var ValueType_value = map[string]int32{
	"VALUE_TYPE_UNDEFINED": 0,
	"RAW":         1,
	"DATASET_URI": 2,
	"PICKLE_URI":  3,
	"PICKLE_BLOB": 4,
	"CSV_URI":     5,
	"PLASMA_ID":   6,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}
func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type ValueError struct {
	// A error message useful for debugging or logging. Not meant to be very end-user friendly.
	// If a list of supported/allowed value types could not support a given value, then message
	// should say so. On the other hand, if there was really an error using a value type which
	// would otherwise support a given value, then the error message should communicate this error.
	// If there was such an error but some later value type allowed for recovery, then there
	// should be no error.
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ValueError) Reset()                    { *m = ValueError{} }
func (m *ValueError) String() string            { return proto.CompactTextString(m) }
func (*ValueError) ProtoMessage()               {}
func (*ValueError) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ValueError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Value struct {
	// Types that are valid to be assigned to Value:
	//	*Value_Error
	//	*Value_Double
	//	*Value_Int64
	//	*Value_Bool
	//	*Value_String_
	//	*Value_Bytes
	//	*Value_DatasetUri
	//	*Value_PickleUri
	//	*Value_PickleBlob
	//	*Value_CsvUri
	//	*Value_PlasmaId
	Value isValue_Value `protobuf_oneof:"value"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

type isValue_Value interface {
	isValue_Value()
}

type Value_Error struct {
	Error *ValueError `protobuf:"bytes,1,opt,name=error,oneof"`
}
type Value_Double struct {
	Double float64 `protobuf:"fixed64,2,opt,name=double,oneof"`
}
type Value_Int64 struct {
	Int64 int64 `protobuf:"varint,3,opt,name=int64,oneof"`
}
type Value_Bool struct {
	Bool bool `protobuf:"varint,4,opt,name=bool,oneof"`
}
type Value_String_ struct {
	String_ string `protobuf:"bytes,5,opt,name=string,oneof"`
}
type Value_Bytes struct {
	Bytes []byte `protobuf:"bytes,6,opt,name=bytes,proto3,oneof"`
}
type Value_DatasetUri struct {
	DatasetUri string `protobuf:"bytes,7,opt,name=dataset_uri,json=datasetUri,oneof"`
}
type Value_PickleUri struct {
	PickleUri string `protobuf:"bytes,8,opt,name=pickle_uri,json=pickleUri,oneof"`
}
type Value_PickleBlob struct {
	PickleBlob []byte `protobuf:"bytes,9,opt,name=pickle_blob,json=pickleBlob,proto3,oneof"`
}
type Value_CsvUri struct {
	CsvUri string `protobuf:"bytes,10,opt,name=csv_uri,json=csvUri,oneof"`
}
type Value_PlasmaId struct {
	PlasmaId []byte `protobuf:"bytes,11,opt,name=plasma_id,json=plasmaId,proto3,oneof"`
}

func (*Value_Error) isValue_Value()      {}
func (*Value_Double) isValue_Value()     {}
func (*Value_Int64) isValue_Value()      {}
func (*Value_Bool) isValue_Value()       {}
func (*Value_String_) isValue_Value()    {}
func (*Value_Bytes) isValue_Value()      {}
func (*Value_DatasetUri) isValue_Value() {}
func (*Value_PickleUri) isValue_Value()  {}
func (*Value_PickleBlob) isValue_Value() {}
func (*Value_CsvUri) isValue_Value()     {}
func (*Value_PlasmaId) isValue_Value()   {}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Value) GetError() *ValueError {
	if x, ok := m.GetValue().(*Value_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Value) GetDouble() float64 {
	if x, ok := m.GetValue().(*Value_Double); ok {
		return x.Double
	}
	return 0
}

func (m *Value) GetInt64() int64 {
	if x, ok := m.GetValue().(*Value_Int64); ok {
		return x.Int64
	}
	return 0
}

func (m *Value) GetBool() bool {
	if x, ok := m.GetValue().(*Value_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *Value) GetString_() string {
	if x, ok := m.GetValue().(*Value_String_); ok {
		return x.String_
	}
	return ""
}

func (m *Value) GetBytes() []byte {
	if x, ok := m.GetValue().(*Value_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *Value) GetDatasetUri() string {
	if x, ok := m.GetValue().(*Value_DatasetUri); ok {
		return x.DatasetUri
	}
	return ""
}

func (m *Value) GetPickleUri() string {
	if x, ok := m.GetValue().(*Value_PickleUri); ok {
		return x.PickleUri
	}
	return ""
}

func (m *Value) GetPickleBlob() []byte {
	if x, ok := m.GetValue().(*Value_PickleBlob); ok {
		return x.PickleBlob
	}
	return nil
}

func (m *Value) GetCsvUri() string {
	if x, ok := m.GetValue().(*Value_CsvUri); ok {
		return x.CsvUri
	}
	return ""
}

func (m *Value) GetPlasmaId() []byte {
	if x, ok := m.GetValue().(*Value_PlasmaId); ok {
		return x.PlasmaId
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_Error)(nil),
		(*Value_Double)(nil),
		(*Value_Int64)(nil),
		(*Value_Bool)(nil),
		(*Value_String_)(nil),
		(*Value_Bytes)(nil),
		(*Value_DatasetUri)(nil),
		(*Value_PickleUri)(nil),
		(*Value_PickleBlob)(nil),
		(*Value_CsvUri)(nil),
		(*Value_PlasmaId)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_Error:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *Value_Double:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Double))
	case *Value_Int64:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64))
	case *Value_Bool:
		t := uint64(0)
		if x.Bool {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Value_String_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.String_)
	case *Value_Bytes:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Bytes)
	case *Value_DatasetUri:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.DatasetUri)
	case *Value_PickleUri:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.PickleUri)
	case *Value_PickleBlob:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.PickleBlob)
	case *Value_CsvUri:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CsvUri)
	case *Value_PlasmaId:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.PlasmaId)
	case nil:
	default:
		return fmt.Errorf("Value.Value has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // value.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ValueError)
		err := b.DecodeMessage(msg)
		m.Value = &Value_Error{msg}
		return true, err
	case 2: // value.double
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Value_Double{math.Float64frombits(x)}
		return true, err
	case 3: // value.int64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Int64{int64(x)}
		return true, err
	case 4: // value.bool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Bool{x != 0}
		return true, err
	case 5: // value.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Value_String_{x}
		return true, err
	case 6: // value.bytes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &Value_Bytes{x}
		return true, err
	case 7: // value.dataset_uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Value_DatasetUri{x}
		return true, err
	case 8: // value.pickle_uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Value_PickleUri{x}
		return true, err
	case 9: // value.pickle_blob
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &Value_PickleBlob{x}
		return true, err
	case 10: // value.csv_uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Value_CsvUri{x}
		return true, err
	case 11: // value.plasma_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &Value_PlasmaId{x}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_Double:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case *Value_Int64:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64))
	case *Value_Bool:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *Value_String_:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case *Value_Bytes:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Bytes)))
		n += len(x.Bytes)
	case *Value_DatasetUri:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.DatasetUri)))
		n += len(x.DatasetUri)
	case *Value_PickleUri:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PickleUri)))
		n += len(x.PickleUri)
	case *Value_PickleBlob:
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PickleBlob)))
		n += len(x.PickleBlob)
	case *Value_CsvUri:
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CsvUri)))
		n += len(x.CsvUri)
	case *Value_PlasmaId:
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PlasmaId)))
		n += len(x.PlasmaId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ValueError)(nil), "ValueError")
	proto.RegisterType((*Value)(nil), "Value")
	proto.RegisterEnum("ValueType", ValueType_name, ValueType_value)
}

func init() { proto.RegisterFile("value.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x92, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x86, 0x9b, 0xb6, 0x69, 0x9a, 0x33, 0x7e, 0x84, 0x61, 0x91, 0x51, 0x10, 0xb3, 0x2b, 0x48,
	0xf0, 0x62, 0x17, 0x54, 0xbc, 0x4f, 0xb6, 0x91, 0x06, 0xeb, 0x5a, 0xd2, 0x0f, 0xd1, 0x9b, 0x90,
	0x69, 0xc6, 0x32, 0x38, 0xdb, 0x09, 0x33, 0x69, 0x61, 0xc1, 0x1f, 0xe9, 0x4f, 0x92, 0x99, 0x4c,
	0xd9, 0xcb, 0xe7, 0x9c, 0xe7, 0x7d, 0x73, 0x48, 0x02, 0xe8, 0x54, 0x8b, 0x23, 0xbb, 0x6e, 0x95,
	0xec, 0xe4, 0xab, 0x78, 0x2f, 0xe5, 0x5e, 0xb0, 0x1b, 0x4b, 0xf4, 0xf8, 0xfb, 0xa6, 0x61, 0x7a,
	0xa7, 0x78, 0xdb, 0x49, 0xd5, 0x1b, 0x57, 0xef, 0x00, 0xb6, 0x26, 0x90, 0x2b, 0x25, 0x15, 0x26,
	0x10, 0xdc, 0x33, 0xad, 0xeb, 0x3d, 0x23, 0x5e, 0xec, 0x25, 0x61, 0x79, 0xc6, 0xab, 0x7f, 0x43,
	0xf0, 0xad, 0x88, 0xdf, 0x82, 0xcf, 0x8c, 0x6c, 0x0d, 0xf4, 0x01, 0x5d, 0x3f, 0xe6, 0xe7, 0x83,
	0xb2, 0xdf, 0x61, 0x02, 0x93, 0x46, 0x1e, 0xa9, 0x60, 0x64, 0x18, 0x7b, 0x89, 0x37, 0x1f, 0x94,
	0x8e, 0xf1, 0x0b, 0xf0, 0xf9, 0xa1, 0xfb, 0xfc, 0x89, 0x8c, 0x62, 0x2f, 0x19, 0x99, 0x84, 0x45,
	0x7c, 0x01, 0x63, 0x2a, 0xa5, 0x20, 0xe3, 0xd8, 0x4b, 0xa6, 0xf3, 0x41, 0x69, 0xc9, 0xf4, 0xe8,
	0x4e, 0xf1, 0xc3, 0x9e, 0xf8, 0xe6, 0x1e, 0xd3, 0xd3, 0xb3, 0xe9, 0xa1, 0x0f, 0x1d, 0xd3, 0x64,
	0x12, 0x7b, 0xc9, 0x13, 0xd3, 0x63, 0x11, 0x5f, 0x02, 0x6a, 0xea, 0xae, 0xd6, 0xac, 0xab, 0x8e,
	0x8a, 0x93, 0xc0, 0xc5, 0xc0, 0x0d, 0x37, 0x8a, 0xe3, 0x37, 0x00, 0x2d, 0xdf, 0xfd, 0x11, 0xcc,
	0x1a, 0x53, 0x67, 0x84, 0xfd, 0xcc, 0x08, 0x97, 0x80, 0x9c, 0x40, 0x85, 0xa4, 0x24, 0x74, 0x4f,
	0x70, 0xa9, 0x4c, 0x48, 0x8a, 0x5f, 0x42, 0xb0, 0xd3, 0x27, 0x5b, 0x00, 0xe7, 0xcb, 0x76, 0xfa,
	0x64, 0xd2, 0xaf, 0x21, 0x6c, 0x45, 0xad, 0xef, 0xeb, 0x8a, 0x37, 0x04, 0xb9, 0xec, 0xb4, 0x1f,
	0x15, 0x4d, 0x16, 0x80, 0x6f, 0x3f, 0xd1, 0xfb, 0xbf, 0x10, 0xda, 0x57, 0xb7, 0x7e, 0x68, 0x19,
	0x26, 0x70, 0xb1, 0x4d, 0x17, 0x9b, 0xbc, 0x5a, 0xff, 0x5c, 0xe6, 0xd5, 0xe6, 0x6e, 0x96, 0x7f,
	0x29, 0xee, 0xf2, 0x59, 0x34, 0xc0, 0x01, 0x8c, 0xca, 0xf4, 0x47, 0xe4, 0xe1, 0xe7, 0x80, 0x66,
	0xe9, 0x3a, 0x5d, 0xe5, 0xeb, 0x6a, 0x53, 0x16, 0xd1, 0x10, 0x3f, 0x03, 0x58, 0x16, 0xb7, 0x5f,
	0x17, 0xb9, 0xe5, 0x91, 0x11, 0x1c, 0x67, 0x8b, 0xef, 0x59, 0x34, 0xc6, 0x08, 0x82, 0xdb, 0xd5,
	0xd6, 0x6e, 0x7d, 0xfc, 0x14, 0xc2, 0xe5, 0x22, 0x5d, 0x7d, 0x4b, 0xab, 0x62, 0x16, 0x4d, 0x32,
	0xf8, 0x35, 0x6d, 0x79, 0xcb, 0x04, 0x3f, 0x30, 0x3a, 0xb1, 0xff, 0xc2, 0xc7, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x7c, 0x4f, 0xd3, 0x38, 0x3c, 0x02, 0x00, 0x00,
}
